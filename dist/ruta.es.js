function t(t,e){const n=Object.create(null),r=t.split(",");for(let o=0;o<r.length;o++)n[r[o]]=!0;return e?t=>!!n[t.toLowerCase()]:t=>!!n[t]}const e=t("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function n(t){return!!t||""===t}function r(t){if(x(t)){const e={};for(let n=0;n<t.length;n++){const o=t[n],i=S(o)?s(o):r(o);if(i)for(const t in i)e[t]=i[t]}return e}return S(t)||N(t)?t:void 0}const o=/;(?![^(]*\))/g,i=/:(.+)/;function s(t){const e={};return t.split(o).forEach((t=>{if(t){const n=t.split(i);n.length>1&&(e[n[0].trim()]=n[1].trim())}})),e}function a(t){let e="";if(S(t))e=t;else if(x(t))for(let n=0;n<t.length;n++){const r=a(t[n]);r&&(e+=r+" ")}else if(N(t))for(const n in t)t[n]&&(e+=n+" ");return e.trim()}const l=t=>S(t)?t:null==t?"":x(t)||N(t)&&(t.toString===A||!k(t.toString))?JSON.stringify(t,c,2):String(t),c=(t,e)=>e&&e.__v_isRef?c(t,e.value):w(e)?{[`Map(${e.size})`]:[...e.entries()].reduce(((t,[e,n])=>(t[`${e} =>`]=n,t)),{})}:I(e)?{[`Set(${e.size})`]:[...e.values()]}:!N(e)||x(e)||O(e)?e:String(e),u={},f=[],d=()=>{},p=()=>!1,h=/^on[^a-z]/,g=t=>h.test(t),v=t=>t.startsWith("onUpdate:"),m=Object.assign,y=(t,e)=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)},b=Object.prototype.hasOwnProperty,_=(t,e)=>b.call(t,e),x=Array.isArray,w=t=>"[object Map]"===E(t),I=t=>"[object Set]"===E(t),k=t=>"function"==typeof t,S=t=>"string"==typeof t,D=t=>"symbol"==typeof t,N=t=>null!==t&&"object"==typeof t,C=t=>N(t)&&k(t.then)&&k(t.catch),A=Object.prototype.toString,E=t=>A.call(t),O=t=>"[object Object]"===E(t),T=t=>S(t)&&"NaN"!==t&&"-"!==t[0]&&""+parseInt(t,10)===t,$=t(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),P=t=>{const e=Object.create(null);return n=>e[n]||(e[n]=t(n))},R=/-(\w)/g,M=P((t=>t.replace(R,((t,e)=>e?e.toUpperCase():"")))),V=/\B([A-Z])/g,j=P((t=>t.replace(V,"-$1").toLowerCase())),L=P((t=>t.charAt(0).toUpperCase()+t.slice(1))),F=P((t=>t?`on${L(t)}`:"")),U=(t,e)=>!Object.is(t,e),K=(t,e)=>{for(let n=0;n<t.length;n++)t[n](e)},B=(t,e,n)=>{Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:n})},W=t=>{const e=parseFloat(t);return isNaN(e)?t:e};let H;let X;class q{constructor(t=!1){this.active=!0,this.effects=[],this.cleanups=[],!t&&X&&(this.parent=X,this.index=(X.scopes||(X.scopes=[])).push(this)-1)}run(t){if(this.active)try{return X=this,t()}finally{X=this.parent}}on(){X=this}off(){X=this.parent}stop(t){if(this.active){let e,n;for(e=0,n=this.effects.length;e<n;e++)this.effects[e].stop();for(e=0,n=this.cleanups.length;e<n;e++)this.cleanups[e]();if(this.scopes)for(e=0,n=this.scopes.length;e<n;e++)this.scopes[e].stop(!0);if(this.parent&&!t){const t=this.parent.scopes.pop();t&&t!==this&&(this.parent.scopes[this.index]=t,t.index=this.index)}this.active=!1}}}const z=t=>{const e=new Set(t);return e.w=0,e.n=0,e},Y=t=>(t.w&Q)>0,G=t=>(t.n&Q)>0,J=new WeakMap;let Z=0,Q=1;let tt;const et=Symbol(""),nt=Symbol("");class rt{constructor(t,e=null,n){this.fn=t,this.scheduler=e,this.active=!0,this.deps=[],this.parent=void 0,function(t,e=X){e&&e.active&&e.effects.push(t)}(this,n)}run(){if(!this.active)return this.fn();let t=tt,e=it;for(;t;){if(t===this)return;t=t.parent}try{return this.parent=tt,tt=this,it=!0,Q=1<<++Z,Z<=30?(({deps:t})=>{if(t.length)for(let e=0;e<t.length;e++)t[e].w|=Q})(this):ot(this),this.fn()}finally{Z<=30&&(t=>{const{deps:e}=t;if(e.length){let n=0;for(let r=0;r<e.length;r++){const o=e[r];Y(o)&&!G(o)?o.delete(t):e[n++]=o,o.w&=~Q,o.n&=~Q}e.length=n}})(this),Q=1<<--Z,tt=this.parent,it=e,this.parent=void 0}}stop(){this.active&&(ot(this),this.onStop&&this.onStop(),this.active=!1)}}function ot(t){const{deps:e}=t;if(e.length){for(let n=0;n<e.length;n++)e[n].delete(t);e.length=0}}let it=!0;const st=[];function at(){st.push(it),it=!1}function lt(){const t=st.pop();it=void 0===t||t}function ct(t,e,n){if(it&&tt){let e=J.get(t);e||J.set(t,e=new Map);let r=e.get(n);r||e.set(n,r=z()),ut(r)}}function ut(t,e){let n=!1;Z<=30?G(t)||(t.n|=Q,n=!Y(t)):n=!t.has(tt),n&&(t.add(tt),tt.deps.push(t))}function ft(t,e,n,r,o,i){const s=J.get(t);if(!s)return;let a=[];if("clear"===e)a=[...s.values()];else if("length"===n&&x(t))s.forEach(((t,e)=>{("length"===e||e>=r)&&a.push(t)}));else switch(void 0!==n&&a.push(s.get(n)),e){case"add":x(t)?T(n)&&a.push(s.get("length")):(a.push(s.get(et)),w(t)&&a.push(s.get(nt)));break;case"delete":x(t)||(a.push(s.get(et)),w(t)&&a.push(s.get(nt)));break;case"set":w(t)&&a.push(s.get(et))}if(1===a.length)a[0]&&dt(a[0]);else{const t=[];for(const e of a)e&&t.push(...e);dt(z(t))}}function dt(t,e){for(const n of x(t)?t:[...t])(n!==tt||n.allowRecurse)&&(n.scheduler?n.scheduler():n.run())}const pt=t("__proto__,__v_isRef,__isVue"),ht=new Set(Object.getOwnPropertyNames(Symbol).map((t=>Symbol[t])).filter(D)),gt=_t(),vt=_t(!1,!0),mt=_t(!0),yt=bt();function bt(){const t={};return["includes","indexOf","lastIndexOf"].forEach((e=>{t[e]=function(...t){const n=oe(this);for(let e=0,o=this.length;e<o;e++)ct(n,0,e+"");const r=n[e](...t);return-1===r||!1===r?n[e](...t.map(oe)):r}})),["push","pop","shift","unshift","splice"].forEach((e=>{t[e]=function(...t){at();const n=oe(this)[e].apply(this,t);return lt(),n}})),t}function _t(t=!1,e=!1){return function(n,r,o){if("__v_isReactive"===r)return!t;if("__v_isReadonly"===r)return t;if("__v_isShallow"===r)return e;if("__v_raw"===r&&o===(t?e?Yt:zt:e?qt:Xt).get(n))return n;const i=x(n);if(!t&&i&&_(yt,r))return Reflect.get(yt,r,o);const s=Reflect.get(n,r,o);if(D(r)?ht.has(r):pt(r))return s;if(t||ct(n,0,r),e)return s;if(le(s)){return!i||!T(r)?s.value:s}return N(s)?t?Zt(s):Jt(s):s}}function xt(t=!1){return function(e,n,r,o){let i=e[n];if(ee(i)&&le(i)&&!le(r))return!1;if(!t&&!ee(r)&&(ne(r)||(r=oe(r),i=oe(i)),!x(e)&&le(i)&&!le(r)))return i.value=r,!0;const s=x(e)&&T(n)?Number(n)<e.length:_(e,n),a=Reflect.set(e,n,r,o);return e===oe(o)&&(s?U(r,i)&&ft(e,"set",n,r):ft(e,"add",n,r)),a}}const wt={get:gt,set:xt(),deleteProperty:function(t,e){const n=_(t,e);t[e];const r=Reflect.deleteProperty(t,e);return r&&n&&ft(t,"delete",e,void 0),r},has:function(t,e){const n=Reflect.has(t,e);return D(e)&&ht.has(e)||ct(t,0,e),n},ownKeys:function(t){return ct(t,0,x(t)?"length":et),Reflect.ownKeys(t)}},It={get:mt,set:(t,e)=>!0,deleteProperty:(t,e)=>!0},kt=m({},wt,{get:vt,set:xt(!0)}),St=t=>t,Dt=t=>Reflect.getPrototypeOf(t);function Nt(t,e,n=!1,r=!1){const o=oe(t=t.__v_raw),i=oe(e);e!==i&&!n&&ct(o,0,e),!n&&ct(o,0,i);const{has:s}=Dt(o),a=r?St:n?ae:se;return s.call(o,e)?a(t.get(e)):s.call(o,i)?a(t.get(i)):void(t!==o&&t.get(e))}function Ct(t,e=!1){const n=this.__v_raw,r=oe(n),o=oe(t);return t!==o&&!e&&ct(r,0,t),!e&&ct(r,0,o),t===o?n.has(t):n.has(t)||n.has(o)}function At(t,e=!1){return t=t.__v_raw,!e&&ct(oe(t),0,et),Reflect.get(t,"size",t)}function Et(t){t=oe(t);const e=oe(this);return Dt(e).has.call(e,t)||(e.add(t),ft(e,"add",t,t)),this}function Ot(t,e){e=oe(e);const n=oe(this),{has:r,get:o}=Dt(n);let i=r.call(n,t);i||(t=oe(t),i=r.call(n,t));const s=o.call(n,t);return n.set(t,e),i?U(e,s)&&ft(n,"set",t,e):ft(n,"add",t,e),this}function Tt(t){const e=oe(this),{has:n,get:r}=Dt(e);let o=n.call(e,t);o||(t=oe(t),o=n.call(e,t)),r&&r.call(e,t);const i=e.delete(t);return o&&ft(e,"delete",t,void 0),i}function $t(){const t=oe(this),e=0!==t.size,n=t.clear();return e&&ft(t,"clear",void 0,void 0),n}function Pt(t,e){return function(n,r){const o=this,i=o.__v_raw,s=oe(i),a=e?St:t?ae:se;return!t&&ct(s,0,et),i.forEach(((t,e)=>n.call(r,a(t),a(e),o)))}}function Rt(t,e,n){return function(...r){const o=this.__v_raw,i=oe(o),s=w(i),a="entries"===t||t===Symbol.iterator&&s,l="keys"===t&&s,c=o[t](...r),u=n?St:e?ae:se;return!e&&ct(i,0,l?nt:et),{next(){const{value:t,done:e}=c.next();return e?{value:t,done:e}:{value:a?[u(t[0]),u(t[1])]:u(t),done:e}},[Symbol.iterator](){return this}}}}function Mt(t){return function(...e){return"delete"!==t&&this}}function Vt(){const t={get(t){return Nt(this,t)},get size(){return At(this)},has:Ct,add:Et,set:Ot,delete:Tt,clear:$t,forEach:Pt(!1,!1)},e={get(t){return Nt(this,t,!1,!0)},get size(){return At(this)},has:Ct,add:Et,set:Ot,delete:Tt,clear:$t,forEach:Pt(!1,!0)},n={get(t){return Nt(this,t,!0)},get size(){return At(this,!0)},has(t){return Ct.call(this,t,!0)},add:Mt("add"),set:Mt("set"),delete:Mt("delete"),clear:Mt("clear"),forEach:Pt(!0,!1)},r={get(t){return Nt(this,t,!0,!0)},get size(){return At(this,!0)},has(t){return Ct.call(this,t,!0)},add:Mt("add"),set:Mt("set"),delete:Mt("delete"),clear:Mt("clear"),forEach:Pt(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((o=>{t[o]=Rt(o,!1,!1),n[o]=Rt(o,!0,!1),e[o]=Rt(o,!1,!0),r[o]=Rt(o,!0,!0)})),[t,n,e,r]}const[jt,Lt,Ft,Ut]=Vt();function Kt(t,e){const n=e?t?Ut:Ft:t?Lt:jt;return(e,r,o)=>"__v_isReactive"===r?!t:"__v_isReadonly"===r?t:"__v_raw"===r?e:Reflect.get(_(n,r)&&r in e?n:e,r,o)}const Bt={get:Kt(!1,!1)},Wt={get:Kt(!1,!0)},Ht={get:Kt(!0,!1)},Xt=new WeakMap,qt=new WeakMap,zt=new WeakMap,Yt=new WeakMap;function Gt(t){return t.__v_skip||!Object.isExtensible(t)?0:function(t){switch(t){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((t=>E(t).slice(8,-1))(t))}function Jt(t){return ee(t)?t:Qt(t,!1,wt,Bt,Xt)}function Zt(t){return Qt(t,!0,It,Ht,zt)}function Qt(t,e,n,r,o){if(!N(t))return t;if(t.__v_raw&&(!e||!t.__v_isReactive))return t;const i=o.get(t);if(i)return i;const s=Gt(t);if(0===s)return t;const a=new Proxy(t,2===s?r:n);return o.set(t,a),a}function te(t){return ee(t)?te(t.__v_raw):!(!t||!t.__v_isReactive)}function ee(t){return!(!t||!t.__v_isReadonly)}function ne(t){return!(!t||!t.__v_isShallow)}function re(t){return te(t)||ee(t)}function oe(t){const e=t&&t.__v_raw;return e?oe(e):t}function ie(t){return B(t,"__v_skip",!0),t}const se=t=>N(t)?Jt(t):t,ae=t=>N(t)?Zt(t):t;function le(t){return!(!t||!0!==t.__v_isRef)}const ce={get:(t,e,n)=>{return le(r=Reflect.get(t,e,n))?r.value:r;var r},set:(t,e,n,r)=>{const o=t[e];return le(o)&&!le(n)?(o.value=n,!0):Reflect.set(t,e,n,r)}};function ue(t){return te(t)?t:new Proxy(t,ce)}class fe{constructor(t,e,n,r){this._setter=e,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new rt(t,(()=>{var t;this._dirty||(this._dirty=!0,(t=oe(t=this)).dep&&dt(t.dep))})),this.effect.computed=this,this.effect.active=this._cacheable=!r,this.__v_isReadonly=n}get value(){const t=oe(this);var e;return e=t,it&&tt&&ut((e=oe(e)).dep||(e.dep=z())),!t._dirty&&t._cacheable||(t._dirty=!1,t._value=t.effect.run()),t._value}set value(t){this._setter(t)}}function de(t,e,n,r){let o;try{o=r?t(...r):t()}catch(i){he(i,e,n)}return o}function pe(t,e,n,r){if(k(t)){const o=de(t,e,n,r);return o&&C(o)&&o.catch((t=>{he(t,e,n)})),o}const o=[];for(let i=0;i<t.length;i++)o.push(pe(t[i],e,n,r));return o}function he(t,e,n,r=!0){e&&e.vnode;if(e){let r=e.parent;const o=e.proxy,i=n;for(;r;){const e=r.ec;if(e)for(let n=0;n<e.length;n++)if(!1===e[n](t,o,i))return;r=r.parent}const s=e.appContext.config.errorHandler;if(s)return void de(s,null,10,[t,o,i])}!function(t,e,n,r=!0){console.error(t)}(t,0,0,r)}Promise.resolve();let ge=!1,ve=!1;const me=[];let ye=0;const be=[];let _e=null,xe=0;const we=[];let Ie=null,ke=0;const Se=Promise.resolve();let De=null,Ne=null;function Ce(t){const e=De||Se;return t?e.then(this?t.bind(this):t):e}function Ae(t){me.length&&me.includes(t,ge&&t.allowRecurse?ye+1:ye)||t===Ne||(null==t.id?me.push(t):me.splice(function(t){let e=ye+1,n=me.length;for(;e<n;){const r=e+n>>>1;Pe(me[r])<t?e=r+1:n=r}return e}(t.id),0,t),Ee())}function Ee(){ge||ve||(ve=!0,De=Se.then(Re))}function Oe(t,e,n,r){x(t)?n.push(...t):e&&e.includes(t,t.allowRecurse?r+1:r)||n.push(t),Ee()}function Te(t,e=null){if(be.length){for(Ne=e,_e=[...new Set(be)],be.length=0,xe=0;xe<_e.length;xe++)_e[xe]();_e=null,xe=0,Ne=null,Te(t,e)}}function $e(t){if(we.length){const t=[...new Set(we)];if(we.length=0,Ie)return void Ie.push(...t);for(Ie=t,Ie.sort(((t,e)=>Pe(t)-Pe(e))),ke=0;ke<Ie.length;ke++)Ie[ke]();Ie=null,ke=0}}const Pe=t=>null==t.id?1/0:t.id;function Re(t){ve=!1,ge=!0,Te(t),me.sort(((t,e)=>Pe(t)-Pe(e)));try{for(ye=0;ye<me.length;ye++){const t=me[ye];t&&!1!==t.active&&de(t,null,14)}}finally{ye=0,me.length=0,$e(),ge=!1,De=null,(me.length||be.length||we.length)&&Re(t)}}function Me(t,e,...n){const r=t.vnode.props||u;let o=n;const i=e.startsWith("update:"),s=i&&e.slice(7);if(s&&s in r){const t=`${"modelValue"===s?"model":s}Modifiers`,{number:e,trim:i}=r[t]||u;i?o=n.map((t=>t.trim())):e&&(o=n.map(W))}let a,l=r[a=F(e)]||r[a=F(M(e))];!l&&i&&(l=r[a=F(j(e))]),l&&pe(l,t,6,o);const c=r[a+"Once"];if(c){if(t.emitted){if(t.emitted[a])return}else t.emitted={};t.emitted[a]=!0,pe(c,t,6,o)}}function Ve(t,e,n=!1){const r=e.emitsCache,o=r.get(t);if(void 0!==o)return o;const i=t.emits;let s={},a=!1;if(!k(t)){const r=t=>{const n=Ve(t,e,!0);n&&(a=!0,m(s,n))};!n&&e.mixins.length&&e.mixins.forEach(r),t.extends&&r(t.extends),t.mixins&&t.mixins.forEach(r)}return i||a?(x(i)?i.forEach((t=>s[t]=null)):m(s,i),r.set(t,s),s):(r.set(t,null),null)}function je(t,e){return!(!t||!g(e))&&(e=e.slice(2).replace(/Once$/,""),_(t,e[0].toLowerCase()+e.slice(1))||_(t,j(e))||_(t,e))}let Le=null,Fe=null;function Ue(t){const e=Le;return Le=t,Fe=t&&t.type.__scopeId||null,e}function Ke(t){const{type:e,vnode:n,proxy:r,withProxy:o,props:i,propsOptions:[s],slots:a,attrs:l,emit:c,render:u,renderCache:f,data:d,setupState:p,ctx:h,inheritAttrs:g}=t;let m,y;const b=Ue(t);try{if(4&n.shapeFlag){const t=o||r;m=wr(u.call(t,t,f,i,p,d,h)),y=l}else{const t=e;0,m=wr(t.length>1?t(i,{attrs:l,slots:a,emit:c}):t(i,null)),y=e.props?l:Be(l)}}catch(x){or.length=0,he(x,t,1),m=yr(nr)}let _=m;if(y&&!1!==g){const t=Object.keys(y),{shapeFlag:e}=_;t.length&&7&e&&(s&&t.some(v)&&(y=We(y,s)),_=br(_,y))}return n.dirs&&(_.dirs=_.dirs?_.dirs.concat(n.dirs):n.dirs),n.transition&&(_.transition=n.transition),m=_,Ue(b),m}const Be=t=>{let e;for(const n in t)("class"===n||"style"===n||g(n))&&((e||(e={}))[n]=t[n]);return e},We=(t,e)=>{const n={};for(const r in t)v(r)&&r.slice(9)in e||(n[r]=t[r]);return n};function He(t,e,n){const r=Object.keys(e);if(r.length!==Object.keys(t).length)return!0;for(let o=0;o<r.length;o++){const i=r[o];if(e[i]!==t[i]&&!je(n,i))return!0}return!1}function Xe(t,e,n=!1){const r=Pr||Le;if(r){const o=null==r.parent?r.vnode.appContext&&r.vnode.appContext.provides:r.parent.provides;if(o&&t in o)return o[t];if(arguments.length>1)return n&&k(e)?e.call(r.proxy):e}}const qe={};function ze(t,e,n){return Ye(t,e,n)}function Ye(t,e,{immediate:n,deep:r,flush:o,onTrack:i,onTrigger:s}=u){const a=Pr;let l,c,f=!1,p=!1;if(le(t)?(l=()=>t.value,f=ne(t)):te(t)?(l=()=>t,r=!0):x(t)?(p=!0,f=t.some(te),l=()=>t.map((t=>le(t)?t.value:te(t)?Ze(t):k(t)?de(t,a,2):void 0))):l=k(t)?e?()=>de(t,a,2):()=>{if(!a||!a.isUnmounted)return c&&c(),pe(t,a,3,[h])}:d,e&&r){const t=l;l=()=>Ze(t())}let h=t=>{c=b.onStop=()=>{de(t,a,4)}};if(jr)return h=d,e?n&&pe(e,a,3,[l(),p?[]:void 0,h]):l(),d;let g=p?[]:qe;const v=()=>{if(b.active)if(e){const t=b.run();(r||f||(p?t.some(((t,e)=>U(t,g[e]))):U(t,g)))&&(c&&c(),pe(e,a,3,[t,g===qe?void 0:g,h]),g=t)}else b.run()};let m;v.allowRecurse=!!e,m="sync"===o?v:"post"===o?()=>qn(v,a&&a.suspense):()=>{!a||a.isMounted?function(t){Oe(t,_e,be,xe)}(v):v()};const b=new rt(l,m);return e?n?v():g=b.run():"post"===o?qn(b.run.bind(b),a&&a.suspense):b.run(),()=>{b.stop(),a&&a.scope&&y(a.scope.effects,b)}}function Ge(t,e,n){const r=this.proxy,o=S(t)?t.includes(".")?Je(r,t):()=>r[t]:t.bind(r,r);let i;k(e)?i=e:(i=e.handler,n=e);const s=Pr;Rr(this);const a=Ye(o,i.bind(r),n);return s?Rr(s):Mr(),a}function Je(t,e){const n=e.split(".");return()=>{let e=t;for(let t=0;t<n.length&&e;t++)e=e[n[t]];return e}}function Ze(t,e){if(!N(t)||t.__v_skip)return t;if((e=e||new Set).has(t))return t;if(e.add(t),le(t))Ze(t.value,e);else if(x(t))for(let n=0;n<t.length;n++)Ze(t[n],e);else if(I(t)||w(t))t.forEach((t=>{Ze(t,e)}));else if(O(t))for(const n in t)Ze(t[n],e);return t}const Qe=t=>!!t.type.__asyncLoader,tn=t=>t.type.__isKeepAlive;function en(t,e){rn(t,"a",e)}function nn(t,e){rn(t,"da",e)}function rn(t,e,n=Pr){const r=t.__wdc||(t.__wdc=()=>{let e=n;for(;e;){if(e.isDeactivated)return;e=e.parent}return t()});if(sn(e,r,n),n){let t=n.parent;for(;t&&t.parent;)tn(t.parent.vnode)&&on(r,e,n,t),t=t.parent}}function on(t,e,n,r){const o=sn(e,t,r,!0);pn((()=>{y(r[e],o)}),n)}function sn(t,e,n=Pr,r=!1){if(n){const o=n[t]||(n[t]=[]),i=e.__weh||(e.__weh=(...r)=>{if(n.isUnmounted)return;at(),Rr(n);const o=pe(e,n,t,r);return Mr(),lt(),o});return r?o.unshift(i):o.push(i),i}}const an=t=>(e,n=Pr)=>(!jr||"sp"===t)&&sn(t,e,n),ln=an("bm"),cn=an("m"),un=an("bu"),fn=an("u"),dn=an("bum"),pn=an("um"),hn=an("sp"),gn=an("rtg"),vn=an("rtc");function mn(t,e=Pr){sn("ec",t,e)}let yn=!0;function bn(t){const e=wn(t),n=t.proxy,r=t.ctx;yn=!1,e.beforeCreate&&_n(e.beforeCreate,t,"bc");const{data:o,computed:i,methods:s,watch:a,provide:l,inject:c,created:u,beforeMount:f,mounted:p,beforeUpdate:h,updated:g,activated:v,deactivated:m,beforeDestroy:y,beforeUnmount:b,destroyed:_,unmounted:w,render:I,renderTracked:S,renderTriggered:D,errorCaptured:C,serverPrefetch:A,expose:E,inheritAttrs:O,components:T,directives:$,filters:P}=e;if(c&&function(t,e,n=d,r=!1){x(t)&&(t=Dn(t));for(const o in t){const n=t[o];let i;i=N(n)?"default"in n?Xe(n.from||o,n.default,!0):Xe(n.from||o):Xe(n),le(i)&&r?Object.defineProperty(e,o,{enumerable:!0,configurable:!0,get:()=>i.value,set:t=>i.value=t}):e[o]=i}}(c,r,null,t.appContext.config.unwrapInjectedRef),s)for(const d in s){const t=s[d];k(t)&&(r[d]=t.bind(n))}if(o){const e=o.call(n,n);N(e)&&(t.data=Jt(e))}if(yn=!0,i)for(const x in i){const t=i[x],e=k(t)?t.bind(n,n):k(t.get)?t.get.bind(n,n):d,o=!k(t)&&k(t.set)?t.set.bind(n):d,s=Kr({get:e,set:o});Object.defineProperty(r,x,{enumerable:!0,configurable:!0,get:()=>s.value,set:t=>s.value=t})}if(a)for(const d in a)xn(a[d],r,n,d);if(l){const t=k(l)?l.call(n):l;Reflect.ownKeys(t).forEach((e=>{!function(t,e){if(Pr){let n=Pr.provides;const r=Pr.parent&&Pr.parent.provides;r===n&&(n=Pr.provides=Object.create(r)),n[t]=e}}(e,t[e])}))}function R(t,e){x(e)?e.forEach((e=>t(e.bind(n)))):e&&t(e.bind(n))}if(u&&_n(u,t,"c"),R(ln,f),R(cn,p),R(un,h),R(fn,g),R(en,v),R(nn,m),R(mn,C),R(vn,S),R(gn,D),R(dn,b),R(pn,w),R(hn,A),x(E))if(E.length){const e=t.exposed||(t.exposed={});E.forEach((t=>{Object.defineProperty(e,t,{get:()=>n[t],set:e=>n[t]=e})}))}else t.exposed||(t.exposed={});I&&t.render===d&&(t.render=I),null!=O&&(t.inheritAttrs=O),T&&(t.components=T),$&&(t.directives=$)}function _n(t,e,n){pe(x(t)?t.map((t=>t.bind(e.proxy))):t.bind(e.proxy),e,n)}function xn(t,e,n,r){const o=r.includes(".")?Je(n,r):()=>n[r];if(S(t)){const n=e[t];k(n)&&ze(o,n)}else if(k(t))ze(o,t.bind(n));else if(N(t))if(x(t))t.forEach((t=>xn(t,e,n,r)));else{const r=k(t.handler)?t.handler.bind(n):e[t.handler];k(r)&&ze(o,r,t)}}function wn(t){const e=t.type,{mixins:n,extends:r}=e,{mixins:o,optionsCache:i,config:{optionMergeStrategies:s}}=t.appContext,a=i.get(e);let l;return a?l=a:o.length||n||r?(l={},o.length&&o.forEach((t=>In(l,t,s,!0))),In(l,e,s)):l=e,i.set(e,l),l}function In(t,e,n,r=!1){const{mixins:o,extends:i}=e;i&&In(t,i,n,!0),o&&o.forEach((e=>In(t,e,n,!0)));for(const s in e)if(r&&"expose"===s);else{const r=kn[s]||n&&n[s];t[s]=r?r(t[s],e[s]):e[s]}return t}const kn={data:Sn,props:Cn,emits:Cn,methods:Cn,computed:Cn,beforeCreate:Nn,created:Nn,beforeMount:Nn,mounted:Nn,beforeUpdate:Nn,updated:Nn,beforeDestroy:Nn,beforeUnmount:Nn,destroyed:Nn,unmounted:Nn,activated:Nn,deactivated:Nn,errorCaptured:Nn,serverPrefetch:Nn,components:Cn,directives:Cn,watch:function(t,e){if(!t)return e;if(!e)return t;const n=m(Object.create(null),t);for(const r in e)n[r]=Nn(t[r],e[r]);return n},provide:Sn,inject:function(t,e){return Cn(Dn(t),Dn(e))}};function Sn(t,e){return e?t?function(){return m(k(t)?t.call(this,this):t,k(e)?e.call(this,this):e)}:e:t}function Dn(t){if(x(t)){const e={};for(let n=0;n<t.length;n++)e[t[n]]=t[n];return e}return t}function Nn(t,e){return t?[...new Set([].concat(t,e))]:e}function Cn(t,e){return t?m(m(Object.create(null),t),e):e}function An(t,e,n,r=!1){const o={},i={};B(i,hr,1),t.propsDefaults=Object.create(null),En(t,e,o,i);for(const s in t.propsOptions[0])s in o||(o[s]=void 0);n?t.props=r?o:Qt(o,!1,kt,Wt,qt):t.type.props?t.props=o:t.props=i,t.attrs=i}function En(t,e,n,r){const[o,i]=t.propsOptions;let s,a=!1;if(e)for(let l in e){if($(l))continue;const c=e[l];let u;o&&_(o,u=M(l))?i&&i.includes(u)?(s||(s={}))[u]=c:n[u]=c:je(t.emitsOptions,l)||l in r&&c===r[l]||(r[l]=c,a=!0)}if(i){const e=oe(n),r=s||u;for(let s=0;s<i.length;s++){const a=i[s];n[a]=On(o,e,a,r[a],t,!_(r,a))}}return a}function On(t,e,n,r,o,i){const s=t[n];if(null!=s){const t=_(s,"default");if(t&&void 0===r){const t=s.default;if(s.type!==Function&&k(t)){const{propsDefaults:i}=o;n in i?r=i[n]:(Rr(o),r=i[n]=t.call(null,e),Mr())}else r=t}s[0]&&(i&&!t?r=!1:!s[1]||""!==r&&r!==j(n)||(r=!0))}return r}function Tn(t,e,n=!1){const r=e.propsCache,o=r.get(t);if(o)return o;const i=t.props,s={},a=[];let l=!1;if(!k(t)){const r=t=>{l=!0;const[n,r]=Tn(t,e,!0);m(s,n),r&&a.push(...r)};!n&&e.mixins.length&&e.mixins.forEach(r),t.extends&&r(t.extends),t.mixins&&t.mixins.forEach(r)}if(!i&&!l)return r.set(t,f),f;if(x(i))for(let f=0;f<i.length;f++){const t=M(i[f]);$n(t)&&(s[t]=u)}else if(i)for(const u in i){const t=M(u);if($n(t)){const e=i[u],n=s[t]=x(e)||k(e)?{type:e}:e;if(n){const e=Mn(Boolean,n.type),r=Mn(String,n.type);n[0]=e>-1,n[1]=r<0||e<r,(e>-1||_(n,"default"))&&a.push(t)}}}const c=[s,a];return r.set(t,c),c}function $n(t){return"$"!==t[0]}function Pn(t){const e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:null===t?"null":""}function Rn(t,e){return Pn(t)===Pn(e)}function Mn(t,e){return x(e)?e.findIndex((e=>Rn(e,t))):k(e)&&Rn(e,t)?0:-1}const Vn=t=>"_"===t[0]||"$stable"===t,jn=t=>x(t)?t.map(wr):[wr(t)],Ln=(t,e,n)=>{const r=function(t,e=Le,n){if(!e)return t;if(t._n)return t;const r=(...n)=>{r._d&&lr(-1);const o=Ue(e),i=t(...n);return Ue(o),r._d&&lr(1),i};return r._n=!0,r._c=!0,r._d=!0,r}(((...t)=>jn(e(...t))),n);return r._c=!1,r},Fn=(t,e,n)=>{const r=t._ctx;for(const o in t){if(Vn(o))continue;const n=t[o];if(k(n))e[o]=Ln(0,n,r);else if(null!=n){const t=jn(n);e[o]=()=>t}}},Un=(t,e)=>{const n=jn(e);t.slots.default=()=>n};function Kn(t,e,n,r){const o=t.dirs,i=e&&e.dirs;for(let s=0;s<o.length;s++){const a=o[s];i&&(a.oldValue=i[s].value);let l=a.dir[r];l&&(at(),pe(l,n,8,[t.el,a,t,e]),lt())}}function Bn(){return{app:null,config:{isNativeTag:p,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Wn=0;function Hn(t,e){return function(n,r=null){null==r||N(r)||(r=null);const o=Bn(),i=new Set;let s=!1;const a=o.app={_uid:Wn++,_component:n,_props:r,_container:null,_context:o,_instance:null,version:Br,get config(){return o.config},set config(t){},use:(t,...e)=>(i.has(t)||(t&&k(t.install)?(i.add(t),t.install(a,...e)):k(t)&&(i.add(t),t(a,...e))),a),mixin:t=>(o.mixins.includes(t)||o.mixins.push(t),a),component:(t,e)=>e?(o.components[t]=e,a):o.components[t],directive:(t,e)=>e?(o.directives[t]=e,a):o.directives[t],mount(i,l,c){if(!s){const u=yr(n,r);return u.appContext=o,l&&e?e(u,i):t(u,i,c),s=!0,a._container=i,i.__vue_app__=a,Ur(u.component)||u.component.proxy}},unmount(){s&&(t(null,a._container),delete a._container.__vue_app__)},provide:(t,e)=>(o.provides[t]=e,a)};return a}}function Xn(t,e,n,r,o=!1){if(x(t))return void t.forEach(((t,i)=>Xn(t,e&&(x(e)?e[i]:e),n,r,o)));if(Qe(r)&&!o)return;const i=4&r.shapeFlag?Ur(r.component)||r.component.proxy:r.el,s=o?null:i,{i:a,r:l}=t,c=e&&e.r,f=a.refs===u?a.refs={}:a.refs,d=a.setupState;if(null!=c&&c!==l&&(S(c)?(f[c]=null,_(d,c)&&(d[c]=null)):le(c)&&(c.value=null)),k(l))de(l,a,12,[s,f]);else{const e=S(l),r=le(l);if(e||r){const r=()=>{if(t.f){const n=e?f[l]:l.value;o?x(n)&&y(n,i):x(n)?n.includes(i)||n.push(i):e?f[l]=[i]:(l.value=[i],t.k&&(f[t.k]=l.value))}else e?(f[l]=s,_(d,l)&&(d[l]=s)):le(l)&&(l.value=s,t.k&&(f[t.k]=s))};s?(r.id=-1,qn(r,n)):r()}}}const qn=function(t,e){e&&e.pendingBranch?x(t)?e.effects.push(...t):e.effects.push(t):Oe(t,Ie,we,ke)};function zn(t){return function(t,e){(H||(H="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:n,remove:r,patchProp:o,createElement:i,createText:s,createComment:a,setText:l,setElementText:c,parentNode:p,nextSibling:h,setScopeId:g=d,cloneNode:v,insertStaticContent:y}=t,b=(t,e,n,r=null,o=null,i=null,s=!1,a=null,l=!!e.dynamicChildren)=>{if(t===e)return;t&&!pr(t,e)&&(r=nt(t),J(t,o,i,!0),t=null),-2===e.patchFlag&&(l=!1,e.dynamicChildren=null);const{type:c,ref:u,shapeFlag:f}=e;switch(c){case er:x(t,e,n,r);break;case nr:w(t,e,n,r);break;case rr:null==t&&I(e,n,r,s);break;case tr:R(t,e,n,r,o,i,s,a,l);break;default:1&f?D(t,e,n,r,o,i,s,a,l):6&f?V(t,e,n,r,o,i,s,a,l):(64&f||128&f)&&c.process(t,e,n,r,o,i,s,a,l,it)}null!=u&&o&&Xn(u,t&&t.ref,i,e||t,!e)},x=(t,e,r,o)=>{if(null==t)n(e.el=s(e.children),r,o);else{const n=e.el=t.el;e.children!==t.children&&l(n,e.children)}},w=(t,e,r,o)=>{null==t?n(e.el=a(e.children||""),r,o):e.el=t.el},I=(t,e,n,r)=>{[t.el,t.anchor]=y(t.children,e,n,r,t.el,t.anchor)},k=({el:t,anchor:e},r,o)=>{let i;for(;t&&t!==e;)i=h(t),n(t,r,o),t=i;n(e,r,o)},S=({el:t,anchor:e})=>{let n;for(;t&&t!==e;)n=h(t),r(t),t=n;r(e)},D=(t,e,n,r,o,i,s,a,l)=>{s=s||"svg"===e.type,null==t?N(e,n,r,o,i,s,a,l):O(t,e,o,i,s,a,l)},N=(t,e,r,s,a,l,u,f)=>{let d,p;const{type:h,props:g,shapeFlag:m,transition:y,patchFlag:b,dirs:_}=t;if(t.el&&void 0!==v&&-1===b)d=t.el=v(t.el);else{if(d=t.el=i(t.type,l,g&&g.is,g),8&m?c(d,t.children):16&m&&E(t.children,d,null,s,a,l&&"foreignObject"!==h,u,f),_&&Kn(t,null,s,"created"),g){for(const e in g)"value"===e||$(e)||o(d,e,null,g[e],l,t.children,s,a,et);"value"in g&&o(d,"value",null,g.value),(p=g.onVnodeBeforeMount)&&Sr(p,s,t)}A(d,t,t.scopeId,u,s)}_&&Kn(t,null,s,"beforeMount");const x=(!a||a&&!a.pendingBranch)&&y&&!y.persisted;x&&y.beforeEnter(d),n(d,e,r),((p=g&&g.onVnodeMounted)||x||_)&&qn((()=>{p&&Sr(p,s,t),x&&y.enter(d),_&&Kn(t,null,s,"mounted")}),a)},A=(t,e,n,r,o)=>{if(n&&g(t,n),r)for(let i=0;i<r.length;i++)g(t,r[i]);if(o){if(e===o.subTree){const e=o.vnode;A(t,e,e.scopeId,e.slotScopeIds,o.parent)}}},E=(t,e,n,r,o,i,s,a,l=0)=>{for(let c=l;c<t.length;c++){const l=t[c]=a?Ir(t[c]):wr(t[c]);b(null,l,e,n,r,o,i,s,a)}},O=(t,e,n,r,i,s,a)=>{const l=e.el=t.el;let{patchFlag:f,dynamicChildren:d,dirs:p}=e;f|=16&t.patchFlag;const h=t.props||u,g=e.props||u;let v;n&&Yn(n,!1),(v=g.onVnodeBeforeUpdate)&&Sr(v,n,e,t),p&&Kn(e,t,n,"beforeUpdate"),n&&Yn(n,!0);const m=i&&"foreignObject"!==e.type;if(d?T(t.dynamicChildren,d,l,n,r,m,s):a||X(t,e,l,null,n,r,m,s,!1),f>0){if(16&f)P(l,e,h,g,n,r,i);else if(2&f&&h.class!==g.class&&o(l,"class",null,g.class,i),4&f&&o(l,"style",h.style,g.style,i),8&f){const s=e.dynamicProps;for(let e=0;e<s.length;e++){const a=s[e],c=h[a],u=g[a];u===c&&"value"!==a||o(l,a,c,u,i,t.children,n,r,et)}}1&f&&t.children!==e.children&&c(l,e.children)}else a||null!=d||P(l,e,h,g,n,r,i);((v=g.onVnodeUpdated)||p)&&qn((()=>{v&&Sr(v,n,e,t),p&&Kn(e,t,n,"updated")}),r)},T=(t,e,n,r,o,i,s)=>{for(let a=0;a<e.length;a++){const l=t[a],c=e[a],u=l.el&&(l.type===tr||!pr(l,c)||70&l.shapeFlag)?p(l.el):n;b(l,c,u,null,r,o,i,s,!0)}},P=(t,e,n,r,i,s,a)=>{if(n!==r){for(const l in r){if($(l))continue;const c=r[l],u=n[l];c!==u&&"value"!==l&&o(t,l,u,c,a,e.children,i,s,et)}if(n!==u)for(const l in n)$(l)||l in r||o(t,l,n[l],null,a,e.children,i,s,et);"value"in r&&o(t,"value",n.value,r.value)}},R=(t,e,r,o,i,a,l,c,u)=>{const f=e.el=t?t.el:s(""),d=e.anchor=t?t.anchor:s("");let{patchFlag:p,dynamicChildren:h,slotScopeIds:g}=e;g&&(c=c?c.concat(g):g),null==t?(n(f,r,o),n(d,r,o),E(e.children,r,d,i,a,l,c,u)):p>0&&64&p&&h&&t.dynamicChildren?(T(t.dynamicChildren,h,r,i,a,l,c),(null!=e.key||i&&e===i.subTree)&&Gn(t,e,!0)):X(t,e,r,d,i,a,l,c,u)},V=(t,e,n,r,o,i,s,a,l)=>{e.slotScopeIds=a,null==t?512&e.shapeFlag?o.ctx.activate(e,n,r,s,l):L(e,n,r,o,i,s,l):F(t,e,l)},L=(t,e,n,r,o,i,s)=>{const a=t.component=function(t,e,n){const r=t.type,o=(e?e.appContext:t.appContext)||Tr,i={uid:$r++,vnode:t,type:r,parent:e,appContext:o,root:null,next:null,subTree:null,effect:null,update:null,scope:new q(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:e?e.provides:Object.create(o.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Tn(r,o),emitsOptions:Ve(r,o),emit:null,emitted:null,propsDefaults:u,inheritAttrs:r.inheritAttrs,ctx:u,data:u,props:u,attrs:u,slots:u,refs:u,setupState:u,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};i.ctx={_:i},i.root=e?e.root:i,i.emit=Me.bind(null,i),t.ce&&t.ce(i);return i}(t,r,o);if(tn(t)&&(a.ctx.renderer=it),function(t,e=!1){jr=e;const{props:n,children:r}=t.vnode,o=Vr(t);An(t,n,o,e),((t,e)=>{if(32&t.vnode.shapeFlag){const n=e._;n?(t.slots=oe(e),B(e,"_",n)):Fn(e,t.slots={})}else t.slots={},e&&Un(t,e);B(t.slots,hr,1)})(t,r);const i=o?function(t,e){const n=t.type;t.accessCache=Object.create(null),t.proxy=ie(new Proxy(t.ctx,Or));const{setup:r}=n;if(r){const n=t.setupContext=r.length>1?function(t){const e=e=>{t.exposed=e||{}};let n;return{get attrs(){return n||(n=function(t){return new Proxy(t.attrs,{get:(e,n)=>(ct(t,0,"$attrs"),e[n])})}(t))},slots:t.slots,emit:t.emit,expose:e}}(t):null;Rr(t),at();const o=de(r,t,0,[t.props,n]);if(lt(),Mr(),C(o)){if(o.then(Mr,Mr),e)return o.then((n=>{Lr(t,n,e)})).catch((e=>{he(e,t,0)}));t.asyncDep=o}else Lr(t,o,e)}else Fr(t,e)}(t,e):void 0;jr=!1}(a),a.asyncDep){if(o&&o.registerDep(a,U),!t.el){const t=a.subTree=yr(nr);w(null,t,e,n)}}else U(a,t,e,n,o,i,s)},F=(t,e,n)=>{const r=e.component=t.component;if(function(t,e,n){const{props:r,children:o,component:i}=t,{props:s,children:a,patchFlag:l}=e,c=i.emitsOptions;if(e.dirs||e.transition)return!0;if(!(n&&l>=0))return!(!o&&!a||a&&a.$stable)||r!==s&&(r?!s||He(r,s,c):!!s);if(1024&l)return!0;if(16&l)return r?He(r,s,c):!!s;if(8&l){const t=e.dynamicProps;for(let e=0;e<t.length;e++){const n=t[e];if(s[n]!==r[n]&&!je(c,n))return!0}}return!1}(t,e,n)){if(r.asyncDep&&!r.asyncResolved)return void W(r,e,n);r.next=e,function(t){const e=me.indexOf(t);e>ye&&me.splice(e,1)}(r.update),r.update()}else e.component=t.component,e.el=t.el,r.vnode=e},U=(t,e,n,r,o,i,s)=>{const a=()=>{if(t.isMounted){let e,{next:n,bu:r,u:a,parent:l,vnode:c}=t,u=n;Yn(t,!1),n?(n.el=c.el,W(t,n,s)):n=c,r&&K(r),(e=n.props&&n.props.onVnodeBeforeUpdate)&&Sr(e,l,n,c),Yn(t,!0);const f=Ke(t),d=t.subTree;t.subTree=f,b(d,f,p(d.el),nt(d),t,o,i),n.el=f.el,null===u&&function({vnode:t,parent:e},n){for(;e&&e.subTree===t;)(t=e.vnode).el=n,e=e.parent}(t,f.el),a&&qn(a,o),(e=n.props&&n.props.onVnodeUpdated)&&qn((()=>Sr(e,l,n,c)),o)}else{let s;const{el:a,props:l}=e,{bm:c,m:u,parent:f}=t,d=Qe(e);if(Yn(t,!1),c&&K(c),!d&&(s=l&&l.onVnodeBeforeMount)&&Sr(s,f,e),Yn(t,!0),a&&ut){const n=()=>{t.subTree=Ke(t),ut(a,t.subTree,t,o,null)};d?e.type.__asyncLoader().then((()=>!t.isUnmounted&&n())):n()}else{const s=t.subTree=Ke(t);b(null,s,n,r,t,o,i),e.el=s.el}if(u&&qn(u,o),!d&&(s=l&&l.onVnodeMounted)){const t=e;qn((()=>Sr(s,f,t)),o)}256&e.shapeFlag&&t.a&&qn(t.a,o),t.isMounted=!0,e=n=r=null}},l=t.effect=new rt(a,(()=>Ae(t.update)),t.scope),c=t.update=l.run.bind(l);c.id=t.uid,Yn(t,!0),c()},W=(t,e,n)=>{e.component=t;const r=t.vnode.props;t.vnode=e,t.next=null,function(t,e,n,r){const{props:o,attrs:i,vnode:{patchFlag:s}}=t,a=oe(o),[l]=t.propsOptions;let c=!1;if(!(r||s>0)||16&s){let r;En(t,e,o,i)&&(c=!0);for(const i in a)e&&(_(e,i)||(r=j(i))!==i&&_(e,r))||(l?!n||void 0===n[i]&&void 0===n[r]||(o[i]=On(l,a,i,void 0,t,!0)):delete o[i]);if(i!==a)for(const t in i)e&&_(e,t)||(delete i[t],c=!0)}else if(8&s){const n=t.vnode.dynamicProps;for(let r=0;r<n.length;r++){let s=n[r];const u=e[s];if(l)if(_(i,s))u!==i[s]&&(i[s]=u,c=!0);else{const e=M(s);o[e]=On(l,a,e,u,t,!1)}else u!==i[s]&&(i[s]=u,c=!0)}}c&&ft(t,"set","$attrs")}(t,e.props,r,n),((t,e,n)=>{const{vnode:r,slots:o}=t;let i=!0,s=u;if(32&r.shapeFlag){const t=e._;t?n&&1===t?i=!1:(m(o,e),n||1!==t||delete o._):(i=!e.$stable,Fn(e,o)),s=e}else e&&(Un(t,e),s={default:1});if(i)for(const a in o)Vn(a)||a in s||delete o[a]})(t,e.children,n),at(),Te(void 0,t.update),lt()},X=(t,e,n,r,o,i,s,a,l=!1)=>{const u=t&&t.children,f=t?t.shapeFlag:0,d=e.children,{patchFlag:p,shapeFlag:h}=e;if(p>0){if(128&p)return void Y(u,d,n,r,o,i,s,a,l);if(256&p)return void z(u,d,n,r,o,i,s,a,l)}8&h?(16&f&&et(u,o,i),d!==u&&c(n,d)):16&f?16&h?Y(u,d,n,r,o,i,s,a,l):et(u,o,i,!0):(8&f&&c(n,""),16&h&&E(d,n,r,o,i,s,a,l))},z=(t,e,n,r,o,i,s,a,l)=>{e=e||f;const c=(t=t||f).length,u=e.length,d=Math.min(c,u);let p;for(p=0;p<d;p++){const r=e[p]=l?Ir(e[p]):wr(e[p]);b(t[p],r,n,null,o,i,s,a,l)}c>u?et(t,o,i,!0,!1,d):E(e,n,r,o,i,s,a,l,d)},Y=(t,e,n,r,o,i,s,a,l)=>{let c=0;const u=e.length;let d=t.length-1,p=u-1;for(;c<=d&&c<=p;){const r=t[c],u=e[c]=l?Ir(e[c]):wr(e[c]);if(!pr(r,u))break;b(r,u,n,null,o,i,s,a,l),c++}for(;c<=d&&c<=p;){const r=t[d],c=e[p]=l?Ir(e[p]):wr(e[p]);if(!pr(r,c))break;b(r,c,n,null,o,i,s,a,l),d--,p--}if(c>d){if(c<=p){const t=p+1,f=t<u?e[t].el:r;for(;c<=p;)b(null,e[c]=l?Ir(e[c]):wr(e[c]),n,f,o,i,s,a,l),c++}}else if(c>p)for(;c<=d;)J(t[c],o,i,!0),c++;else{const h=c,g=c,v=new Map;for(c=g;c<=p;c++){const t=e[c]=l?Ir(e[c]):wr(e[c]);null!=t.key&&v.set(t.key,c)}let m,y=0;const _=p-g+1;let x=!1,w=0;const I=new Array(_);for(c=0;c<_;c++)I[c]=0;for(c=h;c<=d;c++){const r=t[c];if(y>=_){J(r,o,i,!0);continue}let u;if(null!=r.key)u=v.get(r.key);else for(m=g;m<=p;m++)if(0===I[m-g]&&pr(r,e[m])){u=m;break}void 0===u?J(r,o,i,!0):(I[u-g]=c+1,u>=w?w=u:x=!0,b(r,e[u],n,null,o,i,s,a,l),y++)}const k=x?function(t){const e=t.slice(),n=[0];let r,o,i,s,a;const l=t.length;for(r=0;r<l;r++){const l=t[r];if(0!==l){if(o=n[n.length-1],t[o]<l){e[r]=o,n.push(r);continue}for(i=0,s=n.length-1;i<s;)a=i+s>>1,t[n[a]]<l?i=a+1:s=a;l<t[n[i]]&&(i>0&&(e[r]=n[i-1]),n[i]=r)}}i=n.length,s=n[i-1];for(;i-- >0;)n[i]=s,s=e[s];return n}(I):f;for(m=k.length-1,c=_-1;c>=0;c--){const t=g+c,f=e[t],d=t+1<u?e[t+1].el:r;0===I[c]?b(null,f,n,d,o,i,s,a,l):x&&(m<0||c!==k[m]?G(f,n,d,2):m--)}}},G=(t,e,r,o,i=null)=>{const{el:s,type:a,transition:l,children:c,shapeFlag:u}=t;if(6&u)return void G(t.component.subTree,e,r,o);if(128&u)return void t.suspense.move(e,r,o);if(64&u)return void a.move(t,e,r,it);if(a===tr){n(s,e,r);for(let t=0;t<c.length;t++)G(c[t],e,r,o);return void n(t.anchor,e,r)}if(a===rr)return void k(t,e,r);if(2!==o&&1&u&&l)if(0===o)l.beforeEnter(s),n(s,e,r),qn((()=>l.enter(s)),i);else{const{leave:t,delayLeave:o,afterLeave:i}=l,a=()=>n(s,e,r),c=()=>{t(s,(()=>{a(),i&&i()}))};o?o(s,a,c):c()}else n(s,e,r)},J=(t,e,n,r=!1,o=!1)=>{const{type:i,props:s,ref:a,children:l,dynamicChildren:c,shapeFlag:u,patchFlag:f,dirs:d}=t;if(null!=a&&Xn(a,null,n,t,!0),256&u)return void e.ctx.deactivate(t);const p=1&u&&d,h=!Qe(t);let g;if(h&&(g=s&&s.onVnodeBeforeUnmount)&&Sr(g,e,t),6&u)tt(t.component,n,r);else{if(128&u)return void t.suspense.unmount(n,r);p&&Kn(t,null,e,"beforeUnmount"),64&u?t.type.remove(t,e,n,o,it,r):c&&(i!==tr||f>0&&64&f)?et(c,e,n,!1,!0):(i===tr&&384&f||!o&&16&u)&&et(l,e,n),r&&Z(t)}(h&&(g=s&&s.onVnodeUnmounted)||p)&&qn((()=>{g&&Sr(g,e,t),p&&Kn(t,null,e,"unmounted")}),n)},Z=t=>{const{type:e,el:n,anchor:o,transition:i}=t;if(e===tr)return void Q(n,o);if(e===rr)return void S(t);const s=()=>{r(n),i&&!i.persisted&&i.afterLeave&&i.afterLeave()};if(1&t.shapeFlag&&i&&!i.persisted){const{leave:e,delayLeave:r}=i,o=()=>e(n,s);r?r(t.el,s,o):o()}else s()},Q=(t,e)=>{let n;for(;t!==e;)n=h(t),r(t),t=n;r(e)},tt=(t,e,n)=>{const{bum:r,scope:o,update:i,subTree:s,um:a}=t;r&&K(r),o.stop(),i&&(i.active=!1,J(s,t,e,n)),a&&qn(a,e),qn((()=>{t.isUnmounted=!0}),e),e&&e.pendingBranch&&!e.isUnmounted&&t.asyncDep&&!t.asyncResolved&&t.suspenseId===e.pendingId&&(e.deps--,0===e.deps&&e.resolve())},et=(t,e,n,r=!1,o=!1,i=0)=>{for(let s=i;s<t.length;s++)J(t[s],e,n,r,o)},nt=t=>6&t.shapeFlag?nt(t.component.subTree):128&t.shapeFlag?t.suspense.next():h(t.anchor||t.el),ot=(t,e,n)=>{null==t?e._vnode&&J(e._vnode,null,null,!0):b(e._vnode||null,t,e,null,null,null,n),$e(),e._vnode=t},it={p:b,um:J,m:G,r:Z,mt:L,mc:E,pc:X,pbc:T,n:nt,o:t};let st,ut;e&&([st,ut]=e(it));return{render:ot,hydrate:st,createApp:Hn(ot,st)}}(t)}function Yn({effect:t,update:e},n){t.allowRecurse=e.allowRecurse=n}function Gn(t,e,n=!1){const r=t.children,o=e.children;if(x(r)&&x(o))for(let i=0;i<r.length;i++){const t=r[i];let e=o[i];1&e.shapeFlag&&!e.dynamicChildren&&((e.patchFlag<=0||32===e.patchFlag)&&(e=o[i]=Ir(o[i]),e.el=t.el),n||Gn(t,e))}}function Jn(t,e){return function(t,e,n=!0,r=!1){const o=Le||Pr;if(o){const n=o.type;if("components"===t){const t=function(t){return k(t)&&t.displayName||t.name}(n);if(t&&(t===e||t===M(e)||t===L(M(e))))return n}const i=Qn(o[t]||n[t],e)||Qn(o.appContext[t],e);return!i&&r?n:i}}("components",t,!0,e)||t}const Zn=Symbol();function Qn(t,e){return t&&(t[e]||t[M(e)]||t[L(M(e))])}const tr=Symbol(void 0),er=Symbol(void 0),nr=Symbol(void 0),rr=Symbol(void 0),or=[];let ir=null;function sr(t=!1){or.push(ir=t?null:[])}let ar=1;function lr(t){ar+=t}function cr(t){return t.dynamicChildren=ar>0?ir||f:null,or.pop(),ir=or[or.length-1]||null,ar>0&&ir&&ir.push(t),t}function ur(t,e,n,r,o,i){return cr(mr(t,e,n,r,o,i,!0))}function fr(t,e,n,r,o){return cr(yr(t,e,n,r,o,!0))}function dr(t){return!!t&&!0===t.__v_isVNode}function pr(t,e){return t.type===e.type&&t.key===e.key}const hr="__vInternal",gr=({key:t})=>null!=t?t:null,vr=({ref:t,ref_key:e,ref_for:n})=>null!=t?S(t)||le(t)||k(t)?{i:Le,r:t,k:e,f:!!n}:t:null;function mr(t,e=null,n=null,r=0,o=null,i=(t===tr?0:1),s=!1,a=!1){const l={__v_isVNode:!0,__v_skip:!0,type:t,props:e,key:e&&gr(e),ref:e&&vr(e),scopeId:Fe,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:i,patchFlag:r,dynamicProps:o,dynamicChildren:null,appContext:null};return a?(kr(l,n),128&i&&t.normalize(l)):n&&(l.shapeFlag|=S(n)?8:16),ar>0&&!s&&ir&&(l.patchFlag>0||6&i)&&32!==l.patchFlag&&ir.push(l),l}const yr=function(t,e=null,n=null,o=0,i=null,s=!1){t&&t!==Zn||(t=nr);if(dr(t)){const r=br(t,e,!0);return n&&kr(r,n),r}l=t,k(l)&&"__vccOpts"in l&&(t=t.__vccOpts);var l;if(e){e=function(t){return t?re(t)||hr in t?m({},t):t:null}(e);let{class:t,style:n}=e;t&&!S(t)&&(e.class=a(t)),N(n)&&(re(n)&&!x(n)&&(n=m({},n)),e.style=r(n))}const c=S(t)?1:(t=>t.__isSuspense)(t)?128:(t=>t.__isTeleport)(t)?64:N(t)?4:k(t)?2:0;return mr(t,e,n,o,i,c,s,!0)};function br(t,e,n=!1){const{props:o,ref:i,patchFlag:s,children:l}=t,c=e?function(...t){const e={};for(let n=0;n<t.length;n++){const o=t[n];for(const t in o)if("class"===t)e.class!==o.class&&(e.class=a([e.class,o.class]));else if("style"===t)e.style=r([e.style,o.style]);else if(g(t)){const n=e[t],r=o[t];!r||n===r||x(n)&&n.includes(r)||(e[t]=n?[].concat(n,r):r)}else""!==t&&(e[t]=o[t])}return e}(o||{},e):o;return{__v_isVNode:!0,__v_skip:!0,type:t.type,props:c,key:c&&gr(c),ref:e&&e.ref?n&&i?x(i)?i.concat(vr(e)):[i,vr(e)]:vr(e):i,scopeId:t.scopeId,slotScopeIds:t.slotScopeIds,children:l,target:t.target,targetAnchor:t.targetAnchor,staticCount:t.staticCount,shapeFlag:t.shapeFlag,patchFlag:e&&t.type!==tr?-1===s?16:16|s:s,dynamicProps:t.dynamicProps,dynamicChildren:t.dynamicChildren,appContext:t.appContext,dirs:t.dirs,transition:t.transition,component:t.component,suspense:t.suspense,ssContent:t.ssContent&&br(t.ssContent),ssFallback:t.ssFallback&&br(t.ssFallback),el:t.el,anchor:t.anchor}}function _r(t=" ",e=0){return yr(er,null,t,e)}function xr(t="",e=!1){return e?(sr(),fr(nr,null,t)):yr(nr,null,t)}function wr(t){return null==t||"boolean"==typeof t?yr(nr):x(t)?yr(tr,null,t.slice()):"object"==typeof t?Ir(t):yr(er,null,String(t))}function Ir(t){return null===t.el||t.memo?t:br(t)}function kr(t,e){let n=0;const{shapeFlag:r}=t;if(null==e)e=null;else if(x(e))n=16;else if("object"==typeof e){if(65&r){const n=e.default;return void(n&&(n._c&&(n._d=!1),kr(t,n()),n._c&&(n._d=!0)))}{n=32;const r=e._;r||hr in e?3===r&&Le&&(1===Le.slots._?e._=1:(e._=2,t.patchFlag|=1024)):e._ctx=Le}}else k(e)?(e={default:e,_ctx:Le},n=32):(e=String(e),64&r?(n=16,e=[_r(e)]):n=8);t.children=e,t.shapeFlag|=n}function Sr(t,e,n,r=null){pe(t,e,7,[n,r])}function Dr(t,e,n,r){let o;const i=n&&n[r];if(x(t)||S(t)){o=new Array(t.length);for(let n=0,r=t.length;n<r;n++)o[n]=e(t[n],n,void 0,i&&i[n])}else if("number"==typeof t){o=new Array(t);for(let n=0;n<t;n++)o[n]=e(n+1,n,void 0,i&&i[n])}else if(N(t))if(t[Symbol.iterator])o=Array.from(t,((t,n)=>e(t,n,void 0,i&&i[n])));else{const n=Object.keys(t);o=new Array(n.length);for(let r=0,s=n.length;r<s;r++){const s=n[r];o[r]=e(t[s],s,r,i&&i[r])}}else o=[];return n&&(n[r]=o),o}function Nr(t,e,n={},r,o){if(Le.isCE)return yr("slot","default"===e?null:{name:e},r&&r());let i=t[e];i&&i._c&&(i._d=!1),sr();const s=i&&Cr(i(n)),a=fr(tr,{key:n.key||`_${e}`},s||(r?r():[]),s&&1===t._?64:-2);return!o&&a.scopeId&&(a.slotScopeIds=[a.scopeId+"-s"]),i&&i._c&&(i._d=!0),a}function Cr(t){return t.some((t=>!dr(t)||t.type!==nr&&!(t.type===tr&&!Cr(t.children))))?t:null}const Ar=t=>t?Vr(t)?Ur(t)||t.proxy:Ar(t.parent):null,Er=m(Object.create(null),{$:t=>t,$el:t=>t.vnode.el,$data:t=>t.data,$props:t=>t.props,$attrs:t=>t.attrs,$slots:t=>t.slots,$refs:t=>t.refs,$parent:t=>Ar(t.parent),$root:t=>Ar(t.root),$emit:t=>t.emit,$options:t=>wn(t),$forceUpdate:t=>()=>Ae(t.update),$nextTick:t=>Ce.bind(t.proxy),$watch:t=>Ge.bind(t)}),Or={get({_:t},e){const{ctx:n,setupState:r,data:o,props:i,accessCache:s,type:a,appContext:l}=t;let c;if("$"!==e[0]){const a=s[e];if(void 0!==a)switch(a){case 1:return r[e];case 2:return o[e];case 4:return n[e];case 3:return i[e]}else{if(r!==u&&_(r,e))return s[e]=1,r[e];if(o!==u&&_(o,e))return s[e]=2,o[e];if((c=t.propsOptions[0])&&_(c,e))return s[e]=3,i[e];if(n!==u&&_(n,e))return s[e]=4,n[e];yn&&(s[e]=0)}}const f=Er[e];let d,p;return f?("$attrs"===e&&ct(t,0,e),f(t)):(d=a.__cssModules)&&(d=d[e])?d:n!==u&&_(n,e)?(s[e]=4,n[e]):(p=l.config.globalProperties,_(p,e)?p[e]:void 0)},set({_:t},e,n){const{data:r,setupState:o,ctx:i}=t;return o!==u&&_(o,e)?(o[e]=n,!0):r!==u&&_(r,e)?(r[e]=n,!0):!_(t.props,e)&&(("$"!==e[0]||!(e.slice(1)in t))&&(i[e]=n,!0))},has({_:{data:t,setupState:e,accessCache:n,ctx:r,appContext:o,propsOptions:i}},s){let a;return!!n[s]||t!==u&&_(t,s)||e!==u&&_(e,s)||(a=i[0])&&_(a,s)||_(r,s)||_(Er,s)||_(o.config.globalProperties,s)},defineProperty(t,e,n){return null!=n.get?this.set(t,e,n.get(),null):null!=n.value&&this.set(t,e,n.value,null),Reflect.defineProperty(t,e,n)}},Tr=Bn();let $r=0;let Pr=null;const Rr=t=>{Pr=t,t.scope.on()},Mr=()=>{Pr&&Pr.scope.off(),Pr=null};function Vr(t){return 4&t.vnode.shapeFlag}let jr=!1;function Lr(t,e,n){k(e)?t.type.__ssrInlineRender?t.ssrRender=e:t.render=e:N(e)&&(t.setupState=ue(e)),Fr(t,n)}function Fr(t,e,n){const r=t.type;t.render||(t.render=r.render||d),Rr(t),at(),bn(t),lt(),Mr()}function Ur(t){if(t.exposed)return t.exposeProxy||(t.exposeProxy=new Proxy(ue(ie(t.exposed)),{get:(e,n)=>n in e?e[n]:n in Er?Er[n](t):void 0}))}const Kr=(t,e)=>function(t,e,n=!1){let r,o;const i=k(t);return i?(r=t,o=d):(r=t.get,o=t.set),new fe(r,o,i||!o,n)}(t,0,jr),Br="3.2.31",Wr="undefined"!=typeof document?document:null,Hr=Wr&&Wr.createElement("template"),Xr={insert:(t,e,n)=>{e.insertBefore(t,n||null)},remove:t=>{const e=t.parentNode;e&&e.removeChild(t)},createElement:(t,e,n,r)=>{const o=e?Wr.createElementNS("http://www.w3.org/2000/svg",t):Wr.createElement(t,n?{is:n}:void 0);return"select"===t&&r&&null!=r.multiple&&o.setAttribute("multiple",r.multiple),o},createText:t=>Wr.createTextNode(t),createComment:t=>Wr.createComment(t),setText:(t,e)=>{t.nodeValue=e},setElementText:(t,e)=>{t.textContent=e},parentNode:t=>t.parentNode,nextSibling:t=>t.nextSibling,querySelector:t=>Wr.querySelector(t),setScopeId(t,e){t.setAttribute(e,"")},cloneNode(t){const e=t.cloneNode(!0);return"_value"in t&&(e._value=t._value),e},insertStaticContent(t,e,n,r,o,i){const s=n?n.previousSibling:e.lastChild;if(o&&(o===i||o.nextSibling))for(;e.insertBefore(o.cloneNode(!0),n),o!==i&&(o=o.nextSibling););else{Hr.innerHTML=r?`<svg>${t}</svg>`:t;const o=Hr.content;if(r){const t=o.firstChild;for(;t.firstChild;)o.appendChild(t.firstChild);o.removeChild(t)}e.insertBefore(o,n)}return[s?s.nextSibling:e.firstChild,n?n.previousSibling:e.lastChild]}};const qr=/\s*!important$/;function zr(t,e,n){if(x(n))n.forEach((n=>zr(t,e,n)));else if(e.startsWith("--"))t.setProperty(e,n);else{const r=function(t,e){const n=Gr[e];if(n)return n;let r=M(e);if("filter"!==r&&r in t)return Gr[e]=r;r=L(r);for(let o=0;o<Yr.length;o++){const n=Yr[o]+r;if(n in t)return Gr[e]=n}return e}(t,e);qr.test(n)?t.setProperty(j(r),n.replace(qr,""),"important"):t[r]=n}}const Yr=["Webkit","Moz","ms"],Gr={};const Jr="http://www.w3.org/1999/xlink";let Zr=Date.now,Qr=!1;if("undefined"!=typeof window){Zr()>document.createEvent("Event").timeStamp&&(Zr=()=>performance.now());const t=navigator.userAgent.match(/firefox\/(\d+)/i);Qr=!!(t&&Number(t[1])<=53)}let to=0;const eo=Promise.resolve(),no=()=>{to=0};function ro(t,e,n,r,o=null){const i=t._vei||(t._vei={}),s=i[e];if(r&&s)s.value=r;else{const[n,a]=function(t){let e;if(oo.test(t)){let n;for(e={};n=t.match(oo);)t=t.slice(0,t.length-n[0].length),e[n[0].toLowerCase()]=!0}return[j(t.slice(2)),e]}(e);if(r){!function(t,e,n,r){t.addEventListener(e,n,r)}(t,n,i[e]=function(t,e){const n=t=>{const r=t.timeStamp||Zr();(Qr||r>=n.attached-1)&&pe(function(t,e){if(x(e)){const n=t.stopImmediatePropagation;return t.stopImmediatePropagation=()=>{n.call(t),t._stopped=!0},e.map((t=>e=>!e._stopped&&t&&t(e)))}return e}(t,n.value),e,5,[t])};return n.value=t,n.attached=(()=>to||(eo.then(no),to=Zr()))(),n}(r,o),a)}else s&&(!function(t,e,n,r){t.removeEventListener(e,n,r)}(t,n,s,a),i[e]=void 0)}}const oo=/(?:Once|Passive|Capture)$/;const io=/^on[a-z]/;const so=m({patchProp:(t,r,o,i,s=!1,a,l,c,u)=>{"class"===r?function(t,e,n){const r=t._vtc;r&&(e=(e?[e,...r]:[...r]).join(" ")),null==e?t.removeAttribute("class"):n?t.setAttribute("class",e):t.className=e}(t,i,s):"style"===r?function(t,e,n){const r=t.style,o=S(n);if(n&&!o){for(const t in n)zr(r,t,n[t]);if(e&&!S(e))for(const t in e)null==n[t]&&zr(r,t,"")}else{const i=r.display;o?e!==n&&(r.cssText=n):e&&t.removeAttribute("style"),"_vod"in t&&(r.display=i)}}(t,o,i):g(r)?v(r)||ro(t,r,0,i,l):("."===r[0]?(r=r.slice(1),1):"^"===r[0]?(r=r.slice(1),0):function(t,e,n,r){if(r)return"innerHTML"===e||"textContent"===e||!!(e in t&&io.test(e)&&k(n));if("spellcheck"===e||"draggable"===e)return!1;if("form"===e)return!1;if("list"===e&&"INPUT"===t.tagName)return!1;if("type"===e&&"TEXTAREA"===t.tagName)return!1;if(io.test(e)&&S(n))return!1;return e in t}(t,r,i,s))?function(t,e,r,o,i,s,a){if("innerHTML"===e||"textContent"===e)return o&&a(o,i,s),void(t[e]=null==r?"":r);if("value"===e&&"PROGRESS"!==t.tagName&&!t.tagName.includes("-")){t._value=r;const n=null==r?"":r;return t.value===n&&"OPTION"!==t.tagName||(t.value=n),void(null==r&&t.removeAttribute(e))}if(""===r||null==r){const o=typeof t[e];if("boolean"===o)return void(t[e]=n(r));if(null==r&&"string"===o)return t[e]="",void t.removeAttribute(e);if("number"===o){try{t[e]=0}catch(l){}return void t.removeAttribute(e)}}try{t[e]=r}catch(c){}}(t,r,i,a,l,c,u):("true-value"===r?t._trueValue=i:"false-value"===r&&(t._falseValue=i),function(t,r,o,i,s){if(i&&r.startsWith("xlink:"))null==o?t.removeAttributeNS(Jr,r.slice(6,r.length)):t.setAttributeNS(Jr,r,o);else{const i=e(r);null==o||i&&!n(o)?t.removeAttribute(r):t.setAttribute(r,i?"":o)}}(t,r,i,s))}},Xr);let ao;const lo=(...t)=>{const e=(ao||(ao=zn(so))).createApp(...t),{mount:n}=e;return e.mount=t=>{const r=function(t){if(S(t)){return document.querySelector(t)}return t}(t);if(!r)return;const o=e._component;k(o)||o.render||o.template||(o.template=r.innerHTML),r.innerHTML="";const i=n(r,!1,r instanceof SVGElement);return r instanceof Element&&(r.removeAttribute("v-cloak"),r.setAttribute("data-v-app","")),i},e};function co(t){return t[t.length-1]}console.assert=(t,e)=>{t||console.log(new Error(e))};const uo="0987654321abcdefghijklmnoprstuvyz";function fo(t){return function(t=4){const e=uo.length,n=Math.pow(e,t);let r=Math.floor(Math.random()*n);const o=[];for(let i=0;i<t;i+=1)o.push(uo[r%e]),r=Math.floor(r/e);return o.join("")}()}function po(t){if(t||(t=document.getSelection()),!(t instanceof Selection))return t;if(t.isCollapsed){const e={node:t.anchorNode,offset:t.anchorOffset};return{start:e,end:e,backwards:!1,collapsed:!0,selection:t}}const e=function(t){if(t.isCollapsed)return!1;if(t.anchorNode===t.focusNode)return t.anchorOffset>t.focusOffset;const e=[t.anchorNode];let n=t.anchorNode;for(;n&&n!=document.body;)n=n.parentNode,e.push(n);for(n=t.focusNode;n&&n!=document.body;){const t=n;let r;n=n.parentNode;for(const o of e){if(n===o)for(const e of o.childNodes){if(e===r)return!1;if(e===t)return!0}r=o}}}(t);return{start:{node:e?t.focusNode:t.anchorNode,offset:e?t.focusOffset:t.anchorOffset},end:{node:e?t.anchorNode:t.focusNode,offset:e?t.anchorOffset:t.focusOffset},backwards:e,collapsed:!1,selection:t}}function ho(t,e,n=[]){if(t&&t.nodeType==Node.TEXT_NODE&&(t=t.parentNode),t&&t.nodeType==Node.ELEMENT_NODE&&(!e||t.nodeName===e)){const e={};for(const r of n){const n=t.attributes["data-"+r];n&&(e[r]=n.nodeValue)}return{node:t,attrs:e}}return{}}function go(t){return t.nodeType===Node.ELEMENT_NODE?t.childNodes.length>0?t.childNodes[0]:t:t.nodeType===Node.TEXT_NODE?t:void 0}function vo(t,e){const n=e.querySelector(`div[data-id="${t.paragraphID}"]`+(t.spanID?` > span[data-id="${t.spanID}"]`:""));return t.node=n,t}function mo(t,e,n){const r=go(e.node||vo(e,t).node),o=n&&go(n.node||vo(n,t).node),i=document.getSelection();i.empty();const s=new Range;s.setStart(r,e.offset),n?s.setEnd(o,n.offset):s.collapse(!0),i.addRange(s)}function yo(t){return t.spans}function bo(t,e){return t.spans=e}function _o(t=""){return{id:fo(),text:t,format:{}}}function xo(t){return{id:fo(),spans:"number"==typeof t?Array.from(Array(t),(()=>_o())):t||[]}}function wo(t,...e){return Object.assign({},t,{format:Object.assign({},t.format||{})},...e)}function Io(t,e,{newid:n,splitTime:r}={newid:fo,splitTime:!1}){const o={id:n(t.id),text:t.text.substr(0,e),format:Object.assign({},t.format)},i={id:n(t.id),text:t.text.substr(e),format:Object.assign({},t.format)};if(r){const e=t.text.replace(/\s*/g,"").length;t.duration>0&&(o.duration=o.text.replace(/\s*/g,"").length*t.duration/e,i.duration=i.text.replace(/\s*/g,"").length*t.duration/e,t.time>=0&&(o.time=t.time,i.time=t.time+o.duration))}else o.time=t.time,i.time=t.time,o.duration=t.duration,i.duration=t.duration,t.group&&t.group.length>0?(o.group=t.group,i.group=t.group):(o.group=t.id,i.group=t.id);return{left:o,right:i}}function ko(t,e,n){console.assert(void 0!==t,"data not specified"),console.assert(void 0!==e,"paragraphID not specified");const r=t=>-1===t?void 0:t,o=t;console.assert(void 0!==o,"no paragraphs");const i=r(o.findIndex((t=>t.id===e))),s=void 0!==i&&-1!==i&&o[i]||void 0,a=s&&r(yo(s).findIndex((t=>t.id===n)));return{paragraph:s,paragraphIndex:i,span:void 0!==a&&-1!==a&&yo(s)[a]||void 0,spanIndex:a}}function So(t,e,n){const r=e>=0&&t[e]||void 0,o=r&&yo(r);return{paragraph:r,span:o&&void 0!==n&&o[-1===n||n>=o.length?o.length-1:n]||void 0}}function Do(t,e){console.assert(void 0!==t,"data not specified"),console.assert(void 0!==e,"pointer not specified");const{spanAttrs:n,paragraphAttrs:r}=function(t){let e,n,r,o,i=t;for(;i&&!n;){const{node:t,attrs:s}=ho(i,void 0,["id","time","duration","confidence"]);if(!n&&!e&&t&&"SPAN"===t.nodeName&&s.id)e=s,r=t;else if(!n&&t&&"DIV"===t.nodeName&&s.id){n=s,o=t;break}t&&(i=t),i=i.parentNode}return{spanNode:r,spanAttrs:e,paragraphNode:o,paragraphAttrs:n}}(e.node),o=r&&r.id,i=n&&n.id,s=t,{paragraphIndex:a,paragraph:l,spanIndex:c,span:u}=s&&ko(t,o,i)||{};return{node:e.node,spanAttrs:n,paragraphAttrs:r,paragraphID:o,spanID:i,paragraphIndex:a,paragraph:l,spanIndex:c,span:u,offset:e.offset}}function No(t,e){!function(t,e){if(e.spanID&&e.paragraphID)return e.node;if(e.paragraphID){const{node:t}=ho(e.node,"DIV",["id"]);return t}}(t,e);let n,r,o,i,{node:s,offset:a}=e;if(s.nodeType===Node.ELEMENT_NODE){a=0;for(let t=e.offset-1;t>=0&&t<s.childNodes.length;t--)a+=s.childNodes.textContent&&s.childNodes[t].textConent.length||0}for(;s&&s!=t;){if(s.nodeType===Node.ELEMENT_NODE){if("SPAN"===s.nodeName){n=s.attributes["data-id"].nodeValue}if("DIV"===s.nodeName){r=s.attributes["data-id"].nodeValue}}let t=s;for(;t=t.previousSibling;){if(!o&&"SPAN"===t.nodeName){if(o=t.attributes["data-id"].nodeValue,!n&&!r)break}if(!i&&"DIV"===t.nodeName){if(i=t.attributes["data-id"].nodeValue,!n&&!r)break}n||r||t.textConent&&(a+=t.textConent.length)}s=s.parentNode}return e.spanID=n,e.paragraphID=r,e.offset=a,e.leftSpanID=o,e.leftParagraphID=i,e}function Co(t,e){if(console.assert(void 0!==t,"data not specified"),console.assert(void 0!==e,"pointer not specified"),void 0===e.paragraphID&&(void 0===e.paragraphIndex||-1===e.paragraphIndex))return console.assert(void 0!==e.node,"invalid pointer, no paragraph info and no node"),Object.assign(e,Do(t,e));if(void 0===e.paragraphID||void 0!==e.paragraphIndex&&-1!==e.paragraphIndex){if(void 0===e.paragraphID&&(void 0!==e.paragraphIndex||-1!==e.paragraphIndex)){const{paragraph:n,span:r}=So(t,e.paragraphIndex,e.spanIndex);console.assert(n,"paragraph not resolved"),console.assert(void 0!==e.spanIndex&&r||void 0===e.spanIndex||0===yo(t[e.paragraphIndex]).length,"span not resolved, but span index is setZ"),Object.assign(e,{paragraph:n,paragraphID:n.id}),!r||void 0!==e.span&&void 0!==e.spanID||Object.assign(e,{span:r,spanID:r.id})}}else{const{paragraphIndex:n,paragraph:r,spanIndex:o,span:i}=ko(t,e.paragraphID,e.spanID);console.assert(r,"paragraph not resolved"),console.assert(e.spanID&&i||void 0===e.spanID,"span not resolved, but span id is set"),Object.assign(e,{paragraphIndex:n,paragraph:r}),void 0!==e.span&&(e.span=i)}if(void 0===e.spanID&&void 0===e.spanIndex){if(e.node)return Object.assign(e,Do(t,e))}else if(void 0!==e.spanID&&void 0===e.spanIndex)Object.assign(e,ko(t,e.paragraphID,e.spanID)),console.assert(e.paragraph,"paragraph not resolved"),console.assert(void 0!==e.spanIndex&&e.span,"span not resolved, but span id is setY");else if(void 0===e.spanID&&void 0!==e.spanIndex){const{paragraph:n,span:r}=So(t,e.paragraphIndex,e.spanIndex),o=yo(n);e.spanIndex>=o.length&&o.length>0&&(e.spanIndex=o.length-1,e.offset=o[o.length-1].text.length),console.assert(e.paragraph,"paragraph not resolved"),console.assert(r||0===yo(t[e.paragraphIndex]).length,"span not resolved, but span index is set"),Object.assign(e,{paragraph:n,paragraphID:n.id,span:r,spanID:r&&r.id,spanIndex:r&&e.spanIndex})}if(null!=e.paragraphIndex&&-1!=e.paragraphIndex&&null!=e.spanIndex){const n=yo(t[e.paragraphIndex]);n.length>0&&(-1===e.spanIndex&&(e.spanIndex=n.length-1),e.offset<0&&(e.offset=n[e.spanIndex].text.length+1+e.offset))}return e}function Ao(t,e,n){console.assert(void 0!==t,"data not set"),console.assert(e.paragraphIndex>=0,"pointer paragraphIndex missing or invalid");const r=t;let o=e.paragraphIndex,i=e.spanIndex;if(void 0!==i&&-1!==i)if(i<yo(r[o]).length-1)i++;else{if(!(o<r.length-1))return;o++,i=yo(r[o]).length>0?0:void 0}else{if(!(o<r.length-1))return;o++,i=yo(r[o]).length>0?0:void 0}return void 0===n&&(n=0),Co(t,{paragraphIndex:o,spanIndex:i,offset:n})}const Eo=Object.freeze({Remove:1,InPlace:2,Copy:3});function Oo(t,e,n,r,o,i=Eo.Remove){null==e&&(e=0),(null==n||n<0)&&(n=0),(null==r||r>=t.length)&&(r=t.length-1);const s=t[r].text.length;if((void 0===o||o>s)&&(o=s),o<0&&(o=0),n>t[e].text.length&&(n=t[e].text.length),e===r){if(o<n&&(o=n),i===Eo.Remove){const r=t[e],i=r.text.substring(n,o);r.text=r.text.substring(0,n)+r.text.substring(o);const s=[];return i.length>0&&s.push(wo(r,{text:i})),{spans:s,splitIndex:e,splitOffset:n,removedSpanText:i}}if(i===Eo.InPlace){const r=t[e];if(0===n&&o>=r.text.length)return{spans:[r],splitIndex:e,splitOffset:n};if(n===o){if(0===n)return{right:r,spans:[],splitIndex:e,splitOffset:n};if(o>=r.text.length)return{left:r,spans:[],splitIndex:e+1,splitOffset:0};{let{left:o,right:i}=Io(r,n);return t.splice(e,1,...[o,i].filter((t=>t.text.length>0))),{left:o,right:i,spans:[],splitIndex:e+1,splitOffset:0}}}if(0===n){let{left:i,right:s}=Io(r,o);return t.splice(e,1,...[i,s].filter((t=>t.text.length>0))),{right:s,spans:[i],splitIndex:e,splitOffset:n}}if(o>=r.text.length){let{left:o,right:i}=Io(r,n);return t.splice(e,1,...[o,i].filter((t=>t.text.length>0))),{left:o,spans:[i],splitIndex:e+1,splitOffset:n}}let{left:i,right:s}=Io(r,n),{left:a,right:l}=Io(s,o-n);return t.splice(e,1,...[i,a,l].filter((t=>t.text.length>0))),{left:i,right:l,spans:[a],splitIndex:e+1,splitOffset:0}}if(i===Eo.Copy){const r=t[e],i=r.text.substring(n,o),s=[];return i.length>0&&s.push(wo(r,{text:i,group:r.id})),{spans:s,splitIndex:e,splitOffset:n}}}if(r===e+1&&0===o&&n>=t[e].text.length)return{spans:[],splitIndex:e,splitOffset:n};const a=0===n?e:e+1,l=o>=s?r:r-1;if(i===Eo.Remove){const i=t.splice(a,l+1-a);if(e<a){const r=t[e],{left:o,right:s}=Io(r,n);s.text.length>0&&i.unshift(wo(r,s)),Object.assign(r,o)}if(l<r){const e=t[a],{left:n,right:r}=Io(e,o);n.text.length>0&&i.push(wo(e,n)),Object.assign(e,r)}return{spans:i,splitIndex:e,splitOffset:n}}if(i===Eo.InPlace){const i=t.slice(a,l+1);if(l<r){const e=t[r];if(o>0&&o<e.text.length){console.log("end offset middle");const{left:n,right:s}=Io(e,o);t.splice(r,1,...[n,s].filter((t=>t.text.length>0))),i.push(n)}else o>0&&i.push(e)}if(e<a){const r=t[e];if(n>0&&n<r.text.length){console.log("start offset middle");const{left:o,right:s}=Io(r,n);i.unshift(s),t.splice(e,1,...[o,s].filter((t=>t.text.length>0))),e++}else 0===n?i.unshift(r):e++}return{spans:i,splitIndex:e,splitOffset:n}}if(i===Eo.Copy){const i=t.slice(a,l+1);if(e<a){const r=t[e],{left:o,right:s}=Io(r,n);s.text.length>0&&i.unshift(wo(r,s))}if(l<r){const e=t[r],{left:n,right:s}=Io(e,o);n.text.length>0&&i.push(wo(e,n))}return{spans:i,splitIndex:e,splitOffset:n}}}function To(t,e,n,r=Eo.Remove){const o=t,i=[];let s;for(let a=e.paragraphIndex;a<o.length&&a<=n.paragraphIndex;){const t=o[a];if(t.id===e.paragraphID&&(s=t),t.id===e.paragraphID&&t.id===n.paragraphID){if(yo(t).length>0){if(r===Eo.Remove){const o=Oo(yo(t),e.spanIndex,e.offset,n.spanIndex,n.offset,r);o.spans.length>0&&i.push({id:t.id,spans:o.spans,partial:e.spanIndex>0||e.offset>0||n.spanIndex<yo(t).length-1||yo(t).length>0&&n.offset<co(yo(t)).text.length})}else if(r===Eo.Copy){const o=Oo(yo(t),e.spanIndex,e.offset,n.spanIndex,n.offset,r);o.spans.length>0&&i.push({id:t.id,spans:o.spans,partial:e.spanIndex>0||e.offset>0||n.spanIndex<yo(t).length-1||n.offset<co(yo(t)).text.length})}else if(r===Eo.InPlace){const o=Oo(yo(t),e.spanIndex,e.offset,n.spanIndex,n.offset,r);o.spans.length>0&&i.push({id:t.id,spans:o.spans,partial:e.spanIndex>0||e.offset>0||n.spanIndex<yo(t).length-1||n.offset<co(yo(t)).text.length})}}else r===Eo.Remove?(o.splice(a,1),i.push(Object.assign({},t,{partial:!1}))):r===Eo.Copy?i.push(Object.assign({},t,{partial:!1})):r===Eo.InPlace&&(o.splice(a,1),i.push(t));break}if(t.id===e.paragraphID&&yo(t).length>0){const n=Oo(yo(t),e.spanIndex,e.offset,void 0,void 0,r);0===yo(t).length&&r===Eo.Remove?o.splice(a,1):a++,n.spans.length>0&&i.push({id:t.id,spans:n.spans,partial:yo(t).length>0})}else{if(t.id===n.paragraphID&&yo(t).length>0){const e=Oo(yo(t),0,0,n.spanIndex,n.offset,r);e.spans.length>0&&i.push({id:t.id,spans:e.spans,partial:yo(t).length>0}),yo(s).length>0&&r===Eo.Remove&&(yo(s).splice(yo(s).length,0,...yo(t)),o.splice(a,1));break}if(t.id===n.paragraphID){r===Eo.Remove&&o.splice(a,1),i.push(Object.assign({},t,{partial:!1}));break}r===Eo.Remove?o.splice(a,1):a++,i.push(Object.assign({},t,{partial:!1}))}}return i}function $o(t,e,n){const r=t,o=n;if(0===o.length)return;if(0===r.length){r.splice(0,0,...n);const e=co(n);return{start:Co(t,{paragraphIndex:0,spanIndex:0,offset:0}),end:Co(t,{paragraphIndex:n.length-1,spanIndex:e.spans.length-1,offset:co(e.spans).text.length})}}if(1===o.length){const n=yo(o[0]),i=r[e.paragraphIndex];let s,a;if(0===e.offset)yo(i).splice(e.spanIndex,0,...n),s=Co(t,{paragraphID:e.paragraphID,spanIndex:e.spanIndex,offset:0}),a=Co(t,{paragraphID:e.paragraphID,spanIndex:e.spanIndex+n.length-1,offset:-1});else if(e.offset===yo(i)[e.spanIndex].text.length)yo(i).splice(e.spanIndex+1,0,...n),s=Co(t,{paragraphID:e.paragraphID,spanIndex:e.spanIndex+1,offset:0}),a=Co(t,{paragraphID:e.paragraphID,spanIndex:e.spanIndex+1+n.length-1,offset:-1});else{const{left:r,right:o}=Io(yo(i)[e.spanIndex],e.offset);yo(i).splice(e.spanIndex+1,0,wo(yo(i)[e.spanIndex],o)),Object.assign(yo(i)[e.spanIndex],r),yo(i).splice(e.spanIndex+1,0,...n),s=Co(t,{paragraphID:e.paragraphID,spanIndex:e.spanIndex+1,offset:0}),a=Co(t,{paragraphID:e.paragraphID,spanIndex:e.spanIndex+1+n.length-1,offset:-1})}return{start:s,end:a,spans:n}}const i=r[e.paragraphIndex],s=xo();let a,l;if(null!=e.spanIndex&&-1!=e.spanIndex&&yo(i).length>0)if(0===e.offset){bo(s,yo(i).splice(e.spanIndex))}else if(e.offset===yo(i)[e.spanIndex].text.length){bo(s,yo(i).splice(e.spanIndex+1))}else{const t=yo(i).splice(e.spanIndex+1),{left:n,right:r}=Io(yo(i)[e.spanIndex],e.offset);bo(s,t),yo(s).unshift(wo(yo(i)[e.spanIndex],r)),Object.assign(yo(i)[e.spanIndex],n)}yo(o[0]).length>0&&(a={paragraphID:i.id,spanIndex:yo(r[e.paragraphIndex]).length,offset:0}),yo(r[e.paragraphIndex]).splice(yo(r[e.paragraphIndex]).length,0,...yo(o[0]));let c=e.paragraphIndex+1;o.length>2&&(r.splice(c,0,...o.slice(1,o.length-1)),c+=o.length-2),yo(s).splice(0,0,...yo(o[o.length-1])),r.splice(c,0,s),a||(a={paragraphIndex:e.paragraphIndex+1,spanIndex:0,offset:0}),l=Co(t,{paragraphID:s.id,spanIndex:yo(o[o.length-1]).length-1,offset:-1}),a=Co(t,a);return{start:a,end:l,spans:n.reduce(((t,e)=>t.concat(yo(e))),[])}}function Po(t,e){let n=0;for(const r of e)if(n<t.length&&t[n].id===r.id)t[n].text=r.text,n++;else{let e=!1;for(let o=n;o<t.length;o++)if(t[o].id===r.id){t.splice(n,o-n),t[n].text=r.text,n++,e=!0;break}e||(t.splice(n,0,r),n++)}return t.length>n&&t.splice(n),t}function*Ro(t,e,n){let r=void 0===e;for(const o of t)if(r||o.id!==e||(r=!0),r&&(yield o,void 0!==n&&o.id===n))return}const Mo={props:{modelValue:Object,time:Number,editable:{type:Boolean,default:!0},showConfidence:{type:Boolean,default:!1}},data:()=>({paragraphs:[],key:1}),mounted(){const t=function(t,e,n){let r;return{now(e,...o){if(r=null,!n)return t.apply(e,o)},debounced(o,...i){const s=n&&!r;clearTimeout(r),r=setTimeout((()=>{this.now(o,...i)}),e),s&&t.apply(o,i)}}}(this.applyViewChangesNow,200);this.applyViewChangesNow=(...e)=>t.now(this,...e),this.applyViewChanges=(...e)=>t.debounced(this,...e),this.$options.watch.modelValue.call(this,this.modelValue)},watch:{modelValue(t){this.paragraphs=t.paragraphs||[]}},methods:{reset(){console.debug("resetting"),this.key+=1},save(){this.$emit("update:modelValue",Object.assign({},this.modelValue,{paragraphs:this.paragraphs}))},download(t,e,n="text/plain"){let r=document.createElement("a");r.setAttribute("href",`data:${n};charset=utf-8,`+encodeURIComponent(e)),r.setAttribute("download",t),r.style.display="none",document.body.appendChild(r),r.click(),document.body.removeChild(r)},asHTML(t){t||(t=this.paragraphs);const e=[];for(const n of t){let t=[];for(const e of n.spans){let n="span";e.format&&(e.format.bold?n="strong":e.format.italic?n="em":e.format.underline?n="u":e.format.subscript?n="sub":e.format.superscript&&(n="sup")),t.push(`<${n}>${e.text}</${n}>`)}t=t.join(""),n.bullet?e.push(`<li>${t}</li>`):e.push(`<p>${t}</p>`)}return e.join("\n")},exportWord(t="document.doc"){const e=`<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40">\n      <head><meta charset='utf-8'><title>RUTA exported document</title></head>\n      <body>${this.asHTML()}</body>\n      </html>`;this.download(t,e,"application/vnd.ms-word")},spanSelected(t,e){document.getSelection().isCollapsed&&this.$emit("update:time",t.time)},selectStart(t){},selectEnd(t){const e=this.paragraphs,n=po();Co(e,n.start);if(Co(e,n.end),n.collapsed)this.$emit("selected");else{const t=n.start.span.time,e=void 0!==n.end.span.time?n.end.span.time+n.end.span.duration||0:void 0;this.$emit("selected",{start:t,end:e})}},getSpanSelection(t){const e=this.paragraphs;return Co(e,(t=po(t)).start),Co(e,t.end),Array.from(function*(t,e,n){const r=t;let o=!1;for(const i of r){if(e||(o=!0),e&&i.id===e.paragraphID&&n&&i.id===n.paragraphID)return void(yield{paragraph:i,spans:Array.from(Ro(i.spans,e.spanID,n.spanID))});if(e&&i.id===e.paragraphID)o=!0,yield{paragraph:i,spans:Array.from(Ro(i.spans,e.spanID))};else{if(n&&i.id===n.paragraphID)return void(o&&(yield{paragraph:i,spans:Array.from(Ro(i.spans,void 0,n.spanID))}));o&&(yield{paragraph:i,spans:Array.from(i.spans)})}}}(this.paragraphs,t.start,t.end))},toggleStyleX(t,e){const n=po();if(!n.collapsed){const r=this.paragraphs;!function(t,e){Co(t,e.start),Co(t,e.end),e.start.offsetLeft=e.start.offset,0===e.start.spanIndex||e.start.spanIndex>0&&(e.start.leftSpanIndex=e.start.spanIndex-1,e.start.leftSpanID=yo(e.start.paragraph)[e.start.spanIndex-1].id),e.end.offsetRight=e.end.span.text.length-e.end.offset,e.end.spanIndex>=yo(e.end.paragraph).length||e.end.spanIndex<yo(e.end.paragraph).length-1&&(e.end.rightSpanIndex=e.end.spanIndex+1,e.end.rightSpanID=yo(e.end.paragraph)[e.end.spanIndex+1].id)}(r,n),this.toggleStyle(t,n),n.start.node=void 0,n.end.node=void 0,function(t,e){if(void 0!==e.start.offsetLeft){let t=0;const n=yo(e.start.paragraph);for(let r=void 0===e.start.leftSpanIndex?0:e.start.leftSpanIndex+1;r<n.length;r++){const o=n[r];if(e.start.offsetLeft>=t&&e.start.offsetLeft<=t+o.text.length){e.start.spanIndex=r,e.start.span=o,e.start.spanID=o.id,e.start.offset=e.start.offsetLeft-t;break}t+=o.text.length}}if(void 0!==e.end.offsetRight){let t=0;const n=yo(e.end.paragraph);if(void 0!==e.end.rightSpanID)for(let r=e.start.leftSpanIndex;r<n.length;r++)if(n[r].id===e.end.rightSpanID){e.end.rightSpanIndex=r;break}for(let r=void 0===e.end.rightSpanIndex?n.length-1:e.end.rightSpanIndex-1;r>=0;r--){const o=n[r];if(e.end.offsetRight>=t&&e.end.offsetRight<=t+o.text.length){e.end.spanIndex=r,e.end.span=o,e.end.spanID=o.id,e.end.offset=o.text.length-(e.end.offsetRight-t);break}t+=o.text.length}}delete e.start.offsetLeft,delete e.start.leftSpanIndex,delete e.start.leftSpanID,delete e.end.offsetRight,delete e.end.rightSpanIndex,delete e.end.rightSpanID}(0,n),this.$nextTick((()=>{e||this.$refs.container.focus(),mo(this.$refs.container,n.start,n.end)}))}},toggleStyle(t,e){const n=this.paragraphs;if(e||(e=po()),e.isCollapsed)return;const r=e.start;Co(n,r);const o=e.end;Co(n,o);const i=To(n,r,o,Eo.InPlace);let s,a,l=!0;for(const c of i)for(const e of c.spans)if(e.format&&e.format[t]){l=!1;break}"subscript"===t?(s="superscript",a=!1):"superscript"===t&&(s="subscript",a=!1);for(const c of i)for(const e of c.spans)Object.assign(e,{format:Object.assign(e.format||{},{[t]:l},s&&{[s]:a}||{}),id:fo()})},toggleBullet(){const t=document.getSelection(),e=this.getSpanSelection(t);let n=!0;for(const r of e)if(r.paragraph.bullet){n=!1;break}for(const r of e)r.paragraph.bullet=n},mapContainerOffsetPointerToData(t,e){if(!e.paragraphID){let n=0;for(const r of t)if(e.leftParagraphID&&r.id===e.leftParagraphID)n=0;else{for(const t of r.spans){if(n<=e.offset&&e.offset<n+t.text.length){e.paragraphID=r.id,e.paragraph=r,e.spanID=t.id,e.span=t,e.offset-=n;break}n+=t.text.length}if(e.offset===n&&r.spans.length>0){e.paragraphID=r.id;const t=r.spans[r.spans.length-1];e.spanID=t.id,e.span=t,e.offset=t.text.length}if(e.paragraphID)break}}if(e.paragraphID&&!e.spanID)for(const n of t){if(n.id!==e.paragraphID)continue;let t=0;for(const r of n.spans)if(e.leftSpanID&&r.id===e.leftSpanID)t=0;else{if(t<=e.offset&&e.offset<t+r.text.length){e.spanID=r.id,e.span=r,e.offset-=t;break}t+=r.text.length}if(e.offset===t&&n.spans.length>0){const t=n.spans[n.spans.length-1];e.spanID=t.id,e.span=t,e.offset=t.text.length}break}return e.node=void 0,Co(t,e),e},parseDOM(t){let e=this.paragraphs;const n=po(),r=Do(e,n.start),o=Do(e,n.end);r.spanID&&r.paragraphID||No(this.$refs.container,r),o.spanID&&o.paragraphID||No(this.$refs.container,o);const i=function(t){const e=(t,e)=>{let n=t;return void 0!==n&&(n=n.nodeValue),void 0!==n&&void 0!==e&&(n=e(n)),n},n=[];let r=!1;for(const o of t.childNodes)if(o.nodeType===Node.ELEMENT_NODE)if("DIV"===o.nodeName&&o.attributes["data-id"]){r=!0;const t=[],i={id:o.attributes["data-id"].nodeValue,spans:t};let s;n.push(i);const a=o;for(const n of a.childNodes)if(n.nodeType===Node.ELEMENT_NODE)if("SPAN"===n.nodeName&&n.attributes["data-id"]){const r=n.attributes["data-id"].nodeValue;let o=n.innerText;s&&s.length>0&&(o=s+o,s=void 0);const i=e(n.attributes["data-time"],parseInt),a=e(n.attributes["data-duration"],parseInt),l=e(n.attributes["data-confidence"],parseFloat);t.push({id:r,text:o,time:i,duration:a,confidence:l})}else n.nodeName;else n.nodeType===Node.TEXT_NODE&&(n.nodeValue.length>0&&(t.length>0?t[t.length-1].text+=n.nodeValue.length:s=n.nodeValue),n.nodeValue="");0===t.length&&s&&s.length>0&&t.push(_o(s))}else"BR"===o.nodeName?(console.log("br",o),r=!1,o.remove()):o.remove();else if(o.nodeType===Node.TEXT_NODE&&o.nodeValue.length>0){let t=n.length>0&&r&&n[n.length-1];t||(t={id:fo(),spans:[]},n.push(t)),t.spans.push({id:fo(),text:o.nodeValue}),o.remove()}return n}(this.$refs.container),s=function(t,e){let n=0;for(const r of e)if(n<t.length&&t[n].id===r.id)Po(yo(t[n]),yo(r)),n++;else{let e=!1;for(let o=n;o<t.length;o++)if(t[o].id===r.id){t.splice(n,o-n),t[n].text=r.text,n++,e=!0;break}e||(t.splice(n,0,r),n++)}return t.length>n&&t.splice(n),t}(this.paragraphs||[],i);return this.paragraphs=s,e=s,this.mapContainerOffsetPointerToData(e,r),this.mapContainerOffsetPointerToData(e,o),t&&this.$nextTick((()=>{mo(this.$refs.container,Co(e,r),n.collapsed?null:Co(e,o))})),{paragraphs:s,start:r,end:o,collapsed:n.collapsed}},applyViewChangesNow(t=!0){const{paragraphs:e,start:n,end:r,collapsed:o}=this.parseDOM(t);return this.save(),{start:n,end:r,collapsed:o}},onInput(t){this.applyViewChanges()},errorCaptured(t,e,n){console.debug("ERROR captured:",t,e,n)},async onKeydown(t){if((t.metaKey||t.ctrlKey)&&t.shiftKey&&t.altKey&&"KeyR"===t.code)return this.reset(),t.stopPropagation(),void t.preventDefault();if((t.metaKey||t.ctrlKey)&&"KeyZ"===t.code)return t.stopPropagation(),void t.preventDefault();if((t.metaKey||t.ctrlKey)&&("KeyC"===t.code||"KeyV"===t.code||"KeyX"===t.code||"KeyR"===t.code||"Meta"===t.key||"Control"===t.key))return;if("Escape"===t.code||"Tab"===t.code)return;if("ArrowLeft"===t.key||"ArrowRight"===t.key||"ArrowUp"===t.key||"ArrowDown"===t.key)return void t.shiftKey;if("Dead"===t.key)return;let e=document.getSelection();if(!e.isCollapsed&&!t.ctrlKey&&!t.metaKey&&"Alt"!=t.key&&"Shift"!=t.key){"Delete"!==t.key&&"Backspace"!==t.key&&"Enter"!==t.key||(t.stopPropagation(),t.preventDefault());const n=this.paragraphs;e=po(e);const r=e.start;Co(n,r);const o=e.end;return Co(n,o),To(n,r,o),"Enter"===t.key?($o(n,r,[xo(),xo()]),void this.$nextTick((()=>{mo(this.$refs.container,vo(Ao(n,r),this.$refs.container))}))):void this.$nextTick((()=>{r.spanID=void 0,r.node=void 0,mo(this.$refs.container,Co(n,r))}))}if("KeyL"===t.code&&(!0===t.metaKey||!0===t.ctrlKey))return this.toggleBullet(),t.stopPropagation(),t.preventDefault(),!1;if(("KeyL"===t.code||"KeyB"===t.code||"KeyI"===t.code||"KeyU"===t.code||"Digit6"===t.code&&!0===t.shiftKey||"Minus"===t.code&&!0===t.shiftKey)&&(!0===t.ctrlKey||!0===t.metaKey)){let e;return"KeyB"===t.code?e="bold":"KeyI"===t.code?e="italic":"KeyU"===t.code?e="underline":"Digit6"===t.code?e="superscript":"Minus"===t.code&&(e="subscript"),this.toggleStyleX(e,!0),t.stopPropagation(),t.preventDefault(),!1}if("Enter"===t.key){if(t.stopPropagation(),t.preventDefault(),this.applyViewChangesNow(),!this.paragraphs)return this.paragraphs=[xo(),xo()],this.applyViewChangesNow(!1),void this.$nextTick((()=>{mo(this.$refs.container,vo(Co(this.paragraphs,{paragraphIndex:1,offset:0}),this.$refs.container))}));this.$nextTick((()=>{const t=this.paragraphs,e=po();e.collapsed&&(Co(t,e.start),$o(t,e.start,[xo(),xo()]),this.$nextTick((()=>{mo(this.$refs.container,vo(Ao(t,e.start),this.$refs.container))})))}))}else if("Backspace"===t.key){const{start:e,end:n,collapsed:r}=this.applyViewChangesNow();if(!r)return void console.debug("warning: range backspace had to be handler elsewhere");if(e.offset>0||e.spanIndex>0)return;t.stopPropagation(),t.preventDefault(),this.$nextTick((()=>{const t=this.paragraphs;this.paragraphs;const e=po().start;Co(t,e);const n=Co(t,{paragraphIndex:e.paragraphIndex,spanIndex:0,offset:0});if(e.paragraphIndex>0){const t=this.paragraphs,r=function(t,e,n){console.assert(void 0!==t,"data not set"),console.assert(e.paragraphIndex>=0,"pointer paragraphIndex missing or invalid");const r=t;let o=e.paragraphIndex,i=e.spanIndex;if(void 0!==i&&-1!==i)if(i>0)i--;else{if(!(o>0))return;o--,i=yo(r[o]).length>0?yo(r[o]).length-1:void 0}else{if(!(o>0))return;o--,i=yo(r[o]).length>0?yo(r[o]).length-1:void 0}return void 0===n&&(n=-1),Co(t,{paragraphIndex:o,spanIndex:i,offset:n})}(t,n),o=To(t,r,e),i=o.length>0&&o[0].id===r.paragraphID?e:r;this.$nextTick((()=>{i.node=void 0,mo(this.$refs.container,i)}))}}))}else if("Delete"===t.key){const{start:e,end:n,collapsed:r}=this.applyViewChangesNow();if(!r)return console.debug("warning: range deletes must be handled elsewhere"),t.stopPropagation(),void t.preventDefault();if(!e||e.spanIndex<e.paragraph.spans.length-1||e.span&&e.offset<e.span.text.length)return;t.stopPropagation(),t.preventDefault(),this.$nextTick((()=>{const t=this.paragraphs,n=this.paragraphs;if(r){const r=n[e.paragraphIndex].spans,o=Co(t,{paragraphIndex:e.paragraphIndex,spanIndex:r.length-1,offset:-1});if(e.paragraphIndex<n.length-1){const t=this.paragraphs;0===e.paragraph.spans.length?(t.splice(e.paragraphIndex,1),e.spanIndex=0,e.paragraphID=0):(To(t,e,Ao(t,o)),void 0===e.spanIndex&&void 0===e.spanID&&(e.spanIndex=0)),this.$nextTick((()=>{e.node=void 0,Co(t,e),mo(this.$refs.container,e)}))}}}))}else if((t.ctrlKey||t.metaKey)&&t.shiftKey&&"KeyH"===t.code){const e=this.getSpanSelection();for(const t of e)for(const e of t.spans)e.highlighted=!1;t.preventDefault(),t.stopPropagation()}else if((t.ctrlKey||t.metaKey)&&"KeyH"===t.code){const e=this.getSpanSelection();for(const t of e)for(const e of t.spans)e.highlighted=!0;t.preventDefault(),t.stopPropagation()}else e.isCollapsed||(console.debug("PREVENT RANGE REPLACE"),t.preventDefault(),t.stopPropagation());return!0},onDragStart(t){t.stopPropagation(),t.preventDefault()},onPaste(t){t.stopPropagation(),t.preventDefault();const{start:e,end:n,collapsed:r}=this.applyViewChangesNow(!1),o=t.clipboardData.getData("application/ruta"),i=t.clipboardData.getData("text/html"),s=t.clipboardData.getData("text/plain");if(0===o.length&&0===i.length&&0===s.length)return;const a=this.paragraphs;if(Co(a,e),r||(Co(a,n),To(a,e,n),e.spanID=void 0,e.node=void 0,Co(a,e),e.node=void 0),o.length>0){console.debug("pasting from RUTA");const t=JSON.parse(o);for(const e of t){e.id=fo();for(const t of e.spans)t.id=fo()}const n=$o(a,e,t);this.$nextTick((()=>{n.end.node=null,mo(this.$refs.container,Co(a,n.end))}))}else if(i.length>0){const t=document.createElement("html");t.innerHTML=i;const n=t.querySelector("head > style");if(n){document.implementation.createHTMLDocument("").body.appendChild(n)}const r=function(t,e){let n=[];if(e)for(const u of e)if(-1===u.selectorText.search(/[#:\[\]>]/g)&&"underline"===u.style.textDecorationLine){const t=u.selectorText.split(",");for(const e of t){const t=e.split(":")[0].split(".");t.shift(),n=t}}const r=[],o=[];let i,s,a={},l=t,c=0;for(;l;){const t=l.childNodes;for(s=t.length;c<s;c++){const e=t[c];if(e.nodeType===Node.TEXT_NODE&&e.nodeValue.length>0){if(0===e.nodeValue.trim().length)continue;i||(i={spans:[],id:fo()},o.push(i)),i.spans.push({text:e.nodeValue,format:Object.assign({},a),id:fo()})}else if(e.nodeType===Node.ELEMENT_NODE){Object.assign({},a);const t=Object.assign({},a);if("B"===e.nodeName||"STRONG"===e.nodeName)a.bold=!0;else if("I"===e.nodeName||"EM"===e.nodeName)a.italic=!0;else if("U"===e.nodeName)a.underline=!0;else if("SUP"===e.nodeName)a.superscript=!0;else if("SUB"===e.nodeName)a.subscript=!0;else if("SPAN"===e.nodeName){for(const r of e.classList)if(-1!==n.indexOf(r)){a.underline=!0;break}}else"P"===e.nodeName?(i={spans:[],id:fo()},o.push(i)):"LI"===e.nodeName&&(i={spans:[],id:fo(),bullet:!0},o.push(i));if(l.childNodes&&l.childNodes.length>0){r.push({node:l,i:c+1,fmt:Object.assign({},t)}),c=0,l=e,s=l.childNodes.length;break}}}if(c>=s){if(!(r.length>0)){l=null;break}{"P"!==l.nodeName&&"LI"!==l.nodeName||(i=void 0);const t=r.pop();c=t.i,l=t.node,a=t.fmt}}}return o}(t.querySelector("body"),n&&n.sheet.cssRules);for(const e of r){e.id=fo();for(const t of e.spans)t.id=fo()}console.debug("pasting formatted text from html source");const o=$o(a,e,r);this.$nextTick((()=>{o.end.node=null,mo(this.$refs.container,Co(a,o.end))}))}else s.length>0&&(console.debug("pasting plaintext"),this.$nextTick((()=>{void 0===e.paragraphIndex&&void 0===e.paragraphID||mo(this.$refs.container,Co(a,e));const t=[],n=s.split("\n");for(const e of n)t.push({id:fo(),spans:[{id:fo(),text:e,format:{}}]});let r;if(0===t.length)a.splice.apply(a,[0,0].concat(t)),r={paragraphID:t[t.length-1].id,spanID:t[t.length-1].spans[0].id,offset:t[t.length-1].spans[0].text.length};else{const n=$o(a,e,t);r=n.end}this.$nextTick((()=>{r.node=null,mo(this.$refs.container,Co(a,r))}))})))},onCut(t){this.onCopy(t);const e=po();if(!e.collapsed){const t=this.paragraphs,n=e.start;Co(t,n);const r=e.end;Co(t,r),To(t,n,r)}},onCopy(t){const e=this.paragraphs,n=po();if(!n.isCollapsed){const r=n.start;Co(e,r);const o=n.end;Co(e,o);const i=To(e,r,o,Eo.Copy);t.clipboardData.setData("application/ruta",JSON.stringify(i));const s=[];for(const t of i){const e=[];for(const n of t.spans)e.push(n.text);s.push(e.join(""))}t.clipboardData.setData("text/plain",s.join("\n")),t.clipboardData.setData("text/html",this.asHTML(i))}t.stopPropagation(),t.preventDefault()}},errorCaptured:(t,e,n)=>(console.debug("EDITOR ERROR CAPTURED",t,e,n),!0)},Vo=["contenteditable"],jo=["data-id","contenteditable"],Lo=["data-first","data-last","contenteditable","data-id","data-time","data-duration","data-confidence","onClick","title"];Mo.render=function(t,e,n,o,i,s){return sr(),ur("div",{style:{border:"1px solid #ccc"},contenteditable:n.editable,spellcheck:"false",key:i.key,onInput:e[0]||(e[0]=(...t)=>s.onInput&&s.onInput(...t)),onKeydown:e[1]||(e[1]=(...t)=>s.onKeydown&&s.onKeydown(...t)),onPaste:e[2]||(e[2]=(...t)=>s.onPaste&&s.onPaste(...t)),onCut:e[3]||(e[3]=(...t)=>s.onCut&&s.onCut(...t)),onCopy:e[4]||(e[4]=(...t)=>s.onCopy&&s.onCopy(...t)),onSelectstart:e[5]||(e[5]=(...t)=>s.selectStart&&s.selectStart(...t)),onMouseup:e[6]||(e[6]=(...t)=>s.selectEnd&&s.selectEnd(...t)),onDragstart:e[7]||(e[7]=(...t)=>s.onDragStart&&s.onDragStart(...t)),ref:"container",class:"transcript"},[(sr(!0),ur(tr,null,Dr(i.paragraphs,((t,e)=>(sr(),ur("div",{"data-id":t.id,key:t.id,contenteditable:n.editable,class:a([{"list-item":t.bullet},"paragraph"])},[(sr(!0),ur(tr,null,Dr(t.spans,((e,o)=>(sr(),ur("span",{key:e.id,"data-first":0==o,"data-last":o>=t.spans.length-1,contenteditable:n.editable,"data-id":e.id,"data-time":e.time,"data-duration":e.duration,"data-confidence":e.confidence,class:a(["span token",{selected:e.time<=n.time&&n.time<e.time+e.duration,past:e.time+e.duration<=n.time,highlighted:e.highlighted,bold:e.format&&e.format.bold,italic:e.format&&e.format.italic,underline:e.format&&e.format.underline,superscript:e.format&&e.format.superscript,subscript:e.format&&e.format.subscript}]),onClick:t=>s.spanSelected(e,t),style:r(n.showConfidence?`opacity: ${Math.pow(e.confidence,.5)/2+.5};`:""),title:n.showConfidence?`Confidence: ${e.confidence}`:""},l(e.text),15,Lo)))),128))],10,jo)))),128))],40,Vo)},Mo.__scopeId="data-v-58f093bb";var Fo={value:()=>{}};function Uo(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Ko(r)}function Ko(t){this._=t}function Bo(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function Wo(t,e){for(var n,r=0,o=t.length;r<o;++r)if((n=t[r]).name===e)return n.value}function Ho(t,e,n){for(var r=0,o=t.length;r<o;++r)if(t[r].name===e){t[r]=Fo,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}Ko.prototype=Uo.prototype={constructor:Ko,on:function(t,e){var n,r=this._,o=Bo(t+"",r),i=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<s;)if(n=(t=o[i]).type)r[n]=Ho(r[n],t.name,e);else if(null==e)for(n in r)r[n]=Ho(r[n],t.name,null);return this}for(;++i<s;)if((n=(t=o[i]).type)&&(n=Wo(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Ko(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),i=0;i<n;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,o)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],o=0,i=r.length;o<i;++o)r[o].value.apply(e,n)}};var Xo="http://www.w3.org/1999/xhtml",qo={svg:"http://www.w3.org/2000/svg",xhtml:Xo,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function zo(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),qo.hasOwnProperty(e)?{space:qo[e],local:t}:t}function Yo(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===Xo&&e.documentElement.namespaceURI===Xo?e.createElement(t):e.createElementNS(n,t)}}function Go(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function Jo(t){var e=zo(t);return(e.local?Go:Yo)(e)}function Zo(){}function Qo(t){return null==t?Zo:function(){return this.querySelector(t)}}function ti(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function ei(){return[]}function ni(t){return null==t?ei:function(){return this.querySelectorAll(t)}}function ri(t){return function(){return this.matches(t)}}function oi(t){return function(e){return e.matches(t)}}var ii=Array.prototype.find;function si(){return this.firstElementChild}var ai=Array.prototype.filter;function li(){return Array.from(this.children)}function ci(t){return new Array(t.length)}function ui(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function fi(t){return function(){return t}}function di(t,e,n,r,o,i){for(var s,a=0,l=e.length,c=i.length;a<c;++a)(s=e[a])?(s.__data__=i[a],r[a]=s):n[a]=new ui(t,i[a]);for(;a<l;++a)(s=e[a])&&(o[a]=s)}function pi(t,e,n,r,o,i,s){var a,l,c,u=new Map,f=e.length,d=i.length,p=new Array(f);for(a=0;a<f;++a)(l=e[a])&&(p[a]=c=s.call(l,l.__data__,a,e)+"",u.has(c)?o[a]=l:u.set(c,l));for(a=0;a<d;++a)c=s.call(t,i[a],a,i)+"",(l=u.get(c))?(r[a]=l,l.__data__=i[a],u.delete(c)):n[a]=new ui(t,i[a]);for(a=0;a<f;++a)(l=e[a])&&u.get(p[a])===l&&(o[a]=l)}function hi(t){return t.__data__}function gi(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function vi(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function mi(t){return function(){this.removeAttribute(t)}}function yi(t){return function(){this.removeAttributeNS(t.space,t.local)}}function bi(t,e){return function(){this.setAttribute(t,e)}}function _i(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function xi(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function wi(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function Ii(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function ki(t){return function(){this.style.removeProperty(t)}}function Si(t,e,n){return function(){this.style.setProperty(t,e,n)}}function Di(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function Ni(t,e){return t.style.getPropertyValue(e)||Ii(t).getComputedStyle(t,null).getPropertyValue(e)}function Ci(t){return function(){delete this[t]}}function Ai(t,e){return function(){this[t]=e}}function Ei(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function Oi(t){return t.trim().split(/^|\s+/)}function Ti(t){return t.classList||new $i(t)}function $i(t){this._node=t,this._names=Oi(t.getAttribute("class")||"")}function Pi(t,e){for(var n=Ti(t),r=-1,o=e.length;++r<o;)n.add(e[r])}function Ri(t,e){for(var n=Ti(t),r=-1,o=e.length;++r<o;)n.remove(e[r])}function Mi(t){return function(){Pi(this,t)}}function Vi(t){return function(){Ri(this,t)}}function ji(t,e){return function(){(e.apply(this,arguments)?Pi:Ri)(this,t)}}function Li(){this.textContent=""}function Fi(t){return function(){this.textContent=t}}function Ui(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Ki(){this.innerHTML=""}function Bi(t){return function(){this.innerHTML=t}}function Wi(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Hi(){this.nextSibling&&this.parentNode.appendChild(this)}function Xi(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function qi(){return null}function zi(){var t=this.parentNode;t&&t.removeChild(this)}function Yi(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Gi(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Ji(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Zi(t){return function(){var e=this.__on;if(e){for(var n,r=0,o=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++o]=n:this.removeEventListener(n.type,n.listener,n.options);++o?e.length=o:delete this.__on}}}function Qi(t,e,n){return function(){var r,o=this.__on,i=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(o)for(var s=0,a=o.length;s<a;++s)if((r=o[s]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=e);this.addEventListener(t.type,i,n),r={type:t.type,name:t.name,value:e,listener:i,options:n},o?o.push(r):this.__on=[r]}}function ts(t,e,n){var r=Ii(t),o=r.CustomEvent;"function"==typeof o?o=new o(e,n):(o=r.document.createEvent("Event"),n?(o.initEvent(e,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(e,!1,!1)),t.dispatchEvent(o)}function es(t,e){return function(){return ts(this,t,e)}}function ns(t,e){return function(){return ts(this,t,e.apply(this,arguments))}}ui.prototype={constructor:ui,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},$i.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var rs=[null];function os(t,e){this._groups=t,this._parents=e}function is(){return new os([[document.documentElement]],rs)}function ss(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function as(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function ls(){}os.prototype=is.prototype={constructor:os,select:function(t){"function"!=typeof t&&(t=Qo(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s,a=e[o],l=a.length,c=r[o]=new Array(l),u=0;u<l;++u)(i=a[u])&&(s=t.call(i,i.__data__,u,a))&&("__data__"in i&&(s.__data__=i.__data__),c[u]=s);return new os(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return ti(t.apply(this,arguments))}}(t):ni(t);for(var e=this._groups,n=e.length,r=[],o=[],i=0;i<n;++i)for(var s,a=e[i],l=a.length,c=0;c<l;++c)(s=a[c])&&(r.push(t.call(s,s.__data__,c,a)),o.push(s));return new os(r,o)},selectChild:function(t){return this.select(null==t?si:function(t){return function(){return ii.call(this.children,t)}}("function"==typeof t?t:oi(t)))},selectChildren:function(t){return this.selectAll(null==t?li:function(t){return function(){return ai.call(this.children,t)}}("function"==typeof t?t:oi(t)))},filter:function(t){"function"!=typeof t&&(t=ri(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s=e[o],a=s.length,l=r[o]=[],c=0;c<a;++c)(i=s[c])&&t.call(i,i.__data__,c,s)&&l.push(i);return new os(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,hi);var n=e?pi:di,r=this._parents,o=this._groups;"function"!=typeof t&&(t=fi(t));for(var i=o.length,s=new Array(i),a=new Array(i),l=new Array(i),c=0;c<i;++c){var u=r[c],f=o[c],d=f.length,p=gi(t.call(u,u&&u.__data__,c,r)),h=p.length,g=a[c]=new Array(h),v=s[c]=new Array(h),m=l[c]=new Array(d);n(u,f,g,v,m,p,e);for(var y,b,_=0,x=0;_<h;++_)if(y=g[_]){for(_>=x&&(x=_+1);!(b=v[x])&&++x<h;);y._next=b||null}}return(s=new os(s,r))._enter=a,s._exit=l,s},enter:function(){return new os(this._enter||this._groups.map(ci),this._parents)},exit:function(){return new os(this._exit||this._groups.map(ci),this._parents)},join:function(t,e,n){var r=this.enter(),o=this,i=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=e&&(o=e(o))&&(o=o.selection()),null==n?i.remove():n(i),r&&o?r.merge(o).order():o},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,r=e._groups,o=n.length,i=r.length,s=Math.min(o,i),a=new Array(o),l=0;l<s;++l)for(var c,u=n[l],f=r[l],d=u.length,p=a[l]=new Array(d),h=0;h<d;++h)(c=u[h]||f[h])&&(p[h]=c);for(;l<o;++l)a[l]=n[l];return new os(a,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,o=t[e],i=o.length-1,s=o[i];--i>=0;)(r=o[i])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=vi);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var s,a=n[i],l=a.length,c=o[i]=new Array(l),u=0;u<l;++u)(s=a[u])&&(c[u]=s);c.sort(e)}return new os(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],o=0,i=r.length;o<i;++o){var s=r[o];if(s)return s}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var o,i=e[n],s=0,a=i.length;s<a;++s)(o=i[s])&&t.call(o,o.__data__,s,i);return this},attr:function(t,e){var n=zo(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?yi:mi:"function"==typeof e?n.local?wi:xi:n.local?_i:bi)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?ki:"function"==typeof e?Di:Si)(t,e,null==n?"":n)):Ni(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?Ci:"function"==typeof e?Ei:Ai)(t,e)):this.node()[t]},classed:function(t,e){var n=Oi(t+"");if(arguments.length<2){for(var r=Ti(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof e?ji:e?Mi:Vi)(n,e))},text:function(t){return arguments.length?this.each(null==t?Li:("function"==typeof t?Ui:Fi)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Ki:("function"==typeof t?Wi:Bi)(t)):this.node().innerHTML},raise:function(){return this.each(Hi)},lower:function(){return this.each(Xi)},append:function(t){var e="function"==typeof t?t:Jo(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:Jo(t),r=null==e?qi:"function"==typeof e?e:Qo(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(zi)},clone:function(t){return this.select(t?Gi:Yi)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,o,i=Ji(t+""),s=i.length;if(!(arguments.length<2)){for(a=e?Qi:Zi,r=0;r<s;++r)this.each(a(i[r],e,n));return this}var a=this.node().__on;if(a)for(var l,c=0,u=a.length;c<u;++c)for(r=0,l=a[c];r<s;++r)if((o=i[r]).type===l.type&&o.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?ns:es)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,o=t[e],i=0,s=o.length;i<s;++i)(r=o[i])&&(yield r)}};var cs=1/.7,us="\\s*([+-]?\\d+)\\s*",fs="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",ds="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ps=/^#([0-9a-f]{3,8})$/,hs=new RegExp("^rgb\\("+[us,us,us]+"\\)$"),gs=new RegExp("^rgb\\("+[ds,ds,ds]+"\\)$"),vs=new RegExp("^rgba\\("+[us,us,us,fs]+"\\)$"),ms=new RegExp("^rgba\\("+[ds,ds,ds,fs]+"\\)$"),ys=new RegExp("^hsl\\("+[fs,ds,ds]+"\\)$"),bs=new RegExp("^hsla\\("+[fs,ds,ds,fs]+"\\)$"),_s={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function xs(){return this.rgb().formatHex()}function ws(){return this.rgb().formatRgb()}function Is(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=ps.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?ks(e):3===n?new Cs(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?Ss(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?Ss(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=hs.exec(t))?new Cs(e[1],e[2],e[3],1):(e=gs.exec(t))?new Cs(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=vs.exec(t))?Ss(e[1],e[2],e[3],e[4]):(e=ms.exec(t))?Ss(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ys.exec(t))?Ts(e[1],e[2]/100,e[3]/100,1):(e=bs.exec(t))?Ts(e[1],e[2]/100,e[3]/100,e[4]):_s.hasOwnProperty(t)?ks(_s[t]):"transparent"===t?new Cs(NaN,NaN,NaN,0):null}function ks(t){return new Cs(t>>16&255,t>>8&255,255&t,1)}function Ss(t,e,n,r){return r<=0&&(t=e=n=NaN),new Cs(t,e,n,r)}function Ds(t){return t instanceof ls||(t=Is(t)),t?new Cs((t=t.rgb()).r,t.g,t.b,t.opacity):new Cs}function Ns(t,e,n,r){return 1===arguments.length?Ds(t):new Cs(t,e,n,null==r?1:r)}function Cs(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function As(){return"#"+Os(this.r)+Os(this.g)+Os(this.b)}function Es(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Os(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Ts(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Ps(t,e,n,r)}function $s(t){if(t instanceof Ps)return new Ps(t.h,t.s,t.l,t.opacity);if(t instanceof ls||(t=Is(t)),!t)return new Ps;if(t instanceof Ps)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,o=Math.min(e,n,r),i=Math.max(e,n,r),s=NaN,a=i-o,l=(i+o)/2;return a?(s=e===i?(n-r)/a+6*(n<r):n===i?(r-e)/a+2:(e-n)/a+4,a/=l<.5?i+o:2-i-o,s*=60):a=l>0&&l<1?0:s,new Ps(s,a,l,t.opacity)}function Ps(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Rs(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}ss(ls,Is,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:xs,formatHex:xs,formatHsl:function(){return $s(this).formatHsl()},formatRgb:ws,toString:ws}),ss(Cs,Ns,as(ls,{brighter:function(t){return t=null==t?cs:Math.pow(cs,t),new Cs(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Cs(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:As,formatHex:As,formatRgb:Es,toString:Es})),ss(Ps,(function(t,e,n,r){return 1===arguments.length?$s(t):new Ps(t,e,n,null==r?1:r)}),as(ls,{brighter:function(t){return t=null==t?cs:Math.pow(cs,t),new Ps(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ps(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,o=2*n-r;return new Cs(Rs(t>=240?t-240:t+120,o,r),Rs(t,o,r),Rs(t<120?t+240:t-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Ms=t=>()=>t;function Vs(t){return 1==(t=+t)?js:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Ms(isNaN(e)?n:e)}}function js(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Ms(isNaN(t)?e:t)}var Ls=function t(e){var n=Vs(e);function r(t,e){var r=n((t=Ns(t)).r,(e=Ns(e)).r),o=n(t.g,e.g),i=n(t.b,e.b),s=js(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=o(e),t.b=i(e),t.opacity=s(e),t+""}}return r.gamma=t,r}(1);function Fs(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var Us=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ks=new RegExp(Us.source,"g");function Bs(t,e){var n,r,o,i=Us.lastIndex=Ks.lastIndex=0,s=-1,a=[],l=[];for(t+="",e+="";(n=Us.exec(t))&&(r=Ks.exec(e));)(o=r.index)>i&&(o=e.slice(i,o),a[s]?a[s]+=o:a[++s]=o),(n=n[0])===(r=r[0])?a[s]?a[s]+=r:a[++s]=r:(a[++s]=null,l.push({i:s,x:Fs(n,r)})),i=Ks.lastIndex;return i<e.length&&(o=e.slice(i),a[s]?a[s]+=o:a[++s]=o),a.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)a[(n=l[r]).i]=n.x(t);return a.join("")})}var Ws,Hs=180/Math.PI,Xs={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function qs(t,e,n,r,o,i){var s,a,l;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(a=Math.sqrt(n*n+r*r))&&(n/=a,r/=a,l/=a),t*r<e*n&&(t=-t,e=-e,l=-l,s=-s),{translateX:o,translateY:i,rotate:Math.atan2(e,t)*Hs,skewX:Math.atan(l)*Hs,scaleX:s,scaleY:a}}function zs(t,e,n,r){function o(t){return t.length?t.pop()+" ":""}return function(i,s){var a=[],l=[];return i=t(i),s=t(s),function(t,r,o,i,s,a){if(t!==o||r!==i){var l=s.push("translate(",null,e,null,n);a.push({i:l-4,x:Fs(t,o)},{i:l-2,x:Fs(r,i)})}else(o||i)&&s.push("translate("+o+e+i+n)}(i.translateX,i.translateY,s.translateX,s.translateY,a,l),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(o(n)+"rotate(",null,r)-2,x:Fs(t,e)})):e&&n.push(o(n)+"rotate("+e+r)}(i.rotate,s.rotate,a,l),function(t,e,n,i){t!==e?i.push({i:n.push(o(n)+"skewX(",null,r)-2,x:Fs(t,e)}):e&&n.push(o(n)+"skewX("+e+r)}(i.skewX,s.skewX,a,l),function(t,e,n,r,i,s){if(t!==n||e!==r){var a=i.push(o(i)+"scale(",null,",",null,")");s.push({i:a-4,x:Fs(t,n)},{i:a-2,x:Fs(e,r)})}else 1===n&&1===r||i.push(o(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,s.scaleX,s.scaleY,a,l),i=s=null,function(t){for(var e,n=-1,r=l.length;++n<r;)a[(e=l[n]).i]=e.x(t);return a.join("")}}}var Ys,Gs,Js=zs((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?Xs:qs(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),Zs=zs((function(t){return null==t?Xs:(Ws||(Ws=document.createElementNS("http://www.w3.org/2000/svg","g")),Ws.setAttribute("transform",t),(t=Ws.transform.baseVal.consolidate())?qs((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Xs)}),", ",")",")"),Qs=0,ta=0,ea=0,na=0,ra=0,oa=0,ia="object"==typeof performance&&performance.now?performance:Date,sa="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function aa(){return ra||(sa(la),ra=ia.now()+oa)}function la(){ra=0}function ca(){this._call=this._time=this._next=null}function ua(t,e,n){var r=new ca;return r.restart(t,e,n),r}function fa(){ra=(na=ia.now())+oa,Qs=ta=0;try{!function(){aa(),++Qs;for(var t,e=Ys;e;)(t=ra-e._time)>=0&&e._call.call(void 0,t),e=e._next;--Qs}()}finally{Qs=0,function(){var t,e,n=Ys,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Ys=e);Gs=t,pa(r)}(),ra=0}}function da(){var t=ia.now(),e=t-na;e>1e3&&(oa-=e,na=t)}function pa(t){Qs||(ta&&(ta=clearTimeout(ta)),t-ra>24?(t<1/0&&(ta=setTimeout(fa,t-ia.now()-oa)),ea&&(ea=clearInterval(ea))):(ea||(na=ia.now(),ea=setInterval(da,1e3)),Qs=1,sa(fa)))}function ha(t,e,n){var r=new ca;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}ca.prototype=ua.prototype={constructor:ca,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?aa():+n)+(null==e?0:+e),this._next||Gs===this||(Gs?Gs._next=this:Ys=this,Gs=this),this._call=t,this._time=n,pa()},stop:function(){this._call&&(this._call=null,this._time=1/0,pa())}};var ga=Uo("start","end","cancel","interrupt"),va=[];function ma(t,e,n,r,o,i){var s=t.__transition;if(s){if(n in s)return}else t.__transition={};!function(t,e,n){var r,o=t.__transition;function i(t){n.state=1,n.timer.restart(s,n.delay,n.time),n.delay<=t&&s(t-n.delay)}function s(i){var c,u,f,d;if(1!==n.state)return l();for(c in o)if((d=o[c]).name===n.name){if(3===d.state)return ha(s);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete o[c]):+c<e&&(d.state=6,d.timer.stop(),d.on.call("cancel",t,t.__data__,d.index,d.group),delete o[c])}if(ha((function(){3===n.state&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(i))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),c=0,u=-1;c<f;++c)(d=n.tween[c].value.call(t,t.__data__,n.index,n.group))&&(r[++u]=d);r.length=u+1}}function a(e){for(var o=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(l),n.state=5,1),i=-1,s=r.length;++i<s;)r[i].call(t,o);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),l())}function l(){for(var r in n.state=6,n.timer.stop(),delete o[e],o)return;delete t.__transition}o[e]=n,n.timer=ua(i,0,n.time)}(t,n,{name:e,index:r,group:o,on:ga,tween:va,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function ya(t,e){var n=_a(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function ba(t,e){var n=_a(t,e);if(n.state>3)throw new Error("too late; already running");return n}function _a(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function xa(t,e){var n,r;return function(){var o=ba(this,t),i=o.tween;if(i!==n)for(var s=0,a=(r=n=i).length;s<a;++s)if(r[s].name===e){(r=r.slice()).splice(s,1);break}o.tween=r}}function wa(t,e,n){var r,o;if("function"!=typeof n)throw new Error;return function(){var i=ba(this,t),s=i.tween;if(s!==r){o=(r=s).slice();for(var a={name:e,value:n},l=0,c=o.length;l<c;++l)if(o[l].name===e){o[l]=a;break}l===c&&o.push(a)}i.tween=o}}function Ia(t,e,n){var r=t._id;return t.each((function(){var t=ba(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return _a(t,r).value[e]}}function ka(t,e){var n;return("number"==typeof e?Fs:e instanceof Is?Ls:(n=Is(e))?(e=n,Ls):Bs)(t,e)}function Sa(t){return function(){this.removeAttribute(t)}}function Da(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Na(t,e,n){var r,o,i=n+"";return function(){var s=this.getAttribute(t);return s===i?null:s===r?o:o=e(r=s,n)}}function Ca(t,e,n){var r,o,i=n+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===i?null:s===r?o:o=e(r=s,n)}}function Aa(t,e,n){var r,o,i;return function(){var s,a,l=n(this);if(null!=l)return(s=this.getAttribute(t))===(a=l+"")?null:s===r&&a===o?i:(o=a,i=e(r=s,l));this.removeAttribute(t)}}function Ea(t,e,n){var r,o,i;return function(){var s,a,l=n(this);if(null!=l)return(s=this.getAttributeNS(t.space,t.local))===(a=l+"")?null:s===r&&a===o?i:(o=a,i=e(r=s,l));this.removeAttributeNS(t.space,t.local)}}function Oa(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function Ta(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function $a(t,e){var n,r;function o(){var o=e.apply(this,arguments);return o!==r&&(n=(r=o)&&Ta(t,o)),n}return o._value=e,o}function Pa(t,e){var n,r;function o(){var o=e.apply(this,arguments);return o!==r&&(n=(r=o)&&Oa(t,o)),n}return o._value=e,o}function Ra(t,e){return function(){ya(this,t).delay=+e.apply(this,arguments)}}function Ma(t,e){return e=+e,function(){ya(this,t).delay=e}}function Va(t,e){return function(){ba(this,t).duration=+e.apply(this,arguments)}}function ja(t,e){return e=+e,function(){ba(this,t).duration=e}}function La(t,e){if("function"!=typeof e)throw new Error;return function(){ba(this,t).ease=e}}function Fa(t,e,n){var r,o,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?ya:ba;return function(){var s=i(this,t),a=s.on;a!==r&&(o=(r=a).copy()).on(e,n),s.on=o}}var Ua=is.prototype.constructor;function Ka(t){return function(){this.style.removeProperty(t)}}function Ba(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function Wa(t,e,n){var r,o;function i(){var i=e.apply(this,arguments);return i!==o&&(r=(o=i)&&Ba(t,i,n)),r}return i._value=e,i}function Ha(t){return function(e){this.textContent=t.call(this,e)}}function Xa(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&Ha(r)),e}return r._value=t,r}var qa=0;function za(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Ya(){return++qa}var Ga=is.prototype;za.prototype={constructor:za,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Qo(t));for(var r=this._groups,o=r.length,i=new Array(o),s=0;s<o;++s)for(var a,l,c=r[s],u=c.length,f=i[s]=new Array(u),d=0;d<u;++d)(a=c[d])&&(l=t.call(a,a.__data__,d,c))&&("__data__"in a&&(l.__data__=a.__data__),f[d]=l,ma(f[d],e,n,d,f,_a(a,n)));return new za(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=ni(t));for(var r=this._groups,o=r.length,i=[],s=[],a=0;a<o;++a)for(var l,c=r[a],u=c.length,f=0;f<u;++f)if(l=c[f]){for(var d,p=t.call(l,l.__data__,f,c),h=_a(l,n),g=0,v=p.length;g<v;++g)(d=p[g])&&ma(d,e,n,g,p,h);i.push(p),s.push(l)}return new za(i,s,e,n)},selectChild:Ga.selectChild,selectChildren:Ga.selectChildren,filter:function(t){"function"!=typeof t&&(t=ri(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s=e[o],a=s.length,l=r[o]=[],c=0;c<a;++c)(i=s[c])&&t.call(i,i.__data__,c,s)&&l.push(i);return new za(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,o=n.length,i=Math.min(r,o),s=new Array(r),a=0;a<i;++a)for(var l,c=e[a],u=n[a],f=c.length,d=s[a]=new Array(f),p=0;p<f;++p)(l=c[p]||u[p])&&(d[p]=l);for(;a<r;++a)s[a]=e[a];return new za(s,this._parents,this._name,this._id)},selection:function(){return new Ua(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Ya(),r=this._groups,o=r.length,i=0;i<o;++i)for(var s,a=r[i],l=a.length,c=0;c<l;++c)if(s=a[c]){var u=_a(s,e);ma(s,t,n,c,a,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new za(r,this._parents,t,n)},call:Ga.call,nodes:Ga.nodes,node:Ga.node,size:Ga.size,empty:Ga.empty,each:Ga.each,on:function(t,e){var n=this._id;return arguments.length<2?_a(this.node(),n).on.on(t):this.each(Fa(n,t,e))},attr:function(t,e){var n=zo(t),r="transform"===n?Zs:ka;return this.attrTween(t,"function"==typeof e?(n.local?Ea:Aa)(n,r,Ia(this,"attr."+t,e)):null==e?(n.local?Da:Sa)(n):(n.local?Ca:Na)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=zo(t);return this.tween(n,(r.local?$a:Pa)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Js:ka;return null==e?this.styleTween(t,function(t,e){var n,r,o;return function(){var i=Ni(this,t),s=(this.style.removeProperty(t),Ni(this,t));return i===s?null:i===n&&s===r?o:o=e(n=i,r=s)}}(t,r)).on("end.style."+t,Ka(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,o,i;return function(){var s=Ni(this,t),a=n(this),l=a+"";return null==a&&(this.style.removeProperty(t),l=a=Ni(this,t)),s===l?null:s===r&&l===o?i:(o=l,i=e(r=s,a))}}(t,r,Ia(this,"style."+t,e))).each(function(t,e){var n,r,o,i,s="style."+e,a="end."+s;return function(){var l=ba(this,t),c=l.on,u=null==l.value[s]?i||(i=Ka(e)):void 0;c===n&&o===u||(r=(n=c).copy()).on(a,o=u),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,o,i=n+"";return function(){var s=Ni(this,t);return s===i?null:s===r?o:o=e(r=s,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Wa(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Ia(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,Xa(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,o=_a(this.node(),n).tween,i=0,s=o.length;i<s;++i)if((r=o[i]).name===t)return r.value;return null}return this.each((null==e?xa:wa)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Ra:Ma)(e,t)):_a(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Va:ja)(e,t)):_a(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(La(e,t)):_a(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;ba(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,o=n.size();return new Promise((function(i,s){var a={value:s},l={value:function(){0==--o&&i()}};n.each((function(){var n=ba(this,r),o=n.on;o!==t&&((e=(t=o).copy())._.cancel.push(a),e._.interrupt.push(a),e._.end.push(l)),n.on=e})),0===o&&i()}))},[Symbol.iterator]:Ga[Symbol.iterator]};var Ja={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Za(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}is.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,o,i=t.__transition,s=!0;if(i){for(o in e=null==e?null:e+"",i)(n=i[o]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[o]):s=!1;s&&delete t.__transition}}(this,t)}))},is.prototype.transition=function(t){var e,n;t instanceof za?(e=t._id,t=t._name):(e=Ya(),(n=Ja).time=aa(),t=null==t?null:t+"");for(var r=this._groups,o=r.length,i=0;i<o;++i)for(var s,a=r[i],l=a.length,c=0;c<l;++c)(s=a[c])&&ma(s,t,e,c,a,n||Za(s,e));return new za(r,this._parents,t,e)};const Qa={props:{modelValue:[Int16Array,Int32Array,Array],time:Number,duration:Number,selection:Object},data:()=>({waveform:void 0,svg:void 0,data:void 0}),async mounted(){this.$options.watch.modelValue.call(this,this.modelValue),this.resizeCheckInterval=setInterval((()=>{null==this.currentWidth||null==this.currentHeight||!this.$refs.svg||this.currentWidth==this.$refs.svg.clientWidth&&this.currentHeight==this.$refs.svg.clientHeight||this.draw()}),2e3)},watch:{modelValue(t){if(t)if(t instanceof Int16Array){const e=new Float32Array(t);this.data=e.map((t=>t/32768))}else t instanceof Float32Array||t instanceof Array&&t.length>0&&"number"==typeof t[0]&&t[0]>=-1&&t[0]<=1?this.data=t:this.data=void 0;else this.data=void 0;this.draw()},time(t){}},methods:{click(t){const e=t.offsetX/this.$refs.svg.clientWidth*this.duration;this.$emit("update:time",e)},draw(t,e){const n=this.data;t=t||this.$refs.svg.clientWidth,e=e||this.$refs.svg.clientHeight,this.currentWidth=t,this.currentHeight=e;const r="string"==typeof(o=this.$refs.svg)?new os([[document.querySelector(o)]],[document.documentElement]):new os([[o]],rs);var o;if(!n)return void r.selectAll("*").remove();r.attr("height",e).attr("width",t);const i=function(t,e){var n=Math.round(t.length/e),r=[];const o=Math.min(n,1e3);for(var i=0;i<e;i++){for(var s=0,a=0,l=0;l<o&&!(i*n+l>=t.length);l++){var c=t[i*n+l];c>0?s+=c:a+=c}r.push([a/o,s/o])}return r}(n,1200);let s=0;for(const c of i)s+=-c[0]+c[1];s/=2*i.length;const a=.1*e/s,l=t/i.length;r.selectAll("rect").data(i).attr("x",(function(e,n){return n/i.length*t})).attr("y",(function(t,n){return.5*e-a*t[1]})).attr("width",l).attr("height",(function(t){return a*(t[1]-t[0])})).enter().append("rect").style("stroke","#342a40").style("stroke-width","0").style("fill","rgba(0,0,0,0.3)").attr("x",(function(e,n){return n/i.length*t})).attr("y",(function(t,n){return.5*e-a*t[1]})).attr("width",l).attr("height",(function(t){return a*(t[1]-t[0])})).exit().remove()}}},tl={ref:"svg",style:{"-border":"1px solid red",width:"100%",height:"100%"}};Qa.render=function(t,e,n,o,i,s){return sr(),ur("div",{onClick:e[0]||(e[0]=(...t)=>s.click&&s.click(...t))},[(sr(),ur("svg",tl,null,512)),n.selection?(sr(),ur("div",{key:0,style:r([{position:"absolute",top:"0px",height:"100%",left:"0px","background-color":"#fffb","pointer-events":"none","border-left":"1px solid blue","border-right":"1px solid blue"},{left:n.selection.start/n.duration*100+"%",width:(n.selection.end-n.selection.start)/n.duration*100+"%"}])},null,4)):xr("",!0),mr("div",{style:r([{position:"absolute",top:"0px",height:"100%",width:"0px",border:"1px solid red",left:"0px"},{left:n.time/n.duration*100+"%"}]),ref:"head"},null,4)])},Qa.__scopeId="data-v-af4cf048";class el{constructor(t){this.init(t)}init(t){this.close(),this.context=new AudioContext,this.context.onstatechange=t?()=>{t(this)}:()=>{t&&t||this.onstatechange(this)}}close(){this.context&&(this.context.close(),this.context=void 0)}resume(){this.context.resume()}get suspended(){return"suspended"===this.context.state}onstatechange(t){console.log("audio context state changed:",t.context.state)}async decodeAudioFileData(t){const e=await this.decodeAudioFileBuffer(t),n=this.bufferData(e);return{data:this.Float32ArrayToInt16Array(n),sampleRate:e.sampleRate,length:e.length,duration:e.duration,numberOfChannels:e.numberOfChannels}}async fetchAndDecodeAudioFile(t){const e=await this.fetchAudioFileAndDecode(t),n=this.bufferData(e);return{data:this.Float32ArrayToInt16Array(n),sampleRate:e.sampleRate,length:e.length,duration:e.duration,numberOfChannels:e.numberOfChannels}}async fetchAudioFileAndDecode(t){const e=await fetch(t);return await this.decodeAudioFileBuffer(await e.arrayBuffer())}async decodeAudioFileBuffer(t){const e=this.context;return await e.decodeAudioData(t)}Float32ArrayToInt16Array(t){return Int16Array.from(t.map((t=>32768*t)))}bufferData(t,{channel:e=0}={}){return t.getChannelData(e)}}var nl={components:{TranscriptEditor:Mo,Waveform:Qa},props:{transcript:{type:Object,default:{paragraphs:{}}},duration:{type:Number},url:{type:String},name:{},waveform:[Int16Array,Int32Array,Array,String],previewVideo:{type:Boolean,default:!0},onSave:{type:Function,default:async()=>console.log("onSave not implemented")},editable:{type:Boolean,default:!0}},data:()=>({position:0,selected:void 0,playing:!1,loaded:!1,isVideo:!1,_url:void 0,_duration:void 0,_waveform:void 0,pending_waveform:void 0,pending_duration:void 0,video_duration:void 0,saving:!1,version:0,lastSavedVersion:0,autoSave:!1,autoSaveInterval:null,decoderSuspended:!1,decodingAudio:!1,showConfidence:!1}),async mounted(){this.$options.watch.waveform.call(this,this.waveform),this.autoSaveInterval=window.setInterval(this.saveAuto,5e3),window.addEventListener("keydown",this.onGlobalKeydown),this.decoder=new el((t=>{this.decoderSuspended=this.decoder.suspended,this.decoder.suspended&&console.log("audio decoder suspended")})),this.decoderSuspended=this.decoder.suspended},beforeUnmount(){this.autoSaveInterval&&window.clearInterval(this.autoSaveInterval),window.removeEventListener("keydown",this.onGlobalKeydown)},watch:{position(t){},transcript:{handler(t,e){},deep:!0},duration(t){this._duration=t},url(t){this._url=t},async waveform(t){if("string"==typeof t){const{data:e,duration:n}=await this.decodeAudioWaveform(t);this._waveform=e}else if(t instanceof File){const{data:e,duration:n}=await this.decoder.decodeAudioFileData(await t.arrayBuffer());this._waveform=e}else this._waveform=t}},computed:{synced(){return this.lastSavedVersion===this.version}},methods:{msToTime:function(t,{ms:e=!1,hours:n=!0}={}){if(null==t||isNaN(t))return`${n?"--:":""}--:--${e?".---":""}`;function r(t,e){return("00"+t).slice(-(e=e||2))}var o=t%1e3,i=(t=(t-o)/1e3)%60,s=(t=(t-i)/60)%60,a=(t-s)/60;return(a||n?r(a)+":":"")+r(s)+":"+r(i)+(e?"."+r(o,3):"")},toggleAutoSave(){this.autoSave=!this.autoSave},async save(){if(this.onSave&&this.editable){const t=this.version;this.saving=!0,await this.onSave(this.transcript),console.log("saved",this.transcript),this.lastSavedVersion=t,this.saving=!1}},saveAuto(){this.autoSave&&this.save()},async decodeAudioWaveform(t){try{return this.decodingAudio=!0,this.decoder.suspended&&await this.decoder.resume(),t instanceof File?await this.decoder.decodeAudioFileData(await t.arrayBuffer()):await this.decoder.fetchAndDecodeAudioFile(t)}catch(e){throw e}finally{this.decodingAudio=!1}},async load({url:t,waveform:e,duration:n}){"string"==typeof e||e instanceof File?this.pending_waveform=(async()=>{const{data:t,duration:n}=await this.decodeAudioWaveform(e);return t})():null===e?this._waveform=[]:void 0!==e&&(this.pending_waveform=(async()=>e)()),n&&(this.pending_duration=n),void 0!==t?(this._url=t,t&&0!==t.length||(this.video_duration=void 0)):this.pending_waveform&&(this._waveform=await this.pending_waveform,this.pending_waveform=void 0)},waveformLoading(){this._waveform=void 0,this.loaded=!1},onPlay(){this.playing=!0,this.animationFrameID=requestAnimationFrame(this.updatePosition)},onPause(){this.playing=!1,this.animationFrameID&&(cancelAnimationFrame(this.animationFrameID),this.animationFrameID=void 0)},onEnded(){this.onPause()},updatePosition(t){this.position=1e3*this.$refs.video.currentTime,this.animationFrameID=requestAnimationFrame(this.updatePosition)},durationChanged(){const t=this.$refs.video;this._duration=1e3*t.duration,this.video_duration=1e3*t.duration},async onDataLoaded(){const t=this.$refs.video;t&&(this.isVideo=t.videoWidth>0&&t.videoHeight>0),this.pending_duration&&(this.pending_duration=void 0),this.pending_waveform&&(this._waveform=await this.pending_waveform,this.pending_waveform=void 0),this.loaded=!0},onEmpty(){this.loaded=!1,this.isVideo=!1},onGlobalKeydown(t){"s"!==t.key||!0!==t.ctrlKey&&!0!==t.metaKey||(t.preventDefault(),this.save()),("Space"===t.code&&!0===t.ctrlKey||"Escape"==t.code)&&(t.preventDefault(),this.$refs.video.paused?this.$refs.video.play():this.$refs.video.pause())},transcriptUpdated(t){this.version+=1},setPosition(t){void 0!==t&&(this.$refs.video.currentTime=t/1e3,this.$emit("setPosition",t))},timeUpdate(t){this.position=1e3*this.$refs.video.currentTime},toggleShowConfidence(){this.showConfidence=!this.showConfidence}}};const rl=t=>(Fe="data-v-b1db3c7a",t=t(),Fe=null,t),ol={class:"editor-wrapper"},il={key:0,class:"header"},sl={class:"btn-group me-2",role:"group"},al={key:0,class:"spinner-border spinner-border-sm",role:"status"},ll={key:1,class:"bi bi-check-lg",title:"Saglabāts"},cl={key:2,class:"bi bi-asterisk",title:"Ir nesaglabātas izmaiņas"},ul=_r(" Saglabāt "),fl=_r(" 5s "),dl={class:"btn-group me-2",role:"group"},pl=[rl((()=>mr("i",{class:"bi bi-type-bold"},null,-1)))],hl=[rl((()=>mr("i",{class:"bi bi-type-italic"},null,-1)))],gl=[rl((()=>mr("i",{class:"bi bi-type-underline"},null,-1)))],vl=[rl((()=>mr("i",{class:"bi"},[_r("x"),mr("sup",null,"2")],-1)))],ml=[rl((()=>mr("i",{class:"bi"},[_r("x"),mr("sub",null,"2")],-1)))],yl=[rl((()=>mr("i",{class:"bi bi-list-ul"},null,-1)))],bl={class:"footer"},_l=["src"],xl={class:"waveform-and-buttons"},wl={key:1,class:"waveform-loading"},Il=[rl((()=>mr("div",{class:"text-center",style:{position:"relative",top:"calc(50% - 1rem)"}},[mr("div",{class:"spinner-grow",role:"status"}),mr("div",{style:{position:"relative",display:"inline-block",top:"-0.5rem",left:"0.5rem"}}," Loading... ")],-1)))],kl={class:"controls"},Sl={key:0,class:"btn-group pe-2",role:"group"},Dl=[rl((()=>mr("i",{class:"bi bi-play-fill"},null,-1)))],Nl=[rl((()=>mr("i",{class:"bi bi-pause-fill"},null,-1)))],Cl={style:{"font-variant-numeric":"tabular-nums"}};async function Al(t){const e=await async function(t){const e=new AudioContext,n=await e.decodeAudioData(t);return e.close(),n}(t),n=function(t,{channel:e=0}={}){return t.getChannelData(e)}(e);return{data:(r=n,Int16Array.from(r.map((t=>32768*t)))),sampleRate:e.sampleRate,length:e.length,duration:e.duration,numberOfChannels:e.numberOfChannels};var r}nl.render=function(t,e,n,r,o,i){const s=Jn("TranscriptEditor"),c=Jn("Waveform");return sr(),ur("div",ol,[Nr(t.$slots,"default",{},void 0,!0),this.editable?(sr(),ur("div",il,[mr("div",sl,[mr("button",{class:"btn btn-outline-primary",onClick:e[0]||(e[0]=t=>i.save())},[o.saving?(sr(),ur("div",al)):i.synced?(sr(),ur("i",ll)):(sr(),ur("i",cl)),ul]),mr("button",{class:a("btn "+(o.autoSave?"btn-primary":"btn-outline-primary")),onClick:e[1]||(e[1]=(...t)=>i.toggleAutoSave&&i.toggleAutoSave(...t)),title:"Automātiski sagalabāt katras 5s"},[mr("i",{class:a("bi bi-toggle-"+(o.autoSave?"on":"off"))},null,2),fl],2)]),mr("div",dl,[mr("button",{class:"btn btn-outline-primary",onClick:e[2]||(e[2]=e=>t.$refs.transcript.toggleStyleX("bold"))},pl),mr("button",{class:"btn btn-outline-primary",onClick:e[3]||(e[3]=e=>t.$refs.transcript.toggleStyleX("italic"))},hl),mr("button",{class:"btn btn-outline-primary",onClick:e[4]||(e[4]=e=>t.$refs.transcript.toggleStyleX("underline"))},gl),mr("button",{class:"btn btn-outline-primary",onClick:e[5]||(e[5]=e=>t.$refs.transcript.toggleStyleX("superscript"))},vl),mr("button",{class:"btn btn-outline-primary",onClick:e[6]||(e[6]=e=>t.$refs.transcript.toggleStyleX("subscript"))},ml),mr("button",{class:"btn btn-outline-primary",onClick:e[7]||(e[7]=e=>t.$refs.transcript.toggleBullet())},yl)])])):xr("",!0),yr(s,{class:"main transcript-editor",ref:"transcript",modelValue:n.transcript,"onUpdate:modelValue":[e[8]||(e[8]=t=>n.transcript=t),i.transcriptUpdated],time:o.position,"onUpdate:time":i.setPosition,onSelected:e[9]||(e[9]=t=>o.selected=t),editable:n.editable,"show-confidence":this.showConfidence},null,8,["modelValue","onUpdate:modelValue","time","onUpdate:time","editable","show-confidence"]),mr("div",bl,[mr("div",{class:a(["media-panel",{video:o.isVideo&&n.previewVideo}])},[mr("video",{playsinline:"",src:o._url,ref:"video",onTimeupdate:e[10]||(e[10]=(...t)=>i.timeUpdate&&i.timeUpdate(...t)),onLoadeddata:e[11]||(e[11]=(...t)=>i.onDataLoaded&&i.onDataLoaded(...t)),onLoadstart:e[12]||(e[12]=(...t)=>i.onDataLoaded&&i.onDataLoaded(...t)),onEmptied:e[13]||(e[13]=(...t)=>i.onEmpty&&i.onEmpty(...t)),onDurationchange:e[14]||(e[14]=(...t)=>i.durationChanged&&i.durationChanged(...t)),onPlay:e[15]||(e[15]=(...t)=>i.onPlay&&i.onPlay(...t)),onPause:e[16]||(e[16]=(...t)=>i.onPause&&i.onPause(...t)),onEnded:e[17]||(e[17]=(...t)=>i.onEnded&&i.onEnded(...t))},null,40,_l),mr("div",xl,[mr("div",null,[null!=o._waveform?(sr(),fr(c,{key:0,class:"waveform",modelValue:o._waveform,"onUpdate:modelValue":e[18]||(e[18]=t=>o._waveform=t),time:o.position,"onUpdate:time":[e[19]||(e[19]=t=>o.position=t),i.setPosition],duration:o._duration,selection:o.selected},null,8,["modelValue","time","onUpdate:time","duration","selection"])):(sr(),ur("div",wl,Il))]),mr("div",kl,[o.loaded?(sr(),ur("div",Sl,[o.playing?(sr(),ur("button",{key:1,class:"btn btn-primary",onClick:e[21]||(e[21]=e=>t.$refs.video.pause())},Nl)):(sr(),ur("button",{key:0,class:"btn btn-primary",onClick:e[20]||(e[20]=e=>t.$refs.video.play())},Dl))])):xr("",!0),mr("span",Cl,l(i.msToTime(o.position))+" / "+l(i.msToTime(o.video_duration)),1)])])],2)])])},nl.__scopeId="data-v-b1db3c7a";var El={components:{Editor:nl},props:{},data:()=>({transcript:{},waveform:[],duration:0,url:void 0}),async mounted(){},unmounted(){this.url&&this.url.length>0&&this.url.startsWith("blob:")&&URL.revokeObjectURL(this.url)},watch:{},methods:{async load({audio:t,transcript:e,file:n,waveform:r}){if(null!=r&&r instanceof ArrayBuffer){r=(await Al(r)).data}if("string"==typeof t){this.$refs.editor.waveformLoading(),this.url&&this.url.length>0&&this.url.startsWith("blob:")&&URL.revokeObjectURL(this.url);const e=t;void 0===r&&(r=t),this.$refs.editor.load({url:e,waveform:r})}else if(t instanceof File){this.$refs.editor.waveformLoading(),this.url&&this.url.length>0&&this.url.startsWith("blob:")&&URL.revokeObjectURL(this.url);const e=URL.createObjectURL(t);void 0===r&&(r=t),this.$refs.editor.load({url:e,waveform:r})}else if(t instanceof ArrayBuffer){this.$refs.editor.waveformLoading();const e=URL.createObjectURL(n||new Blob([t])),o=await Al(t);void 0===r&&(r=o.data),this.$refs.editor.load({url:e,waveform:r,duration:1e3*o.duration})}else null===t?(this.url&&this.url.length>0&&this.url.startsWith("blob:")&&URL.revokeObjectURL(this.url),void 0===r&&(r=null),this.$refs.editor.load({url:"",waveform:r,duration:0})):r&&this.$refs.editor.load({waveform:r});if(e)if("string"==typeof e){const t=await fetch(e);this.transcript=await t.json()}else e instanceof File?this.transcript=JSON.parse(await e.text()):this.transcript=e},async onSetPosition(t){console.debug("on set position:",t)},async onSave(t){console.log("on save transcript:",t)},async save(t){console.log("save transcript not implemented, transcript:",t)}}};El.render=function(t,e,n,r,o,i){const s=Jn("Editor");return sr(),fr(s,{class:"",transcript:o.transcript,waveform:o.waveform,duration:o.duration,url:o.url,onSave:i.onSave,onSetPosition:i.onSetPosition,ref:"editor"},null,8,["transcript","waveform","duration","url","onSave","onSetPosition"])};function Ol(t="#app"){return lo(El).mount(t)}export default Ol;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
