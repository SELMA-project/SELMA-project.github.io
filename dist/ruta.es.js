function t(t,e){const n=Object.create(null),r=t.split(",");for(let o=0;o<r.length;o++)n[r[o]]=!0;return e?t=>!!n[t.toLowerCase()]:t=>!!n[t]}const e=t("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function n(t){return!!t||""===t}function r(t){if(x(t)){const e={};for(let n=0;n<t.length;n++){const o=t[n],s=D(o)?i(o):r(o);if(s)for(const t in s)e[t]=s[t]}return e}return D(t)||N(t)?t:void 0}const o=/;(?![^(]*\))/g,s=/:(.+)/;function i(t){const e={};return t.split(o).forEach((t=>{if(t){const n=t.split(s);n.length>1&&(e[n[0].trim()]=n[1].trim())}})),e}function a(t){let e="";if(D(t))e=t;else if(x(t))for(let n=0;n<t.length;n++){const r=a(t[n]);r&&(e+=r+" ")}else if(N(t))for(const n in t)t[n]&&(e+=n+" ");return e.trim()}const l=t=>null==t?"":x(t)||N(t)&&(t.toString===A||!k(t.toString))?JSON.stringify(t,c,2):String(t),c=(t,e)=>e&&e.__v_isRef?c(t,e.value):w(e)?{[`Map(${e.size})`]:[...e.entries()].reduce(((t,[e,n])=>(t[`${e} =>`]=n,t)),{})}:I(e)?{[`Set(${e.size})`]:[...e.values()]}:!N(e)||x(e)||O(e)?e:String(e),u={},f=[],p=()=>{},d=()=>!1,h=/^on[^a-z]/,g=t=>h.test(t),v=t=>t.startsWith("onUpdate:"),m=Object.assign,y=(t,e)=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)},b=Object.prototype.hasOwnProperty,_=(t,e)=>b.call(t,e),x=Array.isArray,w=t=>"[object Map]"===E(t),I=t=>"[object Set]"===E(t),k=t=>"function"==typeof t,D=t=>"string"==typeof t,S=t=>"symbol"==typeof t,N=t=>null!==t&&"object"==typeof t,C=t=>N(t)&&k(t.then)&&k(t.catch),A=Object.prototype.toString,E=t=>A.call(t),O=t=>"[object Object]"===E(t),T=t=>D(t)&&"NaN"!==t&&"-"!==t[0]&&""+parseInt(t,10)===t,P=t(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),$=t=>{const e=Object.create(null);return n=>e[n]||(e[n]=t(n))},M=/-(\w)/g,R=$((t=>t.replace(M,((t,e)=>e?e.toUpperCase():"")))),j=/\B([A-Z])/g,V=$((t=>t.replace(j,"-$1").toLowerCase())),L=$((t=>t.charAt(0).toUpperCase()+t.slice(1))),F=$((t=>t?`on${L(t)}`:"")),U=(t,e)=>!Object.is(t,e),B=(t,e)=>{for(let n=0;n<t.length;n++)t[n](e)},K=(t,e,n)=>{Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:n})},H=t=>{const e=parseFloat(t);return isNaN(e)?t:e};let W;let q;const z=[];class X{constructor(t=!1){this.active=!0,this.effects=[],this.cleanups=[],!t&&q&&(this.parent=q,this.index=(q.scopes||(q.scopes=[])).push(this)-1)}run(t){if(this.active)try{return this.on(),t()}finally{this.off()}}on(){this.active&&(z.push(this),q=this)}off(){this.active&&(z.pop(),q=z[z.length-1])}stop(t){if(this.active){if(this.effects.forEach((t=>t.stop())),this.cleanups.forEach((t=>t())),this.scopes&&this.scopes.forEach((t=>t.stop(!0))),this.parent&&!t){const t=this.parent.scopes.pop();t&&t!==this&&(this.parent.scopes[this.index]=t,t.index=this.index)}this.active=!1}}}const Y=t=>{const e=new Set(t);return e.w=0,e.n=0,e},G=t=>(t.w&tt)>0,J=t=>(t.n&tt)>0,Z=new WeakMap;let Q=0,tt=1;const et=[];let nt;const rt=Symbol(""),ot=Symbol("");class st{constructor(t,e=null,n){this.fn=t,this.scheduler=e,this.active=!0,this.deps=[],function(t,e){(e=e||q)&&e.active&&e.effects.push(t)}(this,n)}run(){if(!this.active)return this.fn();if(!et.includes(this))try{return et.push(nt=this),lt.push(at),at=!0,tt=1<<++Q,Q<=30?(({deps:t})=>{if(t.length)for(let e=0;e<t.length;e++)t[e].w|=tt})(this):it(this),this.fn()}finally{Q<=30&&(t=>{const{deps:e}=t;if(e.length){let n=0;for(let r=0;r<e.length;r++){const o=e[r];G(o)&&!J(o)?o.delete(t):e[n++]=o,o.w&=~tt,o.n&=~tt}e.length=n}})(this),tt=1<<--Q,ut(),et.pop();const t=et.length;nt=t>0?et[t-1]:void 0}}stop(){this.active&&(it(this),this.onStop&&this.onStop(),this.active=!1)}}function it(t){const{deps:e}=t;if(e.length){for(let n=0;n<e.length;n++)e[n].delete(t);e.length=0}}let at=!0;const lt=[];function ct(){lt.push(at),at=!1}function ut(){const t=lt.pop();at=void 0===t||t}function ft(t,e,n){if(!pt())return;let r=Z.get(t);r||Z.set(t,r=new Map);let o=r.get(n);o||r.set(n,o=Y()),dt(o)}function pt(){return at&&void 0!==nt}function dt(t,e){let n=!1;Q<=30?J(t)||(t.n|=tt,n=!G(t)):n=!t.has(nt),n&&(t.add(nt),nt.deps.push(t))}function ht(t,e,n,r,o,s){const i=Z.get(t);if(!i)return;let a=[];if("clear"===e)a=[...i.values()];else if("length"===n&&x(t))i.forEach(((t,e)=>{("length"===e||e>=r)&&a.push(t)}));else switch(void 0!==n&&a.push(i.get(n)),e){case"add":x(t)?T(n)&&a.push(i.get("length")):(a.push(i.get(rt)),w(t)&&a.push(i.get(ot)));break;case"delete":x(t)||(a.push(i.get(rt)),w(t)&&a.push(i.get(ot)));break;case"set":w(t)&&a.push(i.get(rt))}if(1===a.length)a[0]&&gt(a[0]);else{const t=[];for(const e of a)e&&t.push(...e);gt(Y(t))}}function gt(t,e){for(const n of x(t)?t:[...t])(n!==nt||n.allowRecurse)&&(n.scheduler?n.scheduler():n.run())}const vt=t("__proto__,__v_isRef,__isVue"),mt=new Set(Object.getOwnPropertyNames(Symbol).map((t=>Symbol[t])).filter(S)),yt=It(),bt=It(!1,!0),_t=It(!0),xt=wt();function wt(){const t={};return["includes","indexOf","lastIndexOf"].forEach((e=>{t[e]=function(...t){const n=ie(this);for(let e=0,o=this.length;e<o;e++)ft(n,0,e+"");const r=n[e](...t);return-1===r||!1===r?n[e](...t.map(ie)):r}})),["push","pop","shift","unshift","splice"].forEach((e=>{t[e]=function(...t){ct();const n=ie(this)[e].apply(this,t);return ut(),n}})),t}function It(t=!1,e=!1){return function(n,r,o){if("__v_isReactive"===r)return!t;if("__v_isReadonly"===r)return t;if("__v_raw"===r&&o===(t?e?Zt:Jt:e?Gt:Yt).get(n))return n;const s=x(n);if(!t&&s&&_(xt,r))return Reflect.get(xt,r,o);const i=Reflect.get(n,r,o);if(S(r)?mt.has(r):vt(r))return i;if(t||ft(n,0,r),e)return i;if(ue(i)){return!s||!T(r)?i.value:i}return N(i)?t?ee(i):te(i):i}}function kt(t=!1){return function(e,n,r,o){let s=e[n];if(!t&&!oe(r)&&(r=ie(r),s=ie(s),!x(e)&&ue(s)&&!ue(r)))return s.value=r,!0;const i=x(e)&&T(n)?Number(n)<e.length:_(e,n),a=Reflect.set(e,n,r,o);return e===ie(o)&&(i?U(r,s)&&ht(e,"set",n,r):ht(e,"add",n,r)),a}}const Dt={get:yt,set:kt(),deleteProperty:function(t,e){const n=_(t,e);t[e];const r=Reflect.deleteProperty(t,e);return r&&n&&ht(t,"delete",e,void 0),r},has:function(t,e){const n=Reflect.has(t,e);return S(e)&&mt.has(e)||ft(t,0,e),n},ownKeys:function(t){return ft(t,0,x(t)?"length":rt),Reflect.ownKeys(t)}},St={get:_t,set:(t,e)=>!0,deleteProperty:(t,e)=>!0},Nt=m({},Dt,{get:bt,set:kt(!0)}),Ct=t=>t,At=t=>Reflect.getPrototypeOf(t);function Et(t,e,n=!1,r=!1){const o=ie(t=t.__v_raw),s=ie(e);e!==s&&!n&&ft(o,0,e),!n&&ft(o,0,s);const{has:i}=At(o),a=r?Ct:n?ce:le;return i.call(o,e)?a(t.get(e)):i.call(o,s)?a(t.get(s)):void(t!==o&&t.get(e))}function Ot(t,e=!1){const n=this.__v_raw,r=ie(n),o=ie(t);return t!==o&&!e&&ft(r,0,t),!e&&ft(r,0,o),t===o?n.has(t):n.has(t)||n.has(o)}function Tt(t,e=!1){return t=t.__v_raw,!e&&ft(ie(t),0,rt),Reflect.get(t,"size",t)}function Pt(t){t=ie(t);const e=ie(this);return At(e).has.call(e,t)||(e.add(t),ht(e,"add",t,t)),this}function $t(t,e){e=ie(e);const n=ie(this),{has:r,get:o}=At(n);let s=r.call(n,t);s||(t=ie(t),s=r.call(n,t));const i=o.call(n,t);return n.set(t,e),s?U(e,i)&&ht(n,"set",t,e):ht(n,"add",t,e),this}function Mt(t){const e=ie(this),{has:n,get:r}=At(e);let o=n.call(e,t);o||(t=ie(t),o=n.call(e,t)),r&&r.call(e,t);const s=e.delete(t);return o&&ht(e,"delete",t,void 0),s}function Rt(){const t=ie(this),e=0!==t.size,n=t.clear();return e&&ht(t,"clear",void 0,void 0),n}function jt(t,e){return function(n,r){const o=this,s=o.__v_raw,i=ie(s),a=e?Ct:t?ce:le;return!t&&ft(i,0,rt),s.forEach(((t,e)=>n.call(r,a(t),a(e),o)))}}function Vt(t,e,n){return function(...r){const o=this.__v_raw,s=ie(o),i=w(s),a="entries"===t||t===Symbol.iterator&&i,l="keys"===t&&i,c=o[t](...r),u=n?Ct:e?ce:le;return!e&&ft(s,0,l?ot:rt),{next(){const{value:t,done:e}=c.next();return e?{value:t,done:e}:{value:a?[u(t[0]),u(t[1])]:u(t),done:e}},[Symbol.iterator](){return this}}}}function Lt(t){return function(...e){return"delete"!==t&&this}}function Ft(){const t={get(t){return Et(this,t)},get size(){return Tt(this)},has:Ot,add:Pt,set:$t,delete:Mt,clear:Rt,forEach:jt(!1,!1)},e={get(t){return Et(this,t,!1,!0)},get size(){return Tt(this)},has:Ot,add:Pt,set:$t,delete:Mt,clear:Rt,forEach:jt(!1,!0)},n={get(t){return Et(this,t,!0)},get size(){return Tt(this,!0)},has(t){return Ot.call(this,t,!0)},add:Lt("add"),set:Lt("set"),delete:Lt("delete"),clear:Lt("clear"),forEach:jt(!0,!1)},r={get(t){return Et(this,t,!0,!0)},get size(){return Tt(this,!0)},has(t){return Ot.call(this,t,!0)},add:Lt("add"),set:Lt("set"),delete:Lt("delete"),clear:Lt("clear"),forEach:jt(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((o=>{t[o]=Vt(o,!1,!1),n[o]=Vt(o,!0,!1),e[o]=Vt(o,!1,!0),r[o]=Vt(o,!0,!0)})),[t,n,e,r]}const[Ut,Bt,Kt,Ht]=Ft();function Wt(t,e){const n=e?t?Ht:Kt:t?Bt:Ut;return(e,r,o)=>"__v_isReactive"===r?!t:"__v_isReadonly"===r?t:"__v_raw"===r?e:Reflect.get(_(n,r)&&r in e?n:e,r,o)}const qt={get:Wt(!1,!1)},zt={get:Wt(!1,!0)},Xt={get:Wt(!0,!1)},Yt=new WeakMap,Gt=new WeakMap,Jt=new WeakMap,Zt=new WeakMap;function Qt(t){return t.__v_skip||!Object.isExtensible(t)?0:function(t){switch(t){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((t=>E(t).slice(8,-1))(t))}function te(t){return t&&t.__v_isReadonly?t:ne(t,!1,Dt,qt,Yt)}function ee(t){return ne(t,!0,St,Xt,Jt)}function ne(t,e,n,r,o){if(!N(t))return t;if(t.__v_raw&&(!e||!t.__v_isReactive))return t;const s=o.get(t);if(s)return s;const i=Qt(t);if(0===i)return t;const a=new Proxy(t,2===i?r:n);return o.set(t,a),a}function re(t){return oe(t)?re(t.__v_raw):!(!t||!t.__v_isReactive)}function oe(t){return!(!t||!t.__v_isReadonly)}function se(t){return re(t)||oe(t)}function ie(t){const e=t&&t.__v_raw;return e?ie(e):t}function ae(t){return K(t,"__v_skip",!0),t}const le=t=>N(t)?te(t):t,ce=t=>N(t)?ee(t):t;function ue(t){return Boolean(t&&!0===t.__v_isRef)}const fe={get:(t,e,n)=>{return ue(r=Reflect.get(t,e,n))?r.value:r;var r},set:(t,e,n,r)=>{const o=t[e];return ue(o)&&!ue(n)?(o.value=n,!0):Reflect.set(t,e,n,r)}};function pe(t){return re(t)?t:new Proxy(t,fe)}class de{constructor(t,e,n){this._setter=e,this.dep=void 0,this._dirty=!0,this.__v_isRef=!0,this.effect=new st(t,(()=>{var t;this._dirty||(this._dirty=!0,(t=ie(t=this)).dep&&gt(t.dep))})),this.__v_isReadonly=n}get value(){const t=ie(this);var e;return e=t,pt()&&((e=ie(e)).dep||(e.dep=Y()),dt(e.dep)),t._dirty&&(t._dirty=!1,t._value=t.effect.run()),t._value}set value(t){this._setter(t)}}function he(t,e){let n,r;const o=k(t);o?(n=t,r=p):(n=t.get,r=t.set);return new de(n,r,o||!r)}function ge(t,e,...n){const r=t.vnode.props||u;let o=n;const s=e.startsWith("update:"),i=s&&e.slice(7);if(i&&i in r){const t=`${"modelValue"===i?"model":i}Modifiers`,{number:e,trim:s}=r[t]||u;s?o=n.map((t=>t.trim())):e&&(o=n.map(H))}let a,l=r[a=F(e)]||r[a=F(R(e))];!l&&s&&(l=r[a=F(V(e))]),l&&vr(l,t,6,o);const c=r[a+"Once"];if(c){if(t.emitted){if(t.emitted[a])return}else t.emitted={};t.emitted[a]=!0,vr(c,t,6,o)}}function ve(t,e,n=!1){const r=e.emitsCache,o=r.get(t);if(void 0!==o)return o;const s=t.emits;let i={},a=!1;if(!k(t)){const r=t=>{const n=ve(t,e,!0);n&&(a=!0,m(i,n))};!n&&e.mixins.length&&e.mixins.forEach(r),t.extends&&r(t.extends),t.mixins&&t.mixins.forEach(r)}return s||a?(x(s)?s.forEach((t=>i[t]=null)):m(i,s),r.set(t,i),i):(r.set(t,null),null)}function me(t,e){return!(!t||!g(e))&&(e=e.slice(2).replace(/Once$/,""),_(t,e[0].toLowerCase()+e.slice(1))||_(t,V(e))||_(t,e))}Promise.resolve();let ye=null,be=null;function _e(t){const e=ye;return ye=t,be=t&&t.type.__scopeId||null,e}function xe(t){const{type:e,vnode:n,proxy:r,withProxy:o,props:s,propsOptions:[i],slots:a,attrs:l,emit:c,render:u,renderCache:f,data:p,setupState:d,ctx:h,inheritAttrs:g}=t;let m,y;const b=_e(t);try{if(4&n.shapeFlag){const t=o||r;m=Yn(u.call(t,t,f,s,d,p,h)),y=l}else{const t=e;0,m=Yn(t.length>1?t(s,{attrs:l,slots:a,emit:c}):t(s,null)),y=e.props?l:we(l)}}catch(x){On.length=0,mr(x,t,1),m=Wn(An)}let _=m;if(y&&!1!==g){const t=Object.keys(y),{shapeFlag:e}=_;t.length&&7&e&&(i&&t.some(v)&&(y=Ie(y,i)),_=qn(_,y))}return n.dirs&&(_.dirs=_.dirs?_.dirs.concat(n.dirs):n.dirs),n.transition&&(_.transition=n.transition),m=_,_e(b),m}const we=t=>{let e;for(const n in t)("class"===n||"style"===n||g(n))&&((e||(e={}))[n]=t[n]);return e},Ie=(t,e)=>{const n={};for(const r in t)v(r)&&r.slice(9)in e||(n[r]=t[r]);return n};function ke(t,e,n){const r=Object.keys(e);if(r.length!==Object.keys(t).length)return!0;for(let o=0;o<r.length;o++){const s=r[o];if(e[s]!==t[s]&&!me(n,s))return!0}return!1}function De(t,e,n=!1){const r=ar||ye;if(r){const o=null==r.parent?r.vnode.appContext&&r.vnode.appContext.provides:r.parent.provides;if(o&&t in o)return o[t];if(arguments.length>1)return n&&k(e)?e.call(r.proxy):e}}const Se=t=>!!t.type.__asyncLoader,Ne=t=>t.type.__isKeepAlive;function Ce(t,e){Ee(t,"a",e)}function Ae(t,e){Ee(t,"da",e)}function Ee(t,e,n=ar){const r=t.__wdc||(t.__wdc=()=>{let e=n;for(;e;){if(e.isDeactivated)return;e=e.parent}return t()});if(Te(e,r,n),n){let t=n.parent;for(;t&&t.parent;)Ne(t.parent.vnode)&&Oe(r,e,n,t),t=t.parent}}function Oe(t,e,n,r){const o=Te(e,t,r,!0);Le((()=>{y(r[e],o)}),n)}function Te(t,e,n=ar,r=!1){if(n){const o=n[t]||(n[t]=[]),s=e.__weh||(e.__weh=(...r)=>{if(n.isUnmounted)return;ct(),lr(n);const o=vr(e,n,t,r);return cr(),ut(),o});return r?o.unshift(s):o.push(s),s}}const Pe=t=>(e,n=ar)=>(!fr||"sp"===t)&&Te(t,e,n),$e=Pe("bm"),Me=Pe("m"),Re=Pe("bu"),je=Pe("u"),Ve=Pe("bum"),Le=Pe("um"),Fe=Pe("sp"),Ue=Pe("rtg"),Be=Pe("rtc");function Ke(t,e=ar){Te("ec",t,e)}let He=!0;function We(t){const e=Xe(t),n=t.proxy,r=t.ctx;He=!1,e.beforeCreate&&qe(e.beforeCreate,t,"bc");const{data:o,computed:s,methods:i,watch:a,provide:l,inject:c,created:u,beforeMount:f,mounted:d,beforeUpdate:h,updated:g,activated:v,deactivated:m,beforeDestroy:y,beforeUnmount:b,destroyed:_,unmounted:w,render:I,renderTracked:D,renderTriggered:S,errorCaptured:C,serverPrefetch:A,expose:E,inheritAttrs:O,components:T,directives:P,filters:$}=e;if(c&&function(t,e,n=p,r=!1){x(t)&&(t=Ze(t));for(const o in t){const n=t[o];let s;s=N(n)?"default"in n?De(n.from||o,n.default,!0):De(n.from||o):De(n),ue(s)&&r?Object.defineProperty(e,o,{enumerable:!0,configurable:!0,get:()=>s.value,set:t=>s.value=t}):e[o]=s}}(c,r,null,t.appContext.config.unwrapInjectedRef),i)for(const p in i){const t=i[p];k(t)&&(r[p]=t.bind(n))}if(o){const e=o.call(n,n);N(e)&&(t.data=te(e))}if(He=!0,s)for(const x in s){const t=s[x],e=he({get:k(t)?t.bind(n,n):k(t.get)?t.get.bind(n,n):p,set:!k(t)&&k(t.set)?t.set.bind(n):p});Object.defineProperty(r,x,{enumerable:!0,configurable:!0,get:()=>e.value,set:t=>e.value=t})}if(a)for(const p in a)ze(a[p],r,n,p);if(l){const t=k(l)?l.call(n):l;Reflect.ownKeys(t).forEach((e=>{!function(t,e){if(ar){let n=ar.provides;const r=ar.parent&&ar.parent.provides;r===n&&(n=ar.provides=Object.create(r)),n[t]=e}}(e,t[e])}))}function M(t,e){x(e)?e.forEach((e=>t(e.bind(n)))):e&&t(e.bind(n))}if(u&&qe(u,t,"c"),M($e,f),M(Me,d),M(Re,h),M(je,g),M(Ce,v),M(Ae,m),M(Ke,C),M(Be,D),M(Ue,S),M(Ve,b),M(Le,w),M(Fe,A),x(E))if(E.length){const e=t.exposed||(t.exposed={});E.forEach((t=>{Object.defineProperty(e,t,{get:()=>n[t],set:e=>n[t]=e})}))}else t.exposed||(t.exposed={});I&&t.render===p&&(t.render=I),null!=O&&(t.inheritAttrs=O),T&&(t.components=T),P&&(t.directives=P)}function qe(t,e,n){vr(x(t)?t.map((t=>t.bind(e.proxy))):t.bind(e.proxy),e,n)}function ze(t,e,n,r){const o=r.includes(".")?Kr(n,r):()=>n[r];if(D(t)){const n=e[t];k(n)&&Fr(o,n)}else if(k(t))Fr(o,t.bind(n));else if(N(t))if(x(t))t.forEach((t=>ze(t,e,n,r)));else{const r=k(t.handler)?t.handler.bind(n):e[t.handler];k(r)&&Fr(o,r,t)}}function Xe(t){const e=t.type,{mixins:n,extends:r}=e,{mixins:o,optionsCache:s,config:{optionMergeStrategies:i}}=t.appContext,a=s.get(e);let l;return a?l=a:o.length||n||r?(l={},o.length&&o.forEach((t=>Ye(l,t,i,!0))),Ye(l,e,i)):l=e,s.set(e,l),l}function Ye(t,e,n,r=!1){const{mixins:o,extends:s}=e;s&&Ye(t,s,n,!0),o&&o.forEach((e=>Ye(t,e,n,!0)));for(const i in e)if(r&&"expose"===i);else{const r=Ge[i]||n&&n[i];t[i]=r?r(t[i],e[i]):e[i]}return t}const Ge={data:Je,props:tn,emits:tn,methods:tn,computed:tn,beforeCreate:Qe,created:Qe,beforeMount:Qe,mounted:Qe,beforeUpdate:Qe,updated:Qe,beforeDestroy:Qe,beforeUnmount:Qe,destroyed:Qe,unmounted:Qe,activated:Qe,deactivated:Qe,errorCaptured:Qe,serverPrefetch:Qe,components:tn,directives:tn,watch:function(t,e){if(!t)return e;if(!e)return t;const n=m(Object.create(null),t);for(const r in e)n[r]=Qe(t[r],e[r]);return n},provide:Je,inject:function(t,e){return tn(Ze(t),Ze(e))}};function Je(t,e){return e?t?function(){return m(k(t)?t.call(this,this):t,k(e)?e.call(this,this):e)}:e:t}function Ze(t){if(x(t)){const e={};for(let n=0;n<t.length;n++)e[t[n]]=t[n];return e}return t}function Qe(t,e){return t?[...new Set([].concat(t,e))]:e}function tn(t,e){return t?m(m(Object.create(null),t),e):e}function en(t,e,n,r=!1){const o={},s={};K(s,Un,1),t.propsDefaults=Object.create(null),nn(t,e,o,s);for(const i in t.propsOptions[0])i in o||(o[i]=void 0);n?t.props=r?o:ne(o,!1,Nt,zt,Gt):t.type.props?t.props=o:t.props=s,t.attrs=s}function nn(t,e,n,r){const[o,s]=t.propsOptions;let i,a=!1;if(e)for(let l in e){if(P(l))continue;const c=e[l];let u;o&&_(o,u=R(l))?s&&s.includes(u)?(i||(i={}))[u]=c:n[u]=c:me(t.emitsOptions,l)||l in r&&c===r[l]||(r[l]=c,a=!0)}if(s){const e=ie(n),r=i||u;for(let i=0;i<s.length;i++){const a=s[i];n[a]=rn(o,e,a,r[a],t,!_(r,a))}}return a}function rn(t,e,n,r,o,s){const i=t[n];if(null!=i){const t=_(i,"default");if(t&&void 0===r){const t=i.default;if(i.type!==Function&&k(t)){const{propsDefaults:s}=o;n in s?r=s[n]:(lr(o),r=s[n]=t.call(null,e),cr())}else r=t}i[0]&&(s&&!t?r=!1:!i[1]||""!==r&&r!==V(n)||(r=!0))}return r}function on(t,e,n=!1){const r=e.propsCache,o=r.get(t);if(o)return o;const s=t.props,i={},a=[];let l=!1;if(!k(t)){const r=t=>{l=!0;const[n,r]=on(t,e,!0);m(i,n),r&&a.push(...r)};!n&&e.mixins.length&&e.mixins.forEach(r),t.extends&&r(t.extends),t.mixins&&t.mixins.forEach(r)}if(!s&&!l)return r.set(t,f),f;if(x(s))for(let f=0;f<s.length;f++){const t=R(s[f]);sn(t)&&(i[t]=u)}else if(s)for(const u in s){const t=R(u);if(sn(t)){const e=s[u],n=i[t]=x(e)||k(e)?{type:e}:e;if(n){const e=cn(Boolean,n.type),r=cn(String,n.type);n[0]=e>-1,n[1]=r<0||e<r,(e>-1||_(n,"default"))&&a.push(t)}}}const c=[i,a];return r.set(t,c),c}function sn(t){return"$"!==t[0]}function an(t){const e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:null===t?"null":""}function ln(t,e){return an(t)===an(e)}function cn(t,e){return x(e)?e.findIndex((e=>ln(e,t))):k(e)&&ln(e,t)?0:-1}const un=t=>"_"===t[0]||"$stable"===t,fn=t=>x(t)?t.map(Yn):[Yn(t)],pn=(t,e,n)=>{const r=function(t,e=ye,n){if(!e)return t;if(t._n)return t;const r=(...n)=>{r._d&&Mn(-1);const o=_e(e),s=t(...n);return _e(o),r._d&&Mn(1),s};return r._n=!0,r._c=!0,r._d=!0,r}(((...t)=>fn(e(...t))),n);return r._c=!1,r},dn=(t,e,n)=>{const r=t._ctx;for(const o in t){if(un(o))continue;const n=t[o];if(k(n))e[o]=pn(0,n,r);else if(null!=n){const t=fn(n);e[o]=()=>t}}},hn=(t,e)=>{const n=fn(e);t.slots.default=()=>n};function gn(t,e,n,r){const o=t.dirs,s=e&&e.dirs;for(let i=0;i<o.length;i++){const a=o[i];s&&(a.oldValue=s[i].value);let l=a.dir[r];l&&(ct(),vr(l,n,8,[t.el,a,t,e]),ut())}}function vn(){return{app:null,config:{isNativeTag:d,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let mn=0;function yn(t,e){return function(n,r=null){null==r||N(r)||(r=null);const o=vn(),s=new Set;let i=!1;const a=o.app={_uid:mn++,_component:n,_props:r,_container:null,_context:o,_instance:null,version:Wr,get config(){return o.config},set config(t){},use:(t,...e)=>(s.has(t)||(t&&k(t.install)?(s.add(t),t.install(a,...e)):k(t)&&(s.add(t),t(a,...e))),a),mixin:t=>(o.mixins.includes(t)||o.mixins.push(t),a),component:(t,e)=>e?(o.components[t]=e,a):o.components[t],directive:(t,e)=>e?(o.directives[t]=e,a):o.directives[t],mount(s,l,c){if(!i){const u=Wn(n,r);return u.appContext=o,l&&e?e(u,s):t(u,s,c),i=!0,a._container=s,s.__vue_app__=a,hr(u.component)||u.component.proxy}},unmount(){i&&(t(null,a._container),delete a._container.__vue_app__)},provide:(t,e)=>(o.provides[t]=e,a)};return a}}function bn(t,e,n,r,o=!1){if(x(t))return void t.forEach(((t,s)=>bn(t,e&&(x(e)?e[s]:e),n,r,o)));if(Se(r)&&!o)return;const s=4&r.shapeFlag?hr(r.component)||r.component.proxy:r.el,i=o?null:s,{i:a,r:l}=t,c=e&&e.r,f=a.refs===u?a.refs={}:a.refs,p=a.setupState;if(null!=c&&c!==l&&(D(c)?(f[c]=null,_(p,c)&&(p[c]=null)):ue(c)&&(c.value=null)),k(l))gr(l,a,12,[i,f]);else{const e=D(l),r=ue(l);if(e||r){const r=()=>{if(t.f){const n=e?f[l]:l.value;o?x(n)&&y(n,s):x(n)?n.includes(s)||n.push(s):e?f[l]=[s]:(l.value=[s],t.k&&(f[t.k]=l.value))}else e?(f[l]=i,_(p,l)&&(p[l]=i)):ue(l)&&(l.value=i,t.k&&(f[t.k]=i))};i?(r.id=-1,_n(r,n)):r()}}}const _n=function(t,e){e&&e.pendingBranch?x(t)?e.effects.push(...t):e.effects.push(t):$r(t,Sr,Dr,Nr)};function xn(t){return function(t,e){(W||(W="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:n,remove:r,patchProp:o,createElement:s,createText:i,createComment:a,setText:l,setElementText:c,parentNode:d,nextSibling:h,setScopeId:g=p,cloneNode:v,insertStaticContent:y}=t,b=(t,e,n,r=null,o=null,s=null,i=!1,a=null,l=!!e.dynamicChildren)=>{if(t===e)return;t&&!Fn(t,e)&&(r=nt(t),J(t,o,s,!0),t=null),-2===e.patchFlag&&(l=!1,e.dynamicChildren=null);const{type:c,ref:u,shapeFlag:f}=e;switch(c){case Cn:x(t,e,n,r);break;case An:w(t,e,n,r);break;case En:null==t&&I(e,n,r,i);break;case Nn:M(t,e,n,r,o,s,i,a,l);break;default:1&f?S(t,e,n,r,o,s,i,a,l):6&f?j(t,e,n,r,o,s,i,a,l):(64&f||128&f)&&c.process(t,e,n,r,o,s,i,a,l,ot)}null!=u&&o&&bn(u,t&&t.ref,s,e||t,!e)},x=(t,e,r,o)=>{if(null==t)n(e.el=i(e.children),r,o);else{const n=e.el=t.el;e.children!==t.children&&l(n,e.children)}},w=(t,e,r,o)=>{null==t?n(e.el=a(e.children||""),r,o):e.el=t.el},I=(t,e,n,r)=>{[t.el,t.anchor]=y(t.children,e,n,r)},k=({el:t,anchor:e},r,o)=>{let s;for(;t&&t!==e;)s=h(t),n(t,r,o),t=s;n(e,r,o)},D=({el:t,anchor:e})=>{let n;for(;t&&t!==e;)n=h(t),r(t),t=n;r(e)},S=(t,e,n,r,o,s,i,a,l)=>{i=i||"svg"===e.type,null==t?N(e,n,r,o,s,i,a,l):O(t,e,o,s,i,a,l)},N=(t,e,r,i,a,l,u,f)=>{let p,d;const{type:h,props:g,shapeFlag:m,transition:y,patchFlag:b,dirs:_}=t;if(t.el&&void 0!==v&&-1===b)p=t.el=v(t.el);else{if(p=t.el=s(t.type,l,g&&g.is,g),8&m?c(p,t.children):16&m&&E(t.children,p,null,i,a,l&&"foreignObject"!==h,u,f),_&&gn(t,null,i,"created"),g){for(const e in g)"value"===e||P(e)||o(p,e,null,g[e],l,t.children,i,a,et);"value"in g&&o(p,"value",null,g.value),(d=g.onVnodeBeforeMount)&&Zn(d,i,t)}A(p,t,t.scopeId,u,i)}_&&gn(t,null,i,"beforeMount");const x=(!a||a&&!a.pendingBranch)&&y&&!y.persisted;x&&y.beforeEnter(p),n(p,e,r),((d=g&&g.onVnodeMounted)||x||_)&&_n((()=>{d&&Zn(d,i,t),x&&y.enter(p),_&&gn(t,null,i,"mounted")}),a)},A=(t,e,n,r,o)=>{if(n&&g(t,n),r)for(let s=0;s<r.length;s++)g(t,r[s]);if(o){if(e===o.subTree){const e=o.vnode;A(t,e,e.scopeId,e.slotScopeIds,o.parent)}}},E=(t,e,n,r,o,s,i,a,l=0)=>{for(let c=l;c<t.length;c++){const l=t[c]=a?Gn(t[c]):Yn(t[c]);b(null,l,e,n,r,o,s,i,a)}},O=(t,e,n,r,s,i,a)=>{const l=e.el=t.el;let{patchFlag:f,dynamicChildren:p,dirs:d}=e;f|=16&t.patchFlag;const h=t.props||u,g=e.props||u;let v;n&&wn(n,!1),(v=g.onVnodeBeforeUpdate)&&Zn(v,n,e,t),d&&gn(e,t,n,"beforeUpdate"),n&&wn(n,!0);const m=s&&"foreignObject"!==e.type;if(p?T(t.dynamicChildren,p,l,n,r,m,i):a||q(t,e,l,null,n,r,m,i,!1),f>0){if(16&f)$(l,e,h,g,n,r,s);else if(2&f&&h.class!==g.class&&o(l,"class",null,g.class,s),4&f&&o(l,"style",h.style,g.style,s),8&f){const i=e.dynamicProps;for(let e=0;e<i.length;e++){const a=i[e],c=h[a],u=g[a];u===c&&"value"!==a||o(l,a,c,u,s,t.children,n,r,et)}}1&f&&t.children!==e.children&&c(l,e.children)}else a||null!=p||$(l,e,h,g,n,r,s);((v=g.onVnodeUpdated)||d)&&_n((()=>{v&&Zn(v,n,e,t),d&&gn(e,t,n,"updated")}),r)},T=(t,e,n,r,o,s,i)=>{for(let a=0;a<e.length;a++){const l=t[a],c=e[a],u=l.el&&(l.type===Nn||!Fn(l,c)||70&l.shapeFlag)?d(l.el):n;b(l,c,u,null,r,o,s,i,!0)}},$=(t,e,n,r,s,i,a)=>{if(n!==r){for(const l in r){if(P(l))continue;const c=r[l],u=n[l];c!==u&&"value"!==l&&o(t,l,u,c,a,e.children,s,i,et)}if(n!==u)for(const l in n)P(l)||l in r||o(t,l,n[l],null,a,e.children,s,i,et);"value"in r&&o(t,"value",n.value,r.value)}},M=(t,e,r,o,s,a,l,c,u)=>{const f=e.el=t?t.el:i(""),p=e.anchor=t?t.anchor:i("");let{patchFlag:d,dynamicChildren:h,slotScopeIds:g}=e;g&&(c=c?c.concat(g):g),null==t?(n(f,r,o),n(p,r,o),E(e.children,r,p,s,a,l,c,u)):d>0&&64&d&&h&&t.dynamicChildren?(T(t.dynamicChildren,h,r,s,a,l,c),(null!=e.key||s&&e===s.subTree)&&In(t,e,!0)):q(t,e,r,p,s,a,l,c,u)},j=(t,e,n,r,o,s,i,a,l)=>{e.slotScopeIds=a,null==t?512&e.shapeFlag?o.ctx.activate(e,n,r,i,l):L(e,n,r,o,s,i,l):F(t,e,l)},L=(t,e,n,r,o,s,i)=>{const a=t.component=function(t,e,n){const r=t.type,o=(e?e.appContext:t.appContext)||sr,s={uid:ir++,vnode:t,type:r,parent:e,appContext:o,root:null,next:null,subTree:null,effect:null,update:null,scope:new X(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:e?e.provides:Object.create(o.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:on(r,o),emitsOptions:ve(r,o),emit:null,emitted:null,propsDefaults:u,inheritAttrs:r.inheritAttrs,ctx:u,data:u,props:u,attrs:u,slots:u,refs:u,setupState:u,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};s.ctx={_:s},s.root=e?e.root:s,s.emit=ge.bind(null,s),t.ce&&t.ce(s);return s}(t,r,o);if(Ne(t)&&(a.ctx.renderer=ot),function(t,e=!1){fr=e;const{props:n,children:r}=t.vnode,o=ur(t);en(t,n,o,e),((t,e)=>{if(32&t.vnode.shapeFlag){const n=e._;n?(t.slots=ie(e),K(e,"_",n)):dn(e,t.slots={})}else t.slots={},e&&hn(t,e);K(t.slots,Un,1)})(t,r);const s=o?function(t,e){const n=t.type;t.accessCache=Object.create(null),t.proxy=ae(new Proxy(t.ctx,or));const{setup:r}=n;if(r){const n=t.setupContext=r.length>1?function(t){const e=e=>{t.exposed=e||{}};let n;return{get attrs(){return n||(n=function(t){return new Proxy(t.attrs,{get:(e,n)=>(ft(t,0,"$attrs"),e[n])})}(t))},slots:t.slots,emit:t.emit,expose:e}}(t):null;lr(t),ct();const o=gr(r,t,0,[t.props,n]);if(ut(),cr(),C(o)){if(o.then(cr,cr),e)return o.then((n=>{pr(t,n,e)})).catch((e=>{mr(e,t,0)}));t.asyncDep=o}else pr(t,o,e)}else dr(t,e)}(t,e):void 0;fr=!1}(a),a.asyncDep){if(o&&o.registerDep(a,U),!t.el){const t=a.subTree=Wn(An);w(null,t,e,n)}}else U(a,t,e,n,o,s,i)},F=(t,e,n)=>{const r=e.component=t.component;if(function(t,e,n){const{props:r,children:o,component:s}=t,{props:i,children:a,patchFlag:l}=e,c=s.emitsOptions;if(e.dirs||e.transition)return!0;if(!(n&&l>=0))return!(!o&&!a||a&&a.$stable)||r!==i&&(r?!i||ke(r,i,c):!!i);if(1024&l)return!0;if(16&l)return r?ke(r,i,c):!!i;if(8&l){const t=e.dynamicProps;for(let e=0;e<t.length;e++){const n=t[e];if(i[n]!==r[n]&&!me(c,n))return!0}}return!1}(t,e,n)){if(r.asyncDep&&!r.asyncResolved)return void H(r,e,n);r.next=e,function(t){const e=_r.indexOf(t);e>xr&&_r.splice(e,1)}(r.update),r.update()}else e.component=t.component,e.el=t.el,r.vnode=e},U=(t,e,n,r,o,s,i)=>{const a=()=>{if(t.isMounted){let e,{next:n,bu:r,u:a,parent:l,vnode:c}=t,u=n;wn(t,!1),n?(n.el=c.el,H(t,n,i)):n=c,r&&B(r),(e=n.props&&n.props.onVnodeBeforeUpdate)&&Zn(e,l,n,c),wn(t,!0);const f=xe(t),p=t.subTree;t.subTree=f,b(p,f,d(p.el),nt(p),t,o,s),n.el=f.el,null===u&&function({vnode:t,parent:e},n){for(;e&&e.subTree===t;)(t=e.vnode).el=n,e=e.parent}(t,f.el),a&&_n(a,o),(e=n.props&&n.props.onVnodeUpdated)&&_n((()=>Zn(e,l,n,c)),o)}else{let i;const{el:a,props:l}=e,{bm:c,m:u,parent:f}=t,p=Se(e);if(wn(t,!1),c&&B(c),!p&&(i=l&&l.onVnodeBeforeMount)&&Zn(i,f,e),wn(t,!0),a&&at){const n=()=>{t.subTree=xe(t),at(a,t.subTree,t,o,null)};p?e.type.__asyncLoader().then((()=>!t.isUnmounted&&n())):n()}else{const i=t.subTree=xe(t);b(null,i,n,r,t,o,s),e.el=i.el}if(u&&_n(u,o),!p&&(i=l&&l.onVnodeMounted)){const t=e;_n((()=>Zn(i,f,t)),o)}256&e.shapeFlag&&t.a&&_n(t.a,o),t.isMounted=!0,e=n=r=null}},l=t.effect=new st(a,(()=>Tr(t.update)),t.scope),c=t.update=l.run.bind(l);c.id=t.uid,wn(t,!0),c()},H=(t,e,n)=>{e.component=t;const r=t.vnode.props;t.vnode=e,t.next=null,function(t,e,n,r){const{props:o,attrs:s,vnode:{patchFlag:i}}=t,a=ie(o),[l]=t.propsOptions;let c=!1;if(!(r||i>0)||16&i){let r;nn(t,e,o,s)&&(c=!0);for(const s in a)e&&(_(e,s)||(r=V(s))!==s&&_(e,r))||(l?!n||void 0===n[s]&&void 0===n[r]||(o[s]=rn(l,a,s,void 0,t,!0)):delete o[s]);if(s!==a)for(const t in s)e&&_(e,t)||(delete s[t],c=!0)}else if(8&i){const n=t.vnode.dynamicProps;for(let r=0;r<n.length;r++){let i=n[r];const u=e[i];if(l)if(_(s,i))u!==s[i]&&(s[i]=u,c=!0);else{const e=R(i);o[e]=rn(l,a,e,u,t,!1)}else u!==s[i]&&(s[i]=u,c=!0)}}c&&ht(t,"set","$attrs")}(t,e.props,r,n),((t,e,n)=>{const{vnode:r,slots:o}=t;let s=!0,i=u;if(32&r.shapeFlag){const t=e._;t?n&&1===t?s=!1:(m(o,e),n||1!==t||delete o._):(s=!e.$stable,dn(e,o)),i=e}else e&&(hn(t,e),i={default:1});if(s)for(const a in o)un(a)||a in i||delete o[a]})(t,e.children,n),ct(),Mr(void 0,t.update),ut()},q=(t,e,n,r,o,s,i,a,l=!1)=>{const u=t&&t.children,f=t?t.shapeFlag:0,p=e.children,{patchFlag:d,shapeFlag:h}=e;if(d>0){if(128&d)return void Y(u,p,n,r,o,s,i,a,l);if(256&d)return void z(u,p,n,r,o,s,i,a,l)}8&h?(16&f&&et(u,o,s),p!==u&&c(n,p)):16&f?16&h?Y(u,p,n,r,o,s,i,a,l):et(u,o,s,!0):(8&f&&c(n,""),16&h&&E(p,n,r,o,s,i,a,l))},z=(t,e,n,r,o,s,i,a,l)=>{e=e||f;const c=(t=t||f).length,u=e.length,p=Math.min(c,u);let d;for(d=0;d<p;d++){const r=e[d]=l?Gn(e[d]):Yn(e[d]);b(t[d],r,n,null,o,s,i,a,l)}c>u?et(t,o,s,!0,!1,p):E(e,n,r,o,s,i,a,l,p)},Y=(t,e,n,r,o,s,i,a,l)=>{let c=0;const u=e.length;let p=t.length-1,d=u-1;for(;c<=p&&c<=d;){const r=t[c],u=e[c]=l?Gn(e[c]):Yn(e[c]);if(!Fn(r,u))break;b(r,u,n,null,o,s,i,a,l),c++}for(;c<=p&&c<=d;){const r=t[p],c=e[d]=l?Gn(e[d]):Yn(e[d]);if(!Fn(r,c))break;b(r,c,n,null,o,s,i,a,l),p--,d--}if(c>p){if(c<=d){const t=d+1,f=t<u?e[t].el:r;for(;c<=d;)b(null,e[c]=l?Gn(e[c]):Yn(e[c]),n,f,o,s,i,a,l),c++}}else if(c>d)for(;c<=p;)J(t[c],o,s,!0),c++;else{const h=c,g=c,v=new Map;for(c=g;c<=d;c++){const t=e[c]=l?Gn(e[c]):Yn(e[c]);null!=t.key&&v.set(t.key,c)}let m,y=0;const _=d-g+1;let x=!1,w=0;const I=new Array(_);for(c=0;c<_;c++)I[c]=0;for(c=h;c<=p;c++){const r=t[c];if(y>=_){J(r,o,s,!0);continue}let u;if(null!=r.key)u=v.get(r.key);else for(m=g;m<=d;m++)if(0===I[m-g]&&Fn(r,e[m])){u=m;break}void 0===u?J(r,o,s,!0):(I[u-g]=c+1,u>=w?w=u:x=!0,b(r,e[u],n,null,o,s,i,a,l),y++)}const k=x?function(t){const e=t.slice(),n=[0];let r,o,s,i,a;const l=t.length;for(r=0;r<l;r++){const l=t[r];if(0!==l){if(o=n[n.length-1],t[o]<l){e[r]=o,n.push(r);continue}for(s=0,i=n.length-1;s<i;)a=s+i>>1,t[n[a]]<l?s=a+1:i=a;l<t[n[s]]&&(s>0&&(e[r]=n[s-1]),n[s]=r)}}s=n.length,i=n[s-1];for(;s-- >0;)n[s]=i,i=e[i];return n}(I):f;for(m=k.length-1,c=_-1;c>=0;c--){const t=g+c,f=e[t],p=t+1<u?e[t+1].el:r;0===I[c]?b(null,f,n,p,o,s,i,a,l):x&&(m<0||c!==k[m]?G(f,n,p,2):m--)}}},G=(t,e,r,o,s=null)=>{const{el:i,type:a,transition:l,children:c,shapeFlag:u}=t;if(6&u)return void G(t.component.subTree,e,r,o);if(128&u)return void t.suspense.move(e,r,o);if(64&u)return void a.move(t,e,r,ot);if(a===Nn){n(i,e,r);for(let t=0;t<c.length;t++)G(c[t],e,r,o);return void n(t.anchor,e,r)}if(a===En)return void k(t,e,r);if(2!==o&&1&u&&l)if(0===o)l.beforeEnter(i),n(i,e,r),_n((()=>l.enter(i)),s);else{const{leave:t,delayLeave:o,afterLeave:s}=l,a=()=>n(i,e,r),c=()=>{t(i,(()=>{a(),s&&s()}))};o?o(i,a,c):c()}else n(i,e,r)},J=(t,e,n,r=!1,o=!1)=>{const{type:s,props:i,ref:a,children:l,dynamicChildren:c,shapeFlag:u,patchFlag:f,dirs:p}=t;if(null!=a&&bn(a,null,n,t,!0),256&u)return void e.ctx.deactivate(t);const d=1&u&&p,h=!Se(t);let g;if(h&&(g=i&&i.onVnodeBeforeUnmount)&&Zn(g,e,t),6&u)tt(t.component,n,r);else{if(128&u)return void t.suspense.unmount(n,r);d&&gn(t,null,e,"beforeUnmount"),64&u?t.type.remove(t,e,n,o,ot,r):c&&(s!==Nn||f>0&&64&f)?et(c,e,n,!1,!0):(s===Nn&&384&f||!o&&16&u)&&et(l,e,n),r&&Z(t)}(h&&(g=i&&i.onVnodeUnmounted)||d)&&_n((()=>{g&&Zn(g,e,t),d&&gn(t,null,e,"unmounted")}),n)},Z=t=>{const{type:e,el:n,anchor:o,transition:s}=t;if(e===Nn)return void Q(n,o);if(e===En)return void D(t);const i=()=>{r(n),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&t.shapeFlag&&s&&!s.persisted){const{leave:e,delayLeave:r}=s,o=()=>e(n,i);r?r(t.el,i,o):o()}else i()},Q=(t,e)=>{let n;for(;t!==e;)n=h(t),r(t),t=n;r(e)},tt=(t,e,n)=>{const{bum:r,scope:o,update:s,subTree:i,um:a}=t;r&&B(r),o.stop(),s&&(s.active=!1,J(i,t,e,n)),a&&_n(a,e),_n((()=>{t.isUnmounted=!0}),e),e&&e.pendingBranch&&!e.isUnmounted&&t.asyncDep&&!t.asyncResolved&&t.suspenseId===e.pendingId&&(e.deps--,0===e.deps&&e.resolve())},et=(t,e,n,r=!1,o=!1,s=0)=>{for(let i=s;i<t.length;i++)J(t[i],e,n,r,o)},nt=t=>6&t.shapeFlag?nt(t.component.subTree):128&t.shapeFlag?t.suspense.next():h(t.anchor||t.el),rt=(t,e,n)=>{null==t?e._vnode&&J(e._vnode,null,null,!0):b(e._vnode||null,t,e,null,null,null,n),Rr(),e._vnode=t},ot={p:b,um:J,m:G,r:Z,mt:L,mc:E,pc:q,pbc:T,n:nt,o:t};let it,at;e&&([it,at]=e(ot));return{render:rt,hydrate:it,createApp:yn(rt,it)}}(t)}function wn({effect:t,update:e},n){t.allowRecurse=e.allowRecurse=n}function In(t,e,n=!1){const r=t.children,o=e.children;if(x(r)&&x(o))for(let s=0;s<r.length;s++){const t=r[s];let e=o[s];1&e.shapeFlag&&!e.dynamicChildren&&((e.patchFlag<=0||32===e.patchFlag)&&(e=o[s]=Gn(o[s]),e.el=t.el),n||In(t,e))}}function kn(t,e){return function(t,e,n=!0,r=!1){const o=ye||ar;if(o){const n=o.type;if("components"===t){const t=function(t){return k(t)&&t.displayName||t.name}(n);if(t&&(t===e||t===R(e)||t===L(R(e))))return n}const s=Sn(o[t]||n[t],e)||Sn(o.appContext[t],e);return!s&&r?n:s}}("components",t,!0,e)||t}const Dn=Symbol();function Sn(t,e){return t&&(t[e]||t[R(e)]||t[L(R(e))])}const Nn=Symbol(void 0),Cn=Symbol(void 0),An=Symbol(void 0),En=Symbol(void 0),On=[];let Tn=null;function Pn(t=!1){On.push(Tn=t?null:[])}let $n=1;function Mn(t){$n+=t}function Rn(t){return t.dynamicChildren=$n>0?Tn||f:null,On.pop(),Tn=On[On.length-1]||null,$n>0&&Tn&&Tn.push(t),t}function jn(t,e,n,r,o,s){return Rn(Hn(t,e,n,r,o,s,!0))}function Vn(t,e,n,r,o){return Rn(Wn(t,e,n,r,o,!0))}function Ln(t){return!!t&&!0===t.__v_isVNode}function Fn(t,e){return t.type===e.type&&t.key===e.key}const Un="__vInternal",Bn=({key:t})=>null!=t?t:null,Kn=({ref:t,ref_key:e,ref_for:n})=>null!=t?D(t)||ue(t)||k(t)?{i:ye,r:t,k:e,f:!!n}:t:null;function Hn(t,e=null,n=null,r=0,o=null,s=(t===Nn?0:1),i=!1,a=!1){const l={__v_isVNode:!0,__v_skip:!0,type:t,props:e,key:e&&Bn(e),ref:e&&Kn(e),scopeId:be,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:r,dynamicProps:o,dynamicChildren:null,appContext:null};return a?(Jn(l,n),128&s&&t.normalize(l)):n&&(l.shapeFlag|=D(n)?8:16),$n>0&&!i&&Tn&&(l.patchFlag>0||6&s)&&32!==l.patchFlag&&Tn.push(l),l}const Wn=function(t,e=null,n=null,o=0,s=null,i=!1){t&&t!==Dn||(t=An);if(Ln(t)){const r=qn(t,e,!0);return n&&Jn(r,n),r}l=t,k(l)&&"__vccOpts"in l&&(t=t.__vccOpts);var l;if(e){e=function(t){return t?se(t)||Un in t?m({},t):t:null}(e);let{class:t,style:n}=e;t&&!D(t)&&(e.class=a(t)),N(n)&&(se(n)&&!x(n)&&(n=m({},n)),e.style=r(n))}const c=D(t)?1:(t=>t.__isSuspense)(t)?128:(t=>t.__isTeleport)(t)?64:N(t)?4:k(t)?2:0;return Hn(t,e,n,o,s,c,i,!0)};function qn(t,e,n=!1){const{props:o,ref:s,patchFlag:i,children:l}=t,c=e?function(...t){const e={};for(let n=0;n<t.length;n++){const o=t[n];for(const t in o)if("class"===t)e.class!==o.class&&(e.class=a([e.class,o.class]));else if("style"===t)e.style=r([e.style,o.style]);else if(g(t)){const n=e[t],r=o[t];n===r||x(n)&&n.includes(r)||(e[t]=n?[].concat(n,r):r)}else""!==t&&(e[t]=o[t])}return e}(o||{},e):o;return{__v_isVNode:!0,__v_skip:!0,type:t.type,props:c,key:c&&Bn(c),ref:e&&e.ref?n&&s?x(s)?s.concat(Kn(e)):[s,Kn(e)]:Kn(e):s,scopeId:t.scopeId,slotScopeIds:t.slotScopeIds,children:l,target:t.target,targetAnchor:t.targetAnchor,staticCount:t.staticCount,shapeFlag:t.shapeFlag,patchFlag:e&&t.type!==Nn?-1===i?16:16|i:i,dynamicProps:t.dynamicProps,dynamicChildren:t.dynamicChildren,appContext:t.appContext,dirs:t.dirs,transition:t.transition,component:t.component,suspense:t.suspense,ssContent:t.ssContent&&qn(t.ssContent),ssFallback:t.ssFallback&&qn(t.ssFallback),el:t.el,anchor:t.anchor}}function zn(t=" ",e=0){return Wn(Cn,null,t,e)}function Xn(t="",e=!1){return e?(Pn(),Vn(An,null,t)):Wn(An,null,t)}function Yn(t){return null==t||"boolean"==typeof t?Wn(An):x(t)?Wn(Nn,null,t.slice()):"object"==typeof t?Gn(t):Wn(Cn,null,String(t))}function Gn(t){return null===t.el||t.memo?t:qn(t)}function Jn(t,e){let n=0;const{shapeFlag:r}=t;if(null==e)e=null;else if(x(e))n=16;else if("object"==typeof e){if(65&r){const n=e.default;return void(n&&(n._c&&(n._d=!1),Jn(t,n()),n._c&&(n._d=!0)))}{n=32;const r=e._;r||Un in e?3===r&&ye&&(1===ye.slots._?e._=1:(e._=2,t.patchFlag|=1024)):e._ctx=ye}}else k(e)?(e={default:e,_ctx:ye},n=32):(e=String(e),64&r?(n=16,e=[zn(e)]):n=8);t.children=e,t.shapeFlag|=n}function Zn(t,e,n,r=null){vr(t,e,7,[n,r])}function Qn(t,e,n,r){let o;const s=n&&n[r];if(x(t)||D(t)){o=new Array(t.length);for(let n=0,r=t.length;n<r;n++)o[n]=e(t[n],n,void 0,s&&s[n])}else if("number"==typeof t){o=new Array(t);for(let n=0;n<t;n++)o[n]=e(n+1,n,void 0,s&&s[n])}else if(N(t))if(t[Symbol.iterator])o=Array.from(t,((t,n)=>e(t,n,void 0,s&&s[n])));else{const n=Object.keys(t);o=new Array(n.length);for(let r=0,i=n.length;r<i;r++){const i=n[r];o[r]=e(t[i],i,r,s&&s[r])}}else o=[];return n&&(n[r]=o),o}function tr(t,e,n={},r,o){if(ye.isCE)return Wn("slot","default"===e?null:{name:e},r&&r());let s=t[e];s&&s._c&&(s._d=!1),Pn();const i=s&&er(s(n)),a=Vn(Nn,{key:n.key||`_${e}`},i||(r?r():[]),i&&1===t._?64:-2);return!o&&a.scopeId&&(a.slotScopeIds=[a.scopeId+"-s"]),s&&s._c&&(s._d=!0),a}function er(t){return t.some((t=>!Ln(t)||t.type!==An&&!(t.type===Nn&&!er(t.children))))?t:null}const nr=t=>t?ur(t)?hr(t)||t.proxy:nr(t.parent):null,rr=m(Object.create(null),{$:t=>t,$el:t=>t.vnode.el,$data:t=>t.data,$props:t=>t.props,$attrs:t=>t.attrs,$slots:t=>t.slots,$refs:t=>t.refs,$parent:t=>nr(t.parent),$root:t=>nr(t.root),$emit:t=>t.emit,$options:t=>Xe(t),$forceUpdate:t=>()=>Tr(t.update),$nextTick:t=>Or.bind(t.proxy),$watch:t=>Br.bind(t)}),or={get({_:t},e){const{ctx:n,setupState:r,data:o,props:s,accessCache:i,type:a,appContext:l}=t;let c;if("$"!==e[0]){const a=i[e];if(void 0!==a)switch(a){case 1:return r[e];case 2:return o[e];case 4:return n[e];case 3:return s[e]}else{if(r!==u&&_(r,e))return i[e]=1,r[e];if(o!==u&&_(o,e))return i[e]=2,o[e];if((c=t.propsOptions[0])&&_(c,e))return i[e]=3,s[e];if(n!==u&&_(n,e))return i[e]=4,n[e];He&&(i[e]=0)}}const f=rr[e];let p,d;return f?("$attrs"===e&&ft(t,0,e),f(t)):(p=a.__cssModules)&&(p=p[e])?p:n!==u&&_(n,e)?(i[e]=4,n[e]):(d=l.config.globalProperties,_(d,e)?d[e]:void 0)},set({_:t},e,n){const{data:r,setupState:o,ctx:s}=t;if(o!==u&&_(o,e))o[e]=n;else if(r!==u&&_(r,e))r[e]=n;else if(_(t.props,e))return!1;return("$"!==e[0]||!(e.slice(1)in t))&&(s[e]=n,!0)},has({_:{data:t,setupState:e,accessCache:n,ctx:r,appContext:o,propsOptions:s}},i){let a;return!!n[i]||t!==u&&_(t,i)||e!==u&&_(e,i)||(a=s[0])&&_(a,i)||_(r,i)||_(rr,i)||_(o.config.globalProperties,i)}},sr=vn();let ir=0;let ar=null;const lr=t=>{ar=t,t.scope.on()},cr=()=>{ar&&ar.scope.off(),ar=null};function ur(t){return 4&t.vnode.shapeFlag}let fr=!1;function pr(t,e,n){k(e)?t.type.__ssrInlineRender?t.ssrRender=e:t.render=e:N(e)&&(t.setupState=pe(e)),dr(t,n)}function dr(t,e,n){const r=t.type;t.render||(t.render=r.render||p),lr(t),ct(),We(t),ut(),cr()}function hr(t){if(t.exposed)return t.exposeProxy||(t.exposeProxy=new Proxy(pe(ae(t.exposed)),{get:(e,n)=>n in e?e[n]:n in rr?rr[n](t):void 0}))}function gr(t,e,n,r){let o;try{o=r?t(...r):t()}catch(s){mr(s,e,n)}return o}function vr(t,e,n,r){if(k(t)){const o=gr(t,e,n,r);return o&&C(o)&&o.catch((t=>{mr(t,e,n)})),o}const o=[];for(let s=0;s<t.length;s++)o.push(vr(t[s],e,n,r));return o}function mr(t,e,n,r=!0){e&&e.vnode;if(e){let r=e.parent;const o=e.proxy,s=n;for(;r;){const e=r.ec;if(e)for(let n=0;n<e.length;n++)if(!1===e[n](t,o,s))return;r=r.parent}const i=e.appContext.config.errorHandler;if(i)return void gr(i,null,10,[t,o,s])}!function(t,e,n,r=!0){console.error(t)}(t,0,0,r)}let yr=!1,br=!1;const _r=[];let xr=0;const wr=[];let Ir=null,kr=0;const Dr=[];let Sr=null,Nr=0;const Cr=Promise.resolve();let Ar=null,Er=null;function Or(t){const e=Ar||Cr;return t?e.then(this?t.bind(this):t):e}function Tr(t){_r.length&&_r.includes(t,yr&&t.allowRecurse?xr+1:xr)||t===Er||(null==t.id?_r.push(t):_r.splice(function(t){let e=xr+1,n=_r.length;for(;e<n;){const r=e+n>>>1;jr(_r[r])<t?e=r+1:n=r}return e}(t.id),0,t),Pr())}function Pr(){yr||br||(br=!0,Ar=Cr.then(Vr))}function $r(t,e,n,r){x(t)?n.push(...t):e&&e.includes(t,t.allowRecurse?r+1:r)||n.push(t),Pr()}function Mr(t,e=null){if(wr.length){for(Er=e,Ir=[...new Set(wr)],wr.length=0,kr=0;kr<Ir.length;kr++)Ir[kr]();Ir=null,kr=0,Er=null,Mr(t,e)}}function Rr(t){if(Dr.length){const t=[...new Set(Dr)];if(Dr.length=0,Sr)return void Sr.push(...t);for(Sr=t,Sr.sort(((t,e)=>jr(t)-jr(e))),Nr=0;Nr<Sr.length;Nr++)Sr[Nr]();Sr=null,Nr=0}}const jr=t=>null==t.id?1/0:t.id;function Vr(t){br=!1,yr=!0,Mr(t),_r.sort(((t,e)=>jr(t)-jr(e)));try{for(xr=0;xr<_r.length;xr++){const t=_r[xr];t&&!1!==t.active&&gr(t,null,14)}}finally{xr=0,_r.length=0,Rr(),yr=!1,Ar=null,(_r.length||wr.length||Dr.length)&&Vr(t)}}const Lr={};function Fr(t,e,n){return Ur(t,e,n)}function Ur(t,e,{immediate:n,deep:r,flush:o,onTrack:s,onTrigger:i}=u){const a=ar;let l,c,f=!1,d=!1;if(ue(t)?(l=()=>t.value,f=!!t._shallow):re(t)?(l=()=>t,r=!0):x(t)?(d=!0,f=t.some(re),l=()=>t.map((t=>ue(t)?t.value:re(t)?Hr(t):k(t)?gr(t,a,2):void 0))):l=k(t)?e?()=>gr(t,a,2):()=>{if(!a||!a.isUnmounted)return c&&c(),vr(t,a,3,[h])}:p,e&&r){const t=l;l=()=>Hr(t())}let h=t=>{c=b.onStop=()=>{gr(t,a,4)}};if(fr)return h=p,e?n&&vr(e,a,3,[l(),d?[]:void 0,h]):l(),p;let g=d?[]:Lr;const v=()=>{if(b.active)if(e){const t=b.run();(r||f||(d?t.some(((t,e)=>U(t,g[e]))):U(t,g)))&&(c&&c(),vr(e,a,3,[t,g===Lr?void 0:g,h]),g=t)}else b.run()};let m;v.allowRecurse=!!e,m="sync"===o?v:"post"===o?()=>_n(v,a&&a.suspense):()=>{!a||a.isMounted?function(t){$r(t,Ir,wr,kr)}(v):v()};const b=new st(l,m);return e?n?v():g=b.run():"post"===o?_n(b.run.bind(b),a&&a.suspense):b.run(),()=>{b.stop(),a&&a.scope&&y(a.scope.effects,b)}}function Br(t,e,n){const r=this.proxy,o=D(t)?t.includes(".")?Kr(r,t):()=>r[t]:t.bind(r,r);let s;k(e)?s=e:(s=e.handler,n=e);const i=ar;lr(this);const a=Ur(o,s.bind(r),n);return i?lr(i):cr(),a}function Kr(t,e){const n=e.split(".");return()=>{let e=t;for(let t=0;t<n.length&&e;t++)e=e[n[t]];return e}}function Hr(t,e){if(!N(t)||t.__v_skip)return t;if((e=e||new Set).has(t))return t;if(e.add(t),ue(t))Hr(t.value,e);else if(x(t))for(let n=0;n<t.length;n++)Hr(t[n],e);else if(I(t)||w(t))t.forEach((t=>{Hr(t,e)}));else if(O(t))for(const n in t)Hr(t[n],e);return t}const Wr="3.2.26",qr="undefined"!=typeof document?document:null,zr=new Map,Xr={insert:(t,e,n)=>{e.insertBefore(t,n||null)},remove:t=>{const e=t.parentNode;e&&e.removeChild(t)},createElement:(t,e,n,r)=>{const o=e?qr.createElementNS("http://www.w3.org/2000/svg",t):qr.createElement(t,n?{is:n}:void 0);return"select"===t&&r&&null!=r.multiple&&o.setAttribute("multiple",r.multiple),o},createText:t=>qr.createTextNode(t),createComment:t=>qr.createComment(t),setText:(t,e)=>{t.nodeValue=e},setElementText:(t,e)=>{t.textContent=e},parentNode:t=>t.parentNode,nextSibling:t=>t.nextSibling,querySelector:t=>qr.querySelector(t),setScopeId(t,e){t.setAttribute(e,"")},cloneNode(t){const e=t.cloneNode(!0);return"_value"in t&&(e._value=t._value),e},insertStaticContent(t,e,n,r){const o=n?n.previousSibling:e.lastChild;let s=zr.get(t);if(!s){const e=qr.createElement("template");if(e.innerHTML=r?`<svg>${t}</svg>`:t,s=e.content,r){const t=s.firstChild;for(;t.firstChild;)s.appendChild(t.firstChild);s.removeChild(t)}zr.set(t,s)}return e.insertBefore(s.cloneNode(!0),n),[o?o.nextSibling:e.firstChild,n?n.previousSibling:e.lastChild]}};const Yr=/\s*!important$/;function Gr(t,e,n){if(x(n))n.forEach((n=>Gr(t,e,n)));else if(e.startsWith("--"))t.setProperty(e,n);else{const r=function(t,e){const n=Zr[e];if(n)return n;let r=R(e);if("filter"!==r&&r in t)return Zr[e]=r;r=L(r);for(let o=0;o<Jr.length;o++){const n=Jr[o]+r;if(n in t)return Zr[e]=n}return e}(t,e);Yr.test(n)?t.setProperty(V(r),n.replace(Yr,""),"important"):t[r]=n}}const Jr=["Webkit","Moz","ms"],Zr={};const Qr="http://www.w3.org/1999/xlink";let to=Date.now,eo=!1;if("undefined"!=typeof window){to()>document.createEvent("Event").timeStamp&&(to=()=>performance.now());const t=navigator.userAgent.match(/firefox\/(\d+)/i);eo=!!(t&&Number(t[1])<=53)}let no=0;const ro=Promise.resolve(),oo=()=>{no=0};function so(t,e,n,r,o=null){const s=t._vei||(t._vei={}),i=s[e];if(r&&i)i.value=r;else{const[n,a]=function(t){let e;if(io.test(t)){let n;for(e={};n=t.match(io);)t=t.slice(0,t.length-n[0].length),e[n[0].toLowerCase()]=!0}return[V(t.slice(2)),e]}(e);if(r){!function(t,e,n,r){t.addEventListener(e,n,r)}(t,n,s[e]=function(t,e){const n=t=>{const r=t.timeStamp||to();(eo||r>=n.attached-1)&&vr(function(t,e){if(x(e)){const n=t.stopImmediatePropagation;return t.stopImmediatePropagation=()=>{n.call(t),t._stopped=!0},e.map((t=>e=>!e._stopped&&t(e)))}return e}(t,n.value),e,5,[t])};return n.value=t,n.attached=(()=>no||(ro.then(oo),no=to()))(),n}(r,o),a)}else i&&(!function(t,e,n,r){t.removeEventListener(e,n,r)}(t,n,i,a),s[e]=void 0)}}const io=/(?:Once|Passive|Capture)$/;const ao=/^on[a-z]/;const lo=m({patchProp:(t,r,o,s,i=!1,a,l,c,u)=>{"class"===r?function(t,e,n){const r=t._vtc;r&&(e=(e?[e,...r]:[...r]).join(" ")),null==e?t.removeAttribute("class"):n?t.setAttribute("class",e):t.className=e}(t,s,i):"style"===r?function(t,e,n){const r=t.style,o=D(n);if(n&&!o){for(const t in n)Gr(r,t,n[t]);if(e&&!D(e))for(const t in e)null==n[t]&&Gr(r,t,"")}else{const s=r.display;o?e!==n&&(r.cssText=n):e&&t.removeAttribute("style"),"_vod"in t&&(r.display=s)}}(t,o,s):g(r)?v(r)||so(t,r,0,s,l):("."===r[0]?(r=r.slice(1),1):"^"===r[0]?(r=r.slice(1),0):function(t,e,n,r){if(r)return"innerHTML"===e||"textContent"===e||!!(e in t&&ao.test(e)&&k(n));if("spellcheck"===e||"draggable"===e)return!1;if("form"===e)return!1;if("list"===e&&"INPUT"===t.tagName)return!1;if("type"===e&&"TEXTAREA"===t.tagName)return!1;if(ao.test(e)&&D(n))return!1;return e in t}(t,r,s,i))?function(t,e,r,o,s,i,a){if("innerHTML"===e||"textContent"===e)return o&&a(o,s,i),void(t[e]=null==r?"":r);if("value"===e&&"PROGRESS"!==t.tagName&&!t.tagName.includes("-")){t._value=r;const n=null==r?"":r;return t.value===n&&"OPTION"!==t.tagName||(t.value=n),void(null==r&&t.removeAttribute(e))}if(""===r||null==r){const o=typeof t[e];if("boolean"===o)return void(t[e]=n(r));if(null==r&&"string"===o)return t[e]="",void t.removeAttribute(e);if("number"===o){try{t[e]=0}catch(l){}return void t.removeAttribute(e)}}try{t[e]=r}catch(c){}}(t,r,s,a,l,c,u):("true-value"===r?t._trueValue=s:"false-value"===r&&(t._falseValue=s),function(t,r,o,s,i){if(s&&r.startsWith("xlink:"))null==o?t.removeAttributeNS(Qr,r.slice(6,r.length)):t.setAttributeNS(Qr,r,o);else{const s=e(r);null==o||s&&!n(o)?t.removeAttribute(r):t.setAttribute(r,s?"":o)}}(t,r,s,i))}},Xr);let co;const uo=(...t)=>{const e=(co||(co=xn(lo))).createApp(...t),{mount:n}=e;return e.mount=t=>{const r=function(t){if(D(t)){return document.querySelector(t)}return t}(t);if(!r)return;const o=e._component;k(o)||o.render||o.template||(o.template=r.innerHTML),r.innerHTML="";const s=n(r,!1,r instanceof SVGElement);return r instanceof Element&&(r.removeAttribute("v-cloak"),r.setAttribute("data-v-app","")),s},e};function fo(t){return t[t.length-1]}console.assert=(t,e)=>{t||console.log(new Error(e))};const po="0987654321abcdefghijklmnoprstuvyz";function ho(t){return function(t=4){const e=po.length,n=Math.pow(e,t);let r=Math.floor(Math.random()*n);const o=[];for(let s=0;s<t;s+=1)o.push(po[r%e]),r=Math.floor(r/e);return o.join("")}()}function go(t){if(t||(t=document.getSelection()),!(t instanceof Selection))return t;if(t.isCollapsed){const e={node:t.anchorNode,offset:t.anchorOffset};return{start:e,end:e,backwards:!1,collapsed:!0,selection:t}}const e=function(t){if(t.isCollapsed)return!1;if(t.anchorNode===t.focusNode)return t.anchorOffset>t.focusOffset;const e=[t.anchorNode];let n=t.anchorNode;for(;n&&n!=document.body;)n=n.parentNode,e.push(n);for(n=t.focusNode;n&&n!=document.body;){const t=n;let r;n=n.parentNode;for(const o of e){if(n===o)for(const e of o.childNodes){if(e===r)return!1;if(e===t)return!0}r=o}}}(t);return{start:{node:e?t.focusNode:t.anchorNode,offset:e?t.focusOffset:t.anchorOffset},end:{node:e?t.anchorNode:t.focusNode,offset:e?t.anchorOffset:t.focusOffset},backwards:e,collapsed:!1,selection:t}}function vo(t,e,n=[]){if(t&&t.nodeType==Node.TEXT_NODE&&(t=t.parentNode),t&&t.nodeType==Node.ELEMENT_NODE&&(!e||t.nodeName===e)){const e={};for(const r of n){const n=t.attributes["data-"+r];n&&(e[r]=n.nodeValue)}return{node:t,attrs:e}}return{}}function mo(t){return t.nodeType===Node.ELEMENT_NODE?t.childNodes.length>0?t.childNodes[0]:t:t.nodeType===Node.TEXT_NODE?t:void 0}function yo(t,e){const n=e.querySelector(`div[data-id="${t.paragraphID}"]`+(t.spanID?` > span[data-id="${t.spanID}"]`:""));return t.node=n,t}function bo(t,e,n){const r=mo(e.node||yo(e,t).node),o=n&&mo(n.node||yo(n,t).node),s=document.getSelection();s.empty();const i=new Range;i.setStart(r,e.offset),n?i.setEnd(o,n.offset):i.collapse(!0),s.addRange(i)}function _o(t){return t.spans}function xo(t,e){return t.spans=e}function wo(t=""){return{id:ho(),text:t,format:{}}}function Io(t){return{id:ho(),spans:"number"==typeof t?Array.from(Array(t),(()=>wo())):t||[]}}function ko(t,...e){return Object.assign({},t,{format:Object.assign({},t.format||{})},...e)}function Do(t,e,{newid:n,splitTime:r}={newid:ho,splitTime:!1}){const o={id:n(t.id),text:t.text.substr(0,e),format:Object.assign({},t.format)},s={id:n(t.id),text:t.text.substr(e),format:Object.assign({},t.format)};if(r){const e=t.text.replace(/\s*/g,"").length;t.duration>0&&(o.duration=o.text.replace(/\s*/g,"").length*t.duration/e,s.duration=s.text.replace(/\s*/g,"").length*t.duration/e,t.time>=0&&(o.time=t.time,s.time=t.time+o.duration))}else o.time=t.time,s.time=t.time,o.duration=t.duration,s.duration=t.duration,t.group&&t.group.length>0?(o.group=t.group,s.group=t.group):(o.group=t.id,s.group=t.id);return{left:o,right:s}}function So(t,e,n){console.assert(void 0!==t,"data not specified"),console.assert(void 0!==e,"paragraphID not specified");const r=t=>-1===t?void 0:t,o=t;console.assert(void 0!==o,"no paragraphs");const s=r(o.findIndex((t=>t.id===e))),i=void 0!==s&&-1!==s&&o[s]||void 0,a=i&&r(_o(i).findIndex((t=>t.id===n)));return{paragraph:i,paragraphIndex:s,span:void 0!==a&&-1!==a&&_o(i)[a]||void 0,spanIndex:a}}function No(t,e,n){const r=e>=0&&t[e]||void 0,o=r&&_o(r);return{paragraph:r,span:o&&void 0!==n&&o[-1===n||n>=o.length?o.length-1:n]||void 0}}function Co(t,e){console.assert(void 0!==t,"data not specified"),console.assert(void 0!==e,"pointer not specified");const{spanAttrs:n,paragraphAttrs:r}=function(t){let e,n,r,o,s=t;for(;s&&!n;){const{node:t,attrs:i}=vo(s,void 0,["id","time","duration","confidence"]);if(!n&&!e&&t&&"SPAN"===t.nodeName&&i.id)e=i,r=t;else if(!n&&t&&"DIV"===t.nodeName&&i.id){n=i,o=t;break}t&&(s=t),s=s.parentNode}return{spanNode:r,spanAttrs:e,paragraphNode:o,paragraphAttrs:n}}(e.node),o=r&&r.id,s=n&&n.id,i=t,{paragraphIndex:a,paragraph:l,spanIndex:c,span:u}=i&&So(t,o,s)||{};return{node:e.node,spanAttrs:n,paragraphAttrs:r,paragraphID:o,spanID:s,paragraphIndex:a,paragraph:l,spanIndex:c,span:u,offset:e.offset}}function Ao(t,e){!function(t,e){if(e.spanID&&e.paragraphID)return e.node;if(e.paragraphID){const{node:t}=vo(e.node,"DIV",["id"]);return t}}(t,e);let n,r,o,s,{node:i,offset:a}=e;if(i.nodeType===Node.ELEMENT_NODE){a=0;for(let t=e.offset-1;t>=0&&t<i.childNodes.length;t--)a+=i.childNodes.textContent&&i.childNodes[t].textConent.length||0}for(;i&&i!=t;){if(i.nodeType===Node.ELEMENT_NODE){if("SPAN"===i.nodeName){n=i.attributes["data-id"].nodeValue}if("DIV"===i.nodeName){r=i.attributes["data-id"].nodeValue}}let t=i;for(;t=t.previousSibling;){if(!o&&"SPAN"===t.nodeName){if(o=t.attributes["data-id"].nodeValue,!n&&!r)break}if(!s&&"DIV"===t.nodeName){if(s=t.attributes["data-id"].nodeValue,!n&&!r)break}n||r||t.textConent&&(a+=t.textConent.length)}i=i.parentNode}return e.spanID=n,e.paragraphID=r,e.offset=a,e.leftSpanID=o,e.leftParagraphID=s,e}function Eo(t,e){if(console.assert(void 0!==t,"data not specified"),console.assert(void 0!==e,"pointer not specified"),void 0===e.paragraphID&&(void 0===e.paragraphIndex||-1===e.paragraphIndex))return console.assert(void 0!==e.node,"invalid pointer, no paragraph info and no node"),Object.assign(e,Co(t,e));if(void 0===e.paragraphID||void 0!==e.paragraphIndex&&-1!==e.paragraphIndex){if(void 0===e.paragraphID&&(void 0!==e.paragraphIndex||-1!==e.paragraphIndex)){const{paragraph:n,span:r}=No(t,e.paragraphIndex,e.spanIndex);console.assert(n,"paragraph not resolved"),console.assert(void 0!==e.spanIndex&&r||void 0===e.spanIndex||0===_o(t[e.paragraphIndex]).length,"span not resolved, but span index is setZ"),Object.assign(e,{paragraph:n,paragraphID:n.id}),!r||void 0!==e.span&&void 0!==e.spanID||Object.assign(e,{span:r,spanID:r.id})}}else{const{paragraphIndex:n,paragraph:r,spanIndex:o,span:s}=So(t,e.paragraphID,e.spanID);console.assert(r,"paragraph not resolved"),console.assert(e.spanID&&s||void 0===e.spanID,"span not resolved, but span id is set"),Object.assign(e,{paragraphIndex:n,paragraph:r}),void 0!==e.span&&(e.span=s)}if(void 0===e.spanID&&void 0===e.spanIndex){if(e.node)return Object.assign(e,Co(t,e))}else if(void 0!==e.spanID&&void 0===e.spanIndex)Object.assign(e,So(t,e.paragraphID,e.spanID)),console.assert(e.paragraph,"paragraph not resolved"),console.assert(void 0!==e.spanIndex&&e.span,"span not resolved, but span id is setY");else if(void 0===e.spanID&&void 0!==e.spanIndex){const{paragraph:n,span:r}=No(t,e.paragraphIndex,e.spanIndex),o=_o(n);e.spanIndex>=o.length&&o.length>0&&(e.spanIndex=o.length-1,e.offset=o[o.length-1].text.length),console.assert(e.paragraph,"paragraph not resolved"),console.assert(r||0===_o(t[e.paragraphIndex]).length,"span not resolved, but span index is set"),Object.assign(e,{paragraph:n,paragraphID:n.id,span:r,spanID:r&&r.id,spanIndex:r&&e.spanIndex})}if(null!=e.paragraphIndex&&-1!=e.paragraphIndex&&null!=e.spanIndex){const n=_o(t[e.paragraphIndex]);n.length>0&&(-1===e.spanIndex&&(e.spanIndex=n.length-1),e.offset<0&&(e.offset=n[e.spanIndex].text.length+1+e.offset))}return e}function Oo(t,e,n){console.assert(void 0!==t,"data not set"),console.assert(e.paragraphIndex>=0,"pointer paragraphIndex missing or invalid");const r=t;let o=e.paragraphIndex,s=e.spanIndex;if(void 0!==s&&-1!==s)if(s<_o(r[o]).length-1)s++;else{if(!(o<r.length-1))return;o++,s=_o(r[o]).length>0?0:void 0}else{if(!(o<r.length-1))return;o++,s=_o(r[o]).length>0?0:void 0}return void 0===n&&(n=0),Eo(t,{paragraphIndex:o,spanIndex:s,offset:n})}const To=Object.freeze({Remove:1,InPlace:2,Copy:3});function Po(t,e,n,r,o,s=To.Remove){null==e&&(e=0),(null==n||n<0)&&(n=0),(null==r||r>=t.length)&&(r=t.length-1);const i=t[r].text.length;if((void 0===o||o>i)&&(o=i),o<0&&(o=0),n>t[e].text.length&&(n=t[e].text.length),e===r){if(o<n&&(o=n),s===To.Remove){const r=t[e],s=r.text.substring(n,o);r.text=r.text.substring(0,n)+r.text.substring(o);const i=[];return s.length>0&&i.push(ko(r,{text:s})),{spans:i,splitIndex:e,splitOffset:n,removedSpanText:s}}if(s===To.InPlace){const r=t[e];if(0===n&&o>=r.text.length)return{spans:[r],splitIndex:e,splitOffset:n};if(n===o){if(0===n)return{right:r,spans:[],splitIndex:e,splitOffset:n};if(o>=r.text.length)return{left:r,spans:[],splitIndex:e+1,splitOffset:0};{let{left:o,right:s}=Do(r,n);return t.splice(e,1,...[o,s].filter((t=>t.text.length>0))),{left:o,right:s,spans:[],splitIndex:e+1,splitOffset:0}}}if(0===n){let{left:s,right:i}=Do(r,o);return t.splice(e,1,...[s,i].filter((t=>t.text.length>0))),{right:i,spans:[s],splitIndex:e,splitOffset:n}}if(o>=r.text.length){let{left:o,right:s}=Do(r,n);return t.splice(e,1,...[o,s].filter((t=>t.text.length>0))),{left:o,spans:[s],splitIndex:e+1,splitOffset:n}}let{left:s,right:i}=Do(r,n),{left:a,right:l}=Do(i,o-n);return t.splice(e,1,...[s,a,l].filter((t=>t.text.length>0))),{left:s,right:l,spans:[a],splitIndex:e+1,splitOffset:0}}if(s===To.Copy){const r=t[e],s=r.text.substring(n,o),i=[];return s.length>0&&i.push(ko(r,{text:s,group:r.id})),{spans:i,splitIndex:e,splitOffset:n}}}if(r===e+1&&0===o&&n>=t[e].text.length)return{spans:[],splitIndex:e,splitOffset:n};const a=0===n?e:e+1,l=o>=i?r:r-1;if(s===To.Remove){const s=t.splice(a,l+1-a);if(e<a){const r=t[e],{left:o,right:i}=Do(r,n);i.text.length>0&&s.unshift(ko(r,i)),Object.assign(r,o)}if(l<r){const e=t[a],{left:n,right:r}=Do(e,o);n.text.length>0&&s.push(ko(e,n)),Object.assign(e,r)}return{spans:s,splitIndex:e,splitOffset:n}}if(s===To.InPlace){const s=t.slice(a,l+1);if(l<r){const e=t[r];if(o>0&&o<e.text.length){console.log("end offset middle");const{left:n,right:i}=Do(e,o);t.splice(r,1,...[n,i].filter((t=>t.text.length>0))),s.push(n)}else o>0&&s.push(e)}if(e<a){const r=t[e];if(n>0&&n<r.text.length){console.log("start offset middle");const{left:o,right:i}=Do(r,n);s.unshift(i),t.splice(e,1,...[o,i].filter((t=>t.text.length>0))),e++}else 0===n?s.unshift(r):e++}return{spans:s,splitIndex:e,splitOffset:n}}if(s===To.Copy){const s=t.slice(a,l+1);if(e<a){const r=t[e],{left:o,right:i}=Do(r,n);i.text.length>0&&s.unshift(ko(r,i))}if(l<r){const e=t[r],{left:n,right:i}=Do(e,o);n.text.length>0&&s.push(ko(e,n))}return{spans:s,splitIndex:e,splitOffset:n}}}function $o(t,e,n,r=To.Remove){const o=t,s=[];let i;for(let a=e.paragraphIndex;a<o.length&&a<=n.paragraphIndex;){const t=o[a];if(t.id===e.paragraphID&&(i=t),t.id===e.paragraphID&&t.id===n.paragraphID){if(_o(t).length>0){if(r===To.Remove){const o=Po(_o(t),e.spanIndex,e.offset,n.spanIndex,n.offset,r);o.spans.length>0&&s.push({id:t.id,spans:o.spans,partial:e.spanIndex>0||e.offset>0||n.spanIndex<_o(t).length-1||_o(t).length>0&&n.offset<fo(_o(t)).text.length})}else if(r===To.Copy){const o=Po(_o(t),e.spanIndex,e.offset,n.spanIndex,n.offset,r);o.spans.length>0&&s.push({id:t.id,spans:o.spans,partial:e.spanIndex>0||e.offset>0||n.spanIndex<_o(t).length-1||n.offset<fo(_o(t)).text.length})}else if(r===To.InPlace){const o=Po(_o(t),e.spanIndex,e.offset,n.spanIndex,n.offset,r);o.spans.length>0&&s.push({id:t.id,spans:o.spans,partial:e.spanIndex>0||e.offset>0||n.spanIndex<_o(t).length-1||n.offset<fo(_o(t)).text.length})}}else r===To.Remove?(o.splice(a,1),s.push(Object.assign({},t,{partial:!1}))):r===To.Copy?s.push(Object.assign({},t,{partial:!1})):r===To.InPlace&&(o.splice(a,1),s.push(t));break}if(t.id===e.paragraphID&&_o(t).length>0){const n=Po(_o(t),e.spanIndex,e.offset,void 0,void 0,r);0===_o(t).length&&r===To.Remove?o.splice(a,1):a++,n.spans.length>0&&s.push({id:t.id,spans:n.spans,partial:_o(t).length>0})}else{if(t.id===n.paragraphID&&_o(t).length>0){const e=Po(_o(t),0,0,n.spanIndex,n.offset,r);e.spans.length>0&&s.push({id:t.id,spans:e.spans,partial:_o(t).length>0}),_o(i).length>0&&r===To.Remove&&(_o(i).splice(_o(i).length,0,..._o(t)),o.splice(a,1));break}if(t.id===n.paragraphID){r===To.Remove&&o.splice(a,1),s.push(Object.assign({},t,{partial:!1}));break}r===To.Remove?o.splice(a,1):a++,s.push(Object.assign({},t,{partial:!1}))}}return s}function Mo(t,e,n){const r=t,o=n;if(0===o.length)return;if(0===r.length){r.splice(0,0,...n);const e=fo(n);return{start:Eo(t,{paragraphIndex:0,spanIndex:0,offset:0}),end:Eo(t,{paragraphIndex:n.length-1,spanIndex:e.spans.length-1,offset:fo(e.spans).text.length})}}if(1===o.length){const n=_o(o[0]),s=r[e.paragraphIndex];let i,a;if(0===e.offset)_o(s).splice(e.spanIndex,0,...n),i=Eo(t,{paragraphID:e.paragraphID,spanIndex:e.spanIndex,offset:0}),a=Eo(t,{paragraphID:e.paragraphID,spanIndex:e.spanIndex+n.length-1,offset:-1});else if(e.offset===_o(s)[e.spanIndex].text.length)_o(s).splice(e.spanIndex+1,0,...n),i=Eo(t,{paragraphID:e.paragraphID,spanIndex:e.spanIndex+1,offset:0}),a=Eo(t,{paragraphID:e.paragraphID,spanIndex:e.spanIndex+1+n.length-1,offset:-1});else{const{left:r,right:o}=Do(_o(s)[e.spanIndex],e.offset);_o(s).splice(e.spanIndex+1,0,ko(_o(s)[e.spanIndex],o)),Object.assign(_o(s)[e.spanIndex],r),_o(s).splice(e.spanIndex+1,0,...n),i=Eo(t,{paragraphID:e.paragraphID,spanIndex:e.spanIndex+1,offset:0}),a=Eo(t,{paragraphID:e.paragraphID,spanIndex:e.spanIndex+1+n.length-1,offset:-1})}return{start:i,end:a,spans:n}}const s=r[e.paragraphIndex],i=Io();let a,l;if(null!=e.spanIndex&&-1!=e.spanIndex&&_o(s).length>0)if(0===e.offset){xo(i,_o(s).splice(e.spanIndex))}else if(e.offset===_o(s)[e.spanIndex].text.length){xo(i,_o(s).splice(e.spanIndex+1))}else{const t=_o(s).splice(e.spanIndex+1),{left:n,right:r}=Do(_o(s)[e.spanIndex],e.offset);xo(i,t),_o(i).unshift(ko(_o(s)[e.spanIndex],r)),Object.assign(_o(s)[e.spanIndex],n)}_o(o[0]).length>0&&(a={paragraphID:s.id,spanIndex:_o(r[e.paragraphIndex]).length,offset:0}),_o(r[e.paragraphIndex]).splice(_o(r[e.paragraphIndex]).length,0,..._o(o[0]));let c=e.paragraphIndex+1;o.length>2&&(r.splice(c,0,...o.slice(1,o.length-1)),c+=o.length-2),_o(i).splice(0,0,..._o(o[o.length-1])),r.splice(c,0,i),a||(a={paragraphIndex:e.paragraphIndex+1,spanIndex:0,offset:0}),l=Eo(t,{paragraphID:i.id,spanIndex:_o(o[o.length-1]).length-1,offset:-1}),a=Eo(t,a);return{start:a,end:l,spans:n.reduce(((t,e)=>t.concat(_o(e))),[])}}function Ro(t,e){let n=0;for(const r of e)if(n<t.length&&t[n].id===r.id)t[n].text=r.text,n++;else{let e=!1;for(let o=n;o<t.length;o++)if(t[o].id===r.id){t.splice(n,o-n),t[n].text=r.text,n++,e=!0;break}e||(t.splice(n,0,r),n++)}return t.length>n&&t.splice(n),t}function*jo(t,e,n){let r=void 0===e;for(const o of t)if(r||o.id!==e||(r=!0),r&&(yield o,void 0!==n&&o.id===n))return}const Vo={props:{modelValue:Object,time:Number,editable:{type:Boolean,default:!0},showConfidence:{type:Boolean,default:!1}},data:()=>({paragraphs:[],enabled:!0,kk:1}),mounted(){const t=function(t,e,n){let r;return{now(e,...o){if(r=null,!n)return t.apply(e,o)},debounced(o,...s){const i=n&&!r;clearTimeout(r),r=setTimeout((()=>{this.now(o,...s)}),e),i&&t.apply(o,s)}}}(this.applyViewChangesNow,200);this.applyViewChangesNow=(...e)=>t.now(this,...e),this.applyViewChanges=(...e)=>t.debounced(this,...e),this.$options.watch.modelValue.call(this,this.modelValue)},watch:{modelValue(t){this.paragraphs=t.paragraphs||[]},time(t){}},beforeMount(t,e,n,r){},methods:{reset(){console.debug("resetting"),this._.subTree=null,this.$nextTick((()=>{}))},save(){this.$emit("update:modelValue",Object.assign({},this.modelValue,{paragraphs:this.paragraphs}))},download(t,e,n="text/plain"){let r=document.createElement("a");r.setAttribute("href",`data:${n};charset=utf-8,`+encodeURIComponent(e)),r.setAttribute("download",t),r.style.display="none",document.body.appendChild(r),r.click(),document.body.removeChild(r)},asHTML(t){t||(t=this.paragraphs);const e=[];for(const n of t){let t=[];for(const e of n.spans){let n="span";e.format&&(e.format.bold?n="strong":e.format.italic?n="em":e.format.underline?n="u":e.format.subscript?n="sub":e.format.superscript&&(n="sup")),t.push(`<${n}>${e.text}</${n}>`)}t=t.join(""),n.bullet?e.push(`<li>${t}</li>`):e.push(`<p>${t}</p>`)}return e.join("\n")},exportWord(t="document.doc"){const e=`<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40">\n      <head><meta charset='utf-8'><title>RUTA exported document</title></head>\n      <body>${this.asHTML()}</body>\n      </html>`;this.download(t,e,"application/vnd.ms-word")},spanSelected(t,e){document.getSelection().isCollapsed&&(console.debug("span selected",t),this.$emit("update:time",t.time))},selectStart(t){console.debug("select start",t)},selectEnd(t){{const t=this.paragraphs,e=go();Eo(t,e.start);if(Eo(t,e.end),e.collapsed)this.$emit("selected");else{const t=e.start.span.time,n=void 0!==e.end.span.time?e.end.span.time+e.end.span.duration||0:void 0;this.$emit("selected",{start:t,end:n})}return}},getSpanSelection(t){const e=this.paragraphs;return Eo(e,(t=go(t)).start),Eo(e,t.end),Array.from(function*(t,e,n){const r=t;let o=!1;for(const s of r){if(e||(o=!0),e&&s.id===e.paragraphID&&n&&s.id===n.paragraphID)return void(yield{paragraph:s,spans:Array.from(jo(s.spans,e.spanID,n.spanID))});if(e&&s.id===e.paragraphID)o=!0,yield{paragraph:s,spans:Array.from(jo(s.spans,e.spanID))};else{if(n&&s.id===n.paragraphID)return void(o&&(yield{paragraph:s,spans:Array.from(jo(s.spans,void 0,n.spanID))}));o&&(yield{paragraph:s,spans:Array.from(s.spans)})}}}(this.paragraphs,t.start,t.end))},toggleStyle(t,e){const n=this.paragraphs;if(e||(e=go()),e.isCollapsed)return;const r=e.start;Eo(n,r);const o=e.end;Eo(n,o);const s=$o(n,r,o,To.InPlace);let i,a,l=!0;for(const c of s)for(const e of c.spans)if(e.format&&e.format[t]){l=!1;break}"subscript"===t?(i="superscript",a=!1):"superscript"===t&&(i="subscript",a=!1);for(const c of s)for(const e of c.spans)Object.assign(e,{format:Object.assign(e.format||{},{[t]:l},i&&{[i]:a}||{}),id:ho()})},toggleBullet(){const t=document.getSelection(),e=this.getSpanSelection(t);let n=!0;for(const r of e)if(r.paragraph.bullet){n=!1;break}for(const r of e)r.paragraph.bullet=n},mapContainerOffsetPointerToData(t,e){if(!e.paragraphID){let n=0;for(const r of t)if(e.leftParagraphID&&r.id===e.leftParagraphID)n=0;else{for(const t of r.spans){if(n<=e.offset&&e.offset<n+t.text.length){e.paragraphID=r.id,e.paragraph=r,e.spanID=t.id,e.span=t,e.offset-=n;break}n+=t.text.length}if(e.offset===n&&r.spans.length>0){e.paragraphID=r.id;const t=r.spans[r.spans.length-1];e.spanID=t.id,e.span=t,e.offset=t.text.length}if(e.paragraphID)break}}if(e.paragraphID&&!e.spanID)for(const n of t){if(n.id!==e.paragraphID)continue;let t=0;for(const r of n.spans)if(e.leftSpanID&&r.id===e.leftSpanID)t=0;else{if(t<=e.offset&&e.offset<t+r.text.length){e.spanID=r.id,e.span=r,e.offset-=t;break}t+=r.text.length}if(e.offset===t&&n.spans.length>0){const t=n.spans[n.spans.length-1];e.spanID=t.id,e.span=t,e.offset=t.text.length}break}return e.node=void 0,Eo(t,e),e},parseDOM(t){let e=this.paragraphs;const n=go(),r=Co(e,n.start),o=Co(e,n.end);r.spanID&&r.paragraphID||Ao(this.$refs.container,r),o.spanID&&o.paragraphID||Ao(this.$refs.container,o);const s=function(t){const e=(t,e)=>{let n=t;return void 0!==n&&(n=n.nodeValue),void 0!==n&&void 0!==e&&(n=e(n)),n},n=[];let r=!1;for(const o of t.childNodes)if(o.nodeType===Node.ELEMENT_NODE)if("DIV"===o.nodeName&&o.attributes["data-id"]){r=!0;const t=[],s={id:o.attributes["data-id"].nodeValue,spans:t};let i;n.push(s);const a=o;for(const n of a.childNodes)if(n.nodeType===Node.ELEMENT_NODE)if("SPAN"===n.nodeName&&n.attributes["data-id"]){const r=n.attributes["data-id"].nodeValue;let o=n.innerText;i&&i.length>0&&(o=i+o,i=void 0);const s=e(n.attributes["data-time"],parseInt),a=e(n.attributes["data-duration"],parseInt),l=e(n.attributes["data-confidence"],parseFloat);t.push({id:r,text:o,time:s,duration:a,confidence:l})}else n.nodeName;else n.nodeType===Node.TEXT_NODE&&(n.nodeValue.length>0&&(t.length>0?t[t.length-1].text+=n.nodeValue.length:i=n.nodeValue),n.nodeValue="");0===t.length&&i&&i.length>0&&t.push(wo(i))}else"BR"===o.nodeName?(console.log("br",o),r=!1,o.remove()):o.remove();else if(o.nodeType===Node.TEXT_NODE&&o.nodeValue.length>0){let t=n.length>0&&r&&n[n.length-1];t||(t={id:ho(),spans:[]},n.push(t)),t.spans.push({id:ho(),text:o.nodeValue}),o.remove()}return n}(this.$refs.container),i=function(t,e){let n=0;for(const r of e)if(n<t.length&&t[n].id===r.id)Ro(_o(t[n]),_o(r)),n++;else{let e=!1;for(let o=n;o<t.length;o++)if(t[o].id===r.id){t.splice(n,o-n),t[n].text=r.text,n++,e=!0;break}e||(t.splice(n,0,r),n++)}return t.length>n&&t.splice(n),t}(this.paragraphs||[],s);return this.paragraphs=i,e=i,this.mapContainerOffsetPointerToData(e,r),this.mapContainerOffsetPointerToData(e,o),t&&this.$nextTick((()=>{bo(this.$refs.container,Eo(e,r),n.collapsed?null:Eo(e,o))})),{paragraphs:i,start:r,end:o,collapsed:n.collapsed}},applyViewChangesNow(t=!0){const{paragraphs:e,start:n,end:r,collapsed:o}=this.parseDOM(t);return this.paragraphs=e,console.debug("debounced",JSON.parse(JSON.stringify(this.paragraphs))),this.save(),{start:n,end:r,collapsed:o}},onInput(t){this.applyViewChanges()},onKeypress(t){},errorCaptured(t,e,n){console.debug("ERROR captured:",t,e,n)},async onKeydown(t){if(console.debug("editable-spans keydown:",t),(t.metaKey||t.ctrlKey)&&"z"===t.key)return t.stopPropagation(),void t.preventDefault();if((t.metaKey||t.ctrlKey)&&("c"===t.key||"v"===t.key||"x"===t.key||"r"===t.key||"Meta"===t.key||"Control"===t.key))return;if("Escape"===t.code||"Tab"===t.code)return;if("ArrowLeft"===t.key||"ArrowRight"===t.key||"ArrowUp"===t.key||"ArrowDown"===t.key)return void t.shiftKey;if("Dead"===t.key)return;let e=document.getSelection();if(!e.isCollapsed&&!t.ctrlKey&&!t.metaKey&&"Alt"!=t.key&&"Shift"!=t.key){"Delete"!==t.key&&"Backspace"!==t.key&&"Enter"!==t.key||(t.stopPropagation(),t.preventDefault());const n=this.paragraphs;e=go(e);const r=e.start;Eo(n,r);const o=e.end;return Eo(n,o),$o(n,r,o),"Enter"===t.key?(Mo(n,r,[Io(),Io()]),void this.$nextTick((()=>{bo(this.$refs.container,yo(Oo(n,r),this.$refs.container))}))):void this.$nextTick((()=>{r.spanID=void 0,r.node=void 0,bo(this.$refs.container,Eo(n,r))}))}if("KeyL"===t.code&&(!0===t.metaKey||!0===t.ctrlKey))return this.toggleBullet(),t.stopPropagation(),t.preventDefault(),!1;if(("KeyL"===t.code||"KeyB"===t.code||"KeyI"===t.code||"KeyU"===t.code||"Digit6"===t.code&&!0===t.shiftKey||"Minus"===t.code&&!0===t.shiftKey)&&(!0===t.ctrlKey||!0===t.metaKey)){let e;"KeyB"===t.code?e="bold":"KeyI"===t.code?e="italic":"KeyU"===t.code?e="underline":"Digit6"===t.code?e="superscript":"Minus"===t.code&&(e="subscript");const n=go();if(!n.collapsed){const t=this.paragraphs;!function(t,e){Eo(t,e.start),Eo(t,e.end),e.start.offsetLeft=e.start.offset,0===e.start.spanIndex||e.start.spanIndex>0&&(e.start.leftSpanIndex=e.start.spanIndex-1,e.start.leftSpanID=_o(e.start.paragraph)[e.start.spanIndex-1].id),e.end.offsetRight=e.end.span.text.length-e.end.offset,e.end.spanIndex>=_o(e.end.paragraph).length||e.end.spanIndex<_o(e.end.paragraph).length-1&&(e.end.rightSpanIndex=e.end.spanIndex+1,e.end.rightSpanID=_o(e.end.paragraph)[e.end.spanIndex+1].id)}(t,n),this.toggleStyle(e,n),n.start.node=void 0,n.end.node=void 0,function(t,e){if(void 0!==e.start.offsetLeft){let t=0;const n=_o(e.start.paragraph);for(let r=void 0===e.start.leftSpanIndex?0:e.start.leftSpanIndex+1;r<n.length;r++){const o=n[r];if(e.start.offsetLeft>=t&&e.start.offsetLeft<=t+o.text.length){e.start.spanIndex=r,e.start.span=o,e.start.spanID=o.id,e.start.offset=e.start.offsetLeft-t;break}t+=o.text.length}delete e.start.offsetLeft,delete e.start.leftSpanIndex,delete e.start.leftSpanID}if(void 0!==e.end.offsetRight){let t=0;const n=_o(e.end.paragraph);for(let r=void 0===e.end.rightSpanIndex?n.length-1:e.end.rightSpanIndex-1;r>=0;r--){const o=n[r];if(e.end.offsetRight>=t&&e.end.offsetRight<=t+o.text.length){e.end.spanIndex=r,e.end.span=o,e.end.spanID=o.id,e.end.offset=o.text.length-(e.end.offsetRight-t);break}t+=o.text.length}delete e.end.offsetRight,delete e.start.rightSpanIndex,delete e.start.rightSpanID}}(0,n),this.$nextTick((()=>{bo(this.$refs.container,n.start,n.end)}))}return t.stopPropagation(),t.preventDefault(),!1}if("Enter"===t.key){if(t.stopPropagation(),t.preventDefault(),this.applyViewChangesNow(),!this.paragraphs)return this.paragraphs=[Io(),Io()],this.applyViewChangesNow(!1),void this.$nextTick((()=>{bo(this.$refs.container,yo(Eo(this.paragraphs,{paragraphIndex:1,offset:0}),this.$refs.container))}));this.$nextTick((()=>{const t=this.paragraphs,e=go();e.collapsed&&(Eo(t,e.start),Mo(t,e.start,[Io(),Io()]),this.$nextTick((()=>{bo(this.$refs.container,yo(Oo(t,e.start),this.$refs.container))})))}))}else if("Backspace"===t.key){const{start:e,end:n,collapsed:r}=this.applyViewChangesNow();if(!r)return void console.debug("warning: range backspace had to be handler elsewhere");if(e.offset>0||e.spanIndex>0)return;t.stopPropagation(),t.preventDefault(),this.$nextTick((()=>{const t=this.paragraphs;this.paragraphs;const e=go().start;Eo(t,e);const n=Eo(t,{paragraphIndex:e.paragraphIndex,spanIndex:0,offset:0});if(e.paragraphIndex>0){const t=this.paragraphs,r=function(t,e,n){console.assert(void 0!==t,"data not set"),console.assert(e.paragraphIndex>=0,"pointer paragraphIndex missing or invalid");const r=t;let o=e.paragraphIndex,s=e.spanIndex;if(void 0!==s&&-1!==s)if(s>0)s--;else{if(!(o>0))return;o--,s=_o(r[o]).length>0?_o(r[o]).length-1:void 0}else{if(!(o>0))return;o--,s=_o(r[o]).length>0?_o(r[o]).length-1:void 0}return void 0===n&&(n=-1),Eo(t,{paragraphIndex:o,spanIndex:s,offset:n})}(t,n),o=$o(t,r,e),s=o.length>0&&o[0].id===r.paragraphID?e:r;this.$nextTick((()=>{s.node=void 0,bo(this.$refs.container,s)}))}}))}else if("Delete"===t.key){const{start:e,end:n,collapsed:r}=this.applyViewChangesNow();if(!r)return console.debug("warning: range deletes must be handled elsewhere"),t.stopPropagation(),void t.preventDefault();if(!e||e.spanIndex<e.paragraph.spans.length-1||e.span&&e.offset<e.span.text.length)return;t.stopPropagation(),t.preventDefault(),this.$nextTick((()=>{const t=this.paragraphs,n=this.paragraphs;if(r){const r=n[e.paragraphIndex].spans,o=Eo(t,{paragraphIndex:e.paragraphIndex,spanIndex:r.length-1,offset:-1});if(e.paragraphIndex<n.length-1){const t=this.paragraphs;0===e.paragraph.spans.length?(t.splice(e.paragraphIndex,1),e.spanIndex=0,e.paragraphID=0):($o(t,e,Oo(t,o)),void 0===e.spanIndex&&void 0===e.spanID&&(e.spanIndex=0)),this.$nextTick((()=>{e.node=void 0,Eo(t,e),bo(this.$refs.container,e)}))}}}))}else if((t.ctrlKey||t.metaKey)&&t.shiftKey&&"KeyH"===t.code){const e=this.getSpanSelection();console.debug("remove highlighting from spans",e);for(const t of e)for(const e of t.spans)e.highlighted=!1;t.preventDefault(),t.stopPropagation()}else if((t.ctrlKey||t.metaKey)&&"KeyH"===t.code){const e=this.getSpanSelection();console.debug("highlight spans",e);for(const t of e)for(const e of t.spans)e.highlighted=!0;t.preventDefault(),t.stopPropagation()}else e.isCollapsed||(console.debug("PREVENT RANGE REPLACE"),t.preventDefault(),t.stopPropagation());return!0},onDragStart(t){t.stopPropagation(),t.preventDefault()},onPaste(t){console.debug("editable-spans paste",t),t.stopPropagation(),t.preventDefault();const{start:e,end:n,collapsed:r}=this.applyViewChangesNow();console.debug("PASTE | DATA",this.paragraphs);const o=t.clipboardData.getData("application/ruta"),s=t.clipboardData.getData("text/html"),i=t.clipboardData.getData("text/plain");if(0===o.length&&0===s.length&&0===i.length)return;const a=this.paragraphs;if(Eo(a,e),!r){const t=this.paragraphs;Eo(t,e),Eo(t,n),$o(t,e,n)}if(o.length>0){const t=JSON.parse(o);for(const e of t){e.id=ho();for(const t of e.spans)t.id=ho()}const n=Mo(a,e,t);this.$nextTick((()=>{bo(this.$refs.container,n.end)}))}else if(s.length>0){const t=document.createElement("html");t.innerHTML=s,console.debug(s);const e=t.querySelector("head > style");if(e){document.implementation.createHTMLDocument("").body.appendChild(e)}const n=t.querySelector("body");console.debug(n);const r=function(t,e){let n=[];if(e)for(const u of e)if(-1===u.selectorText.search(/[#:\[\]>]/g)&&"underline"===u.style.textDecorationLine){const t=u.selectorText.split(",");for(const e of t){const t=e.split(":")[0].split(".");t.shift(),n=t}}const r=[],o=[];let s,i,a={},l=t,c=0;for(;l;){const t=l.childNodes;for(i=t.length;c<i;c++){const e=t[c];if(e.nodeType===Node.TEXT_NODE&&e.nodeValue.length>0){if(0===e.nodeValue.trim().length)continue;s||(s={spans:[],id:ho()},o.push(s)),s.spans.push({text:e.nodeValue,format:Object.assign({},a),id:ho()})}else if(e.nodeType===Node.ELEMENT_NODE){Object.assign({},a);const t=Object.assign({},a);if("B"===e.nodeName||"STRONG"===e.nodeName)a.bold=!0;else if("I"===e.nodeName||"EM"===e.nodeName)a.italic=!0;else if("U"===e.nodeName)a.underline=!0;else if("SUP"===e.nodeName)a.superscript=!0;else if("SUB"===e.nodeName)a.subscript=!0;else if("SPAN"===e.nodeName){for(const r of e.classList)if(-1!==n.indexOf(r)){a.underline=!0;break}}else"P"===e.nodeName?(s={spans:[],id:ho()},o.push(s)):"LI"===e.nodeName&&(s={spans:[],id:ho(),bullet:!0},o.push(s));if(l.childNodes&&l.childNodes.length>0){r.push({node:l,i:c+1,fmt:Object.assign({},t)}),c=0,l=e,i=l.childNodes.length;break}}}if(c>=i){if(!(r.length>0)){l=null;break}{"P"!==l.nodeName&&"LI"!==l.nodeName||(s=void 0);const t=r.pop();c=t.i,l=t.node,a=t.fmt}}}return o}(n,e&&e.sheet.cssRules);console.debug(JSON.stringify(r,void 0,2));const o=go(),i=this.paragraphs,a=o.start;if(Eo(i,a),!o.collapsed){const t=this.paragraphs,e=go(),n=e.start;Eo(t,n);const r=e.end;Eo(t,r),$o(t,n,r)}for(const s of r){s.id=ho();for(const t of s.spans)t.id=ho()}console.debug(i,a,r),Mo(i,a,r)}else i.length>0&&document.execCommand("insertHTML",!1,i)},onCut(t){this.onCopy(t);if(!document.getSelection().isCollapsed){const t=this.paragraphs,e=go(),n=e.start;Eo(t,n);const r=e.end;Eo(t,r),$o(t,n,r)}},onCopy(t){const e=this.paragraphs,n=go();if(!n.isCollapsed){const r=n.start;Eo(e,r);const o=n.end;Eo(e,o);const s=$o(e,r,o,To.Copy);t.clipboardData.setData("application/ruta",JSON.stringify(s));const i=[];for(const t of s){const e=[];for(const n of t.spans)e.push(n.text);i.push(e.join(""))}t.clipboardData.setData("text/plain",i.join("\n")),console.debug("COPY HTML",this.asHTML(s)),t.clipboardData.setData("text/html",this.asHTML(s))}t.stopPropagation(),t.preventDefault()}},errorCaptured:(t,e,n)=>(console.debug("EDITOR ERROR CAPTURED",t,e,n),!0)},Lo=["contenteditable"],Fo=["data-id","contenteditable"],Uo=["data-first","data-last","contenteditable","data-id","data-time","data-duration","data-confidence","onClick","title"];Vo.render=function(t,e,n,o,s,i){return Pn(),jn("div",{style:{border:"1px solid #ccc"},contenteditable:this.editable,spellcheck:"false",v_if:"enabled",key:s.kk,onInput:e[0]||(e[0]=(...t)=>i.onInput&&i.onInput(...t)),onKeydown:e[1]||(e[1]=(...t)=>i.onKeydown&&i.onKeydown(...t)),onPaste:e[2]||(e[2]=(...t)=>i.onPaste&&i.onPaste(...t)),onCut:e[3]||(e[3]=(...t)=>i.onCut&&i.onCut(...t)),onCopy:e[4]||(e[4]=(...t)=>i.onCopy&&i.onCopy(...t)),onSelectstart:e[5]||(e[5]=(...t)=>i.selectStart&&i.selectStart(...t)),onMouseup:e[6]||(e[6]=(...t)=>i.selectEnd&&i.selectEnd(...t)),onDragstart:e[7]||(e[7]=(...t)=>i.onDragStart&&i.onDragStart(...t)),ref:"container",class:"transcript"},[(Pn(!0),jn(Nn,null,Qn(s.paragraphs,((t,e)=>(Pn(),jn("div",{"data-id":t.id,key:t.id,contenteditable:this.editable,class:a([{"list-item":t.bullet},"paragraph"])},[(Pn(!0),jn(Nn,null,Qn(t.spans,((e,o)=>(Pn(),jn("span",{key:e.id,"data-first":0==o,"data-last":o>=t.spans.length-1,contenteditable:this.editable,v_text:"span.text",v_if:"paragraph && paragraph.spans.length > 0","data-id":e.id,"data-time":e.time,"data-duration":e.duration,"data-confidence":e.confidence,class:a(["span token",{selected:e.time<=n.time&&n.time<e.time+e.duration,past:e.time+e.duration<=n.time,highlighted:e.highlighted,bold:e.format&&e.format.bold,italic:e.format&&e.format.italic,underline:e.format&&e.format.underline,superscript:e.format&&e.format.superscript,subscript:e.format&&e.format.subscript}]),onClick:t=>i.spanSelected(e,t),style:r(this.showConfidence?`opacity: ${Math.pow(e.confidence,.5)/2+.5};`:""),title:this.showConfidence?`Confidence: ${e.confidence}`:""},l(e.text),15,Uo)))),128))],10,Fo)))),128))],40,Lo)},Vo.__scopeId="data-v-f246ea9c";var Bo={value:()=>{}};function Ko(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Ho(r)}function Ho(t){this._=t}function Wo(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function qo(t,e){for(var n,r=0,o=t.length;r<o;++r)if((n=t[r]).name===e)return n.value}function zo(t,e,n){for(var r=0,o=t.length;r<o;++r)if(t[r].name===e){t[r]=Bo,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}Ho.prototype=Ko.prototype={constructor:Ho,on:function(t,e){var n,r=this._,o=Wo(t+"",r),s=-1,i=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++s<i;)if(n=(t=o[s]).type)r[n]=zo(r[n],t.name,e);else if(null==e)for(n in r)r[n]=zo(r[n],t.name,null);return this}for(;++s<i;)if((n=(t=o[s]).type)&&(n=qo(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Ho(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),s=0;s<n;++s)o[s]=arguments[s+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(s=0,n=(r=this._[t]).length;s<n;++s)r[s].value.apply(e,o)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],o=0,s=r.length;o<s;++o)r[o].value.apply(e,n)}};var Xo="http://www.w3.org/1999/xhtml",Yo={svg:"http://www.w3.org/2000/svg",xhtml:Xo,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Go(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),Yo.hasOwnProperty(e)?{space:Yo[e],local:t}:t}function Jo(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===Xo&&e.documentElement.namespaceURI===Xo?e.createElement(t):e.createElementNS(n,t)}}function Zo(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function Qo(t){var e=Go(t);return(e.local?Zo:Jo)(e)}function ts(){}function es(t){return null==t?ts:function(){return this.querySelector(t)}}function ns(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function rs(){return[]}function os(t){return null==t?rs:function(){return this.querySelectorAll(t)}}function ss(t){return function(){return this.matches(t)}}function is(t){return function(e){return e.matches(t)}}var as=Array.prototype.find;function ls(){return this.firstElementChild}var cs=Array.prototype.filter;function us(){return Array.from(this.children)}function fs(t){return new Array(t.length)}function ps(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function ds(t){return function(){return t}}function hs(t,e,n,r,o,s){for(var i,a=0,l=e.length,c=s.length;a<c;++a)(i=e[a])?(i.__data__=s[a],r[a]=i):n[a]=new ps(t,s[a]);for(;a<l;++a)(i=e[a])&&(o[a]=i)}function gs(t,e,n,r,o,s,i){var a,l,c,u=new Map,f=e.length,p=s.length,d=new Array(f);for(a=0;a<f;++a)(l=e[a])&&(d[a]=c=i.call(l,l.__data__,a,e)+"",u.has(c)?o[a]=l:u.set(c,l));for(a=0;a<p;++a)c=i.call(t,s[a],a,s)+"",(l=u.get(c))?(r[a]=l,l.__data__=s[a],u.delete(c)):n[a]=new ps(t,s[a]);for(a=0;a<f;++a)(l=e[a])&&u.get(d[a])===l&&(o[a]=l)}function vs(t){return t.__data__}function ms(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function ys(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function bs(t){return function(){this.removeAttribute(t)}}function _s(t){return function(){this.removeAttributeNS(t.space,t.local)}}function xs(t,e){return function(){this.setAttribute(t,e)}}function ws(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function Is(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function ks(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function Ds(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Ss(t){return function(){this.style.removeProperty(t)}}function Ns(t,e,n){return function(){this.style.setProperty(t,e,n)}}function Cs(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function As(t,e){return t.style.getPropertyValue(e)||Ds(t).getComputedStyle(t,null).getPropertyValue(e)}function Es(t){return function(){delete this[t]}}function Os(t,e){return function(){this[t]=e}}function Ts(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function Ps(t){return t.trim().split(/^|\s+/)}function $s(t){return t.classList||new Ms(t)}function Ms(t){this._node=t,this._names=Ps(t.getAttribute("class")||"")}function Rs(t,e){for(var n=$s(t),r=-1,o=e.length;++r<o;)n.add(e[r])}function js(t,e){for(var n=$s(t),r=-1,o=e.length;++r<o;)n.remove(e[r])}function Vs(t){return function(){Rs(this,t)}}function Ls(t){return function(){js(this,t)}}function Fs(t,e){return function(){(e.apply(this,arguments)?Rs:js)(this,t)}}function Us(){this.textContent=""}function Bs(t){return function(){this.textContent=t}}function Ks(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Hs(){this.innerHTML=""}function Ws(t){return function(){this.innerHTML=t}}function qs(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function zs(){this.nextSibling&&this.parentNode.appendChild(this)}function Xs(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Ys(){return null}function Gs(){var t=this.parentNode;t&&t.removeChild(this)}function Js(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Zs(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Qs(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function ti(t){return function(){var e=this.__on;if(e){for(var n,r=0,o=-1,s=e.length;r<s;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++o]=n:this.removeEventListener(n.type,n.listener,n.options);++o?e.length=o:delete this.__on}}}function ei(t,e,n){return function(){var r,o=this.__on,s=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(o)for(var i=0,a=o.length;i<a;++i)if((r=o[i]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=s,r.options=n),void(r.value=e);this.addEventListener(t.type,s,n),r={type:t.type,name:t.name,value:e,listener:s,options:n},o?o.push(r):this.__on=[r]}}function ni(t,e,n){var r=Ds(t),o=r.CustomEvent;"function"==typeof o?o=new o(e,n):(o=r.document.createEvent("Event"),n?(o.initEvent(e,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(e,!1,!1)),t.dispatchEvent(o)}function ri(t,e){return function(){return ni(this,t,e)}}function oi(t,e){return function(){return ni(this,t,e.apply(this,arguments))}}ps.prototype={constructor:ps,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},Ms.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var si=[null];function ii(t,e){this._groups=t,this._parents=e}function ai(){return new ii([[document.documentElement]],si)}function li(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function ci(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function ui(){}ii.prototype=ai.prototype={constructor:ii,select:function(t){"function"!=typeof t&&(t=es(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var s,i,a=e[o],l=a.length,c=r[o]=new Array(l),u=0;u<l;++u)(s=a[u])&&(i=t.call(s,s.__data__,u,a))&&("__data__"in s&&(i.__data__=s.__data__),c[u]=i);return new ii(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return ns(t.apply(this,arguments))}}(t):os(t);for(var e=this._groups,n=e.length,r=[],o=[],s=0;s<n;++s)for(var i,a=e[s],l=a.length,c=0;c<l;++c)(i=a[c])&&(r.push(t.call(i,i.__data__,c,a)),o.push(i));return new ii(r,o)},selectChild:function(t){return this.select(null==t?ls:function(t){return function(){return as.call(this.children,t)}}("function"==typeof t?t:is(t)))},selectChildren:function(t){return this.selectAll(null==t?us:function(t){return function(){return cs.call(this.children,t)}}("function"==typeof t?t:is(t)))},filter:function(t){"function"!=typeof t&&(t=ss(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var s,i=e[o],a=i.length,l=r[o]=[],c=0;c<a;++c)(s=i[c])&&t.call(s,s.__data__,c,i)&&l.push(s);return new ii(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,vs);var n=e?gs:hs,r=this._parents,o=this._groups;"function"!=typeof t&&(t=ds(t));for(var s=o.length,i=new Array(s),a=new Array(s),l=new Array(s),c=0;c<s;++c){var u=r[c],f=o[c],p=f.length,d=ms(t.call(u,u&&u.__data__,c,r)),h=d.length,g=a[c]=new Array(h),v=i[c]=new Array(h),m=l[c]=new Array(p);n(u,f,g,v,m,d,e);for(var y,b,_=0,x=0;_<h;++_)if(y=g[_]){for(_>=x&&(x=_+1);!(b=v[x])&&++x<h;);y._next=b||null}}return(i=new ii(i,r))._enter=a,i._exit=l,i},enter:function(){return new ii(this._enter||this._groups.map(fs),this._parents)},exit:function(){return new ii(this._exit||this._groups.map(fs),this._parents)},join:function(t,e,n){var r=this.enter(),o=this,s=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=e&&(o=e(o))&&(o=o.selection()),null==n?s.remove():n(s),r&&o?r.merge(o).order():o},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,r=e._groups,o=n.length,s=r.length,i=Math.min(o,s),a=new Array(o),l=0;l<i;++l)for(var c,u=n[l],f=r[l],p=u.length,d=a[l]=new Array(p),h=0;h<p;++h)(c=u[h]||f[h])&&(d[h]=c);for(;l<o;++l)a[l]=n[l];return new ii(a,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,o=t[e],s=o.length-1,i=o[s];--s>=0;)(r=o[s])&&(i&&4^r.compareDocumentPosition(i)&&i.parentNode.insertBefore(r,i),i=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=ys);for(var n=this._groups,r=n.length,o=new Array(r),s=0;s<r;++s){for(var i,a=n[s],l=a.length,c=o[s]=new Array(l),u=0;u<l;++u)(i=a[u])&&(c[u]=i);c.sort(e)}return new ii(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],o=0,s=r.length;o<s;++o){var i=r[o];if(i)return i}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var o,s=e[n],i=0,a=s.length;i<a;++i)(o=s[i])&&t.call(o,o.__data__,i,s);return this},attr:function(t,e){var n=Go(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?_s:bs:"function"==typeof e?n.local?ks:Is:n.local?ws:xs)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?Ss:"function"==typeof e?Cs:Ns)(t,e,null==n?"":n)):As(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?Es:"function"==typeof e?Ts:Os)(t,e)):this.node()[t]},classed:function(t,e){var n=Ps(t+"");if(arguments.length<2){for(var r=$s(this.node()),o=-1,s=n.length;++o<s;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof e?Fs:e?Vs:Ls)(n,e))},text:function(t){return arguments.length?this.each(null==t?Us:("function"==typeof t?Ks:Bs)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Hs:("function"==typeof t?qs:Ws)(t)):this.node().innerHTML},raise:function(){return this.each(zs)},lower:function(){return this.each(Xs)},append:function(t){var e="function"==typeof t?t:Qo(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:Qo(t),r=null==e?Ys:"function"==typeof e?e:es(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Gs)},clone:function(t){return this.select(t?Zs:Js)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,o,s=Qs(t+""),i=s.length;if(!(arguments.length<2)){for(a=e?ei:ti,r=0;r<i;++r)this.each(a(s[r],e,n));return this}var a=this.node().__on;if(a)for(var l,c=0,u=a.length;c<u;++c)for(r=0,l=a[c];r<i;++r)if((o=s[r]).type===l.type&&o.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?oi:ri)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,o=t[e],s=0,i=o.length;s<i;++s)(r=o[s])&&(yield r)}};var fi=1/.7,pi="\\s*([+-]?\\d+)\\s*",di="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",hi="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",gi=/^#([0-9a-f]{3,8})$/,vi=new RegExp("^rgb\\("+[pi,pi,pi]+"\\)$"),mi=new RegExp("^rgb\\("+[hi,hi,hi]+"\\)$"),yi=new RegExp("^rgba\\("+[pi,pi,pi,di]+"\\)$"),bi=new RegExp("^rgba\\("+[hi,hi,hi,di]+"\\)$"),_i=new RegExp("^hsl\\("+[di,hi,hi]+"\\)$"),xi=new RegExp("^hsla\\("+[di,hi,hi,di]+"\\)$"),wi={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ii(){return this.rgb().formatHex()}function ki(){return this.rgb().formatRgb()}function Di(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=gi.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Si(e):3===n?new Ei(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?Ni(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?Ni(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=vi.exec(t))?new Ei(e[1],e[2],e[3],1):(e=mi.exec(t))?new Ei(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=yi.exec(t))?Ni(e[1],e[2],e[3],e[4]):(e=bi.exec(t))?Ni(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=_i.exec(t))?$i(e[1],e[2]/100,e[3]/100,1):(e=xi.exec(t))?$i(e[1],e[2]/100,e[3]/100,e[4]):wi.hasOwnProperty(t)?Si(wi[t]):"transparent"===t?new Ei(NaN,NaN,NaN,0):null}function Si(t){return new Ei(t>>16&255,t>>8&255,255&t,1)}function Ni(t,e,n,r){return r<=0&&(t=e=n=NaN),new Ei(t,e,n,r)}function Ci(t){return t instanceof ui||(t=Di(t)),t?new Ei((t=t.rgb()).r,t.g,t.b,t.opacity):new Ei}function Ai(t,e,n,r){return 1===arguments.length?Ci(t):new Ei(t,e,n,null==r?1:r)}function Ei(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Oi(){return"#"+Pi(this.r)+Pi(this.g)+Pi(this.b)}function Ti(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Pi(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function $i(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Ri(t,e,n,r)}function Mi(t){if(t instanceof Ri)return new Ri(t.h,t.s,t.l,t.opacity);if(t instanceof ui||(t=Di(t)),!t)return new Ri;if(t instanceof Ri)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,o=Math.min(e,n,r),s=Math.max(e,n,r),i=NaN,a=s-o,l=(s+o)/2;return a?(i=e===s?(n-r)/a+6*(n<r):n===s?(r-e)/a+2:(e-n)/a+4,a/=l<.5?s+o:2-s-o,i*=60):a=l>0&&l<1?0:i,new Ri(i,a,l,t.opacity)}function Ri(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function ji(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}li(ui,Di,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Ii,formatHex:Ii,formatHsl:function(){return Mi(this).formatHsl()},formatRgb:ki,toString:ki}),li(Ei,Ai,ci(ui,{brighter:function(t){return t=null==t?fi:Math.pow(fi,t),new Ei(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ei(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Oi,formatHex:Oi,formatRgb:Ti,toString:Ti})),li(Ri,(function(t,e,n,r){return 1===arguments.length?Mi(t):new Ri(t,e,n,null==r?1:r)}),ci(ui,{brighter:function(t){return t=null==t?fi:Math.pow(fi,t),new Ri(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ri(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,o=2*n-r;return new Ei(ji(t>=240?t-240:t+120,o,r),ji(t,o,r),ji(t<120?t+240:t-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Vi=t=>()=>t;function Li(t){return 1==(t=+t)?Fi:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Vi(isNaN(e)?n:e)}}function Fi(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Vi(isNaN(t)?e:t)}var Ui=function t(e){var n=Li(e);function r(t,e){var r=n((t=Ai(t)).r,(e=Ai(e)).r),o=n(t.g,e.g),s=n(t.b,e.b),i=Fi(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=o(e),t.b=s(e),t.opacity=i(e),t+""}}return r.gamma=t,r}(1);function Bi(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var Ki=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Hi=new RegExp(Ki.source,"g");function Wi(t,e){var n,r,o,s=Ki.lastIndex=Hi.lastIndex=0,i=-1,a=[],l=[];for(t+="",e+="";(n=Ki.exec(t))&&(r=Hi.exec(e));)(o=r.index)>s&&(o=e.slice(s,o),a[i]?a[i]+=o:a[++i]=o),(n=n[0])===(r=r[0])?a[i]?a[i]+=r:a[++i]=r:(a[++i]=null,l.push({i:i,x:Bi(n,r)})),s=Hi.lastIndex;return s<e.length&&(o=e.slice(s),a[i]?a[i]+=o:a[++i]=o),a.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)a[(n=l[r]).i]=n.x(t);return a.join("")})}var qi,zi=180/Math.PI,Xi={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Yi(t,e,n,r,o,s){var i,a,l;return(i=Math.sqrt(t*t+e*e))&&(t/=i,e/=i),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(a=Math.sqrt(n*n+r*r))&&(n/=a,r/=a,l/=a),t*r<e*n&&(t=-t,e=-e,l=-l,i=-i),{translateX:o,translateY:s,rotate:Math.atan2(e,t)*zi,skewX:Math.atan(l)*zi,scaleX:i,scaleY:a}}function Gi(t,e,n,r){function o(t){return t.length?t.pop()+" ":""}return function(s,i){var a=[],l=[];return s=t(s),i=t(i),function(t,r,o,s,i,a){if(t!==o||r!==s){var l=i.push("translate(",null,e,null,n);a.push({i:l-4,x:Bi(t,o)},{i:l-2,x:Bi(r,s)})}else(o||s)&&i.push("translate("+o+e+s+n)}(s.translateX,s.translateY,i.translateX,i.translateY,a,l),function(t,e,n,s){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),s.push({i:n.push(o(n)+"rotate(",null,r)-2,x:Bi(t,e)})):e&&n.push(o(n)+"rotate("+e+r)}(s.rotate,i.rotate,a,l),function(t,e,n,s){t!==e?s.push({i:n.push(o(n)+"skewX(",null,r)-2,x:Bi(t,e)}):e&&n.push(o(n)+"skewX("+e+r)}(s.skewX,i.skewX,a,l),function(t,e,n,r,s,i){if(t!==n||e!==r){var a=s.push(o(s)+"scale(",null,",",null,")");i.push({i:a-4,x:Bi(t,n)},{i:a-2,x:Bi(e,r)})}else 1===n&&1===r||s.push(o(s)+"scale("+n+","+r+")")}(s.scaleX,s.scaleY,i.scaleX,i.scaleY,a,l),s=i=null,function(t){for(var e,n=-1,r=l.length;++n<r;)a[(e=l[n]).i]=e.x(t);return a.join("")}}}var Ji,Zi,Qi=Gi((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?Xi:Yi(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),ta=Gi((function(t){return null==t?Xi:(qi||(qi=document.createElementNS("http://www.w3.org/2000/svg","g")),qi.setAttribute("transform",t),(t=qi.transform.baseVal.consolidate())?Yi((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Xi)}),", ",")",")"),ea=0,na=0,ra=0,oa=0,sa=0,ia=0,aa="object"==typeof performance&&performance.now?performance:Date,la="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ca(){return sa||(la(ua),sa=aa.now()+ia)}function ua(){sa=0}function fa(){this._call=this._time=this._next=null}function pa(t,e,n){var r=new fa;return r.restart(t,e,n),r}function da(){sa=(oa=aa.now())+ia,ea=na=0;try{!function(){ca(),++ea;for(var t,e=Ji;e;)(t=sa-e._time)>=0&&e._call.call(void 0,t),e=e._next;--ea}()}finally{ea=0,function(){var t,e,n=Ji,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Ji=e);Zi=t,ga(r)}(),sa=0}}function ha(){var t=aa.now(),e=t-oa;e>1e3&&(ia-=e,oa=t)}function ga(t){ea||(na&&(na=clearTimeout(na)),t-sa>24?(t<1/0&&(na=setTimeout(da,t-aa.now()-ia)),ra&&(ra=clearInterval(ra))):(ra||(oa=aa.now(),ra=setInterval(ha,1e3)),ea=1,la(da)))}function va(t,e,n){var r=new fa;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}fa.prototype=pa.prototype={constructor:fa,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?ca():+n)+(null==e?0:+e),this._next||Zi===this||(Zi?Zi._next=this:Ji=this,Zi=this),this._call=t,this._time=n,ga()},stop:function(){this._call&&(this._call=null,this._time=1/0,ga())}};var ma=Ko("start","end","cancel","interrupt"),ya=[];function ba(t,e,n,r,o,s){var i=t.__transition;if(i){if(n in i)return}else t.__transition={};!function(t,e,n){var r,o=t.__transition;function s(t){n.state=1,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)}function i(s){var c,u,f,p;if(1!==n.state)return l();for(c in o)if((p=o[c]).name===n.name){if(3===p.state)return va(i);4===p.state?(p.state=6,p.timer.stop(),p.on.call("interrupt",t,t.__data__,p.index,p.group),delete o[c]):+c<e&&(p.state=6,p.timer.stop(),p.on.call("cancel",t,t.__data__,p.index,p.group),delete o[c])}if(va((function(){3===n.state&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(s))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),c=0,u=-1;c<f;++c)(p=n.tween[c].value.call(t,t.__data__,n.index,n.group))&&(r[++u]=p);r.length=u+1}}function a(e){for(var o=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(l),n.state=5,1),s=-1,i=r.length;++s<i;)r[s].call(t,o);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),l())}function l(){for(var r in n.state=6,n.timer.stop(),delete o[e],o)return;delete t.__transition}o[e]=n,n.timer=pa(s,0,n.time)}(t,n,{name:e,index:r,group:o,on:ma,tween:ya,time:s.time,delay:s.delay,duration:s.duration,ease:s.ease,timer:null,state:0})}function _a(t,e){var n=wa(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function xa(t,e){var n=wa(t,e);if(n.state>3)throw new Error("too late; already running");return n}function wa(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function Ia(t,e){var n,r;return function(){var o=xa(this,t),s=o.tween;if(s!==n)for(var i=0,a=(r=n=s).length;i<a;++i)if(r[i].name===e){(r=r.slice()).splice(i,1);break}o.tween=r}}function ka(t,e,n){var r,o;if("function"!=typeof n)throw new Error;return function(){var s=xa(this,t),i=s.tween;if(i!==r){o=(r=i).slice();for(var a={name:e,value:n},l=0,c=o.length;l<c;++l)if(o[l].name===e){o[l]=a;break}l===c&&o.push(a)}s.tween=o}}function Da(t,e,n){var r=t._id;return t.each((function(){var t=xa(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return wa(t,r).value[e]}}function Sa(t,e){var n;return("number"==typeof e?Bi:e instanceof Di?Ui:(n=Di(e))?(e=n,Ui):Wi)(t,e)}function Na(t){return function(){this.removeAttribute(t)}}function Ca(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Aa(t,e,n){var r,o,s=n+"";return function(){var i=this.getAttribute(t);return i===s?null:i===r?o:o=e(r=i,n)}}function Ea(t,e,n){var r,o,s=n+"";return function(){var i=this.getAttributeNS(t.space,t.local);return i===s?null:i===r?o:o=e(r=i,n)}}function Oa(t,e,n){var r,o,s;return function(){var i,a,l=n(this);if(null!=l)return(i=this.getAttribute(t))===(a=l+"")?null:i===r&&a===o?s:(o=a,s=e(r=i,l));this.removeAttribute(t)}}function Ta(t,e,n){var r,o,s;return function(){var i,a,l=n(this);if(null!=l)return(i=this.getAttributeNS(t.space,t.local))===(a=l+"")?null:i===r&&a===o?s:(o=a,s=e(r=i,l));this.removeAttributeNS(t.space,t.local)}}function Pa(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function $a(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function Ma(t,e){var n,r;function o(){var o=e.apply(this,arguments);return o!==r&&(n=(r=o)&&$a(t,o)),n}return o._value=e,o}function Ra(t,e){var n,r;function o(){var o=e.apply(this,arguments);return o!==r&&(n=(r=o)&&Pa(t,o)),n}return o._value=e,o}function ja(t,e){return function(){_a(this,t).delay=+e.apply(this,arguments)}}function Va(t,e){return e=+e,function(){_a(this,t).delay=e}}function La(t,e){return function(){xa(this,t).duration=+e.apply(this,arguments)}}function Fa(t,e){return e=+e,function(){xa(this,t).duration=e}}function Ua(t,e){if("function"!=typeof e)throw new Error;return function(){xa(this,t).ease=e}}function Ba(t,e,n){var r,o,s=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?_a:xa;return function(){var i=s(this,t),a=i.on;a!==r&&(o=(r=a).copy()).on(e,n),i.on=o}}var Ka=ai.prototype.constructor;function Ha(t){return function(){this.style.removeProperty(t)}}function Wa(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function qa(t,e,n){var r,o;function s(){var s=e.apply(this,arguments);return s!==o&&(r=(o=s)&&Wa(t,s,n)),r}return s._value=e,s}function za(t){return function(e){this.textContent=t.call(this,e)}}function Xa(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&za(r)),e}return r._value=t,r}var Ya=0;function Ga(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Ja(){return++Ya}var Za=ai.prototype;Ga.prototype={constructor:Ga,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=es(t));for(var r=this._groups,o=r.length,s=new Array(o),i=0;i<o;++i)for(var a,l,c=r[i],u=c.length,f=s[i]=new Array(u),p=0;p<u;++p)(a=c[p])&&(l=t.call(a,a.__data__,p,c))&&("__data__"in a&&(l.__data__=a.__data__),f[p]=l,ba(f[p],e,n,p,f,wa(a,n)));return new Ga(s,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=os(t));for(var r=this._groups,o=r.length,s=[],i=[],a=0;a<o;++a)for(var l,c=r[a],u=c.length,f=0;f<u;++f)if(l=c[f]){for(var p,d=t.call(l,l.__data__,f,c),h=wa(l,n),g=0,v=d.length;g<v;++g)(p=d[g])&&ba(p,e,n,g,d,h);s.push(d),i.push(l)}return new Ga(s,i,e,n)},selectChild:Za.selectChild,selectChildren:Za.selectChildren,filter:function(t){"function"!=typeof t&&(t=ss(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var s,i=e[o],a=i.length,l=r[o]=[],c=0;c<a;++c)(s=i[c])&&t.call(s,s.__data__,c,i)&&l.push(s);return new Ga(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,o=n.length,s=Math.min(r,o),i=new Array(r),a=0;a<s;++a)for(var l,c=e[a],u=n[a],f=c.length,p=i[a]=new Array(f),d=0;d<f;++d)(l=c[d]||u[d])&&(p[d]=l);for(;a<r;++a)i[a]=e[a];return new Ga(i,this._parents,this._name,this._id)},selection:function(){return new Ka(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Ja(),r=this._groups,o=r.length,s=0;s<o;++s)for(var i,a=r[s],l=a.length,c=0;c<l;++c)if(i=a[c]){var u=wa(i,e);ba(i,t,n,c,a,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new Ga(r,this._parents,t,n)},call:Za.call,nodes:Za.nodes,node:Za.node,size:Za.size,empty:Za.empty,each:Za.each,on:function(t,e){var n=this._id;return arguments.length<2?wa(this.node(),n).on.on(t):this.each(Ba(n,t,e))},attr:function(t,e){var n=Go(t),r="transform"===n?ta:Sa;return this.attrTween(t,"function"==typeof e?(n.local?Ta:Oa)(n,r,Da(this,"attr."+t,e)):null==e?(n.local?Ca:Na)(n):(n.local?Ea:Aa)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=Go(t);return this.tween(n,(r.local?Ma:Ra)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Qi:Sa;return null==e?this.styleTween(t,function(t,e){var n,r,o;return function(){var s=As(this,t),i=(this.style.removeProperty(t),As(this,t));return s===i?null:s===n&&i===r?o:o=e(n=s,r=i)}}(t,r)).on("end.style."+t,Ha(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,o,s;return function(){var i=As(this,t),a=n(this),l=a+"";return null==a&&(this.style.removeProperty(t),l=a=As(this,t)),i===l?null:i===r&&l===o?s:(o=l,s=e(r=i,a))}}(t,r,Da(this,"style."+t,e))).each(function(t,e){var n,r,o,s,i="style."+e,a="end."+i;return function(){var l=xa(this,t),c=l.on,u=null==l.value[i]?s||(s=Ha(e)):void 0;c===n&&o===u||(r=(n=c).copy()).on(a,o=u),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,o,s=n+"";return function(){var i=As(this,t);return i===s?null:i===r?o:o=e(r=i,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,qa(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Da(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,Xa(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,o=wa(this.node(),n).tween,s=0,i=o.length;s<i;++s)if((r=o[s]).name===t)return r.value;return null}return this.each((null==e?Ia:ka)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?ja:Va)(e,t)):wa(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?La:Fa)(e,t)):wa(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Ua(e,t)):wa(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;xa(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,o=n.size();return new Promise((function(s,i){var a={value:i},l={value:function(){0==--o&&s()}};n.each((function(){var n=xa(this,r),o=n.on;o!==t&&((e=(t=o).copy())._.cancel.push(a),e._.interrupt.push(a),e._.end.push(l)),n.on=e})),0===o&&s()}))},[Symbol.iterator]:Za[Symbol.iterator]};var Qa={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function tl(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}ai.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,o,s=t.__transition,i=!0;if(s){for(o in e=null==e?null:e+"",s)(n=s[o]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete s[o]):i=!1;i&&delete t.__transition}}(this,t)}))},ai.prototype.transition=function(t){var e,n;t instanceof Ga?(e=t._id,t=t._name):(e=Ja(),(n=Qa).time=ca(),t=null==t?null:t+"");for(var r=this._groups,o=r.length,s=0;s<o;++s)for(var i,a=r[s],l=a.length,c=0;c<l;++c)(i=a[c])&&ba(i,t,e,c,a,n||tl(i,e));return new Ga(r,this._parents,t,e)};const el={props:{modelValue:[Int16Array,Int32Array,Array],time:Number,duration:Number,selection:Object},data:()=>({waveform:void 0,svg:void 0,data:void 0}),async mounted(){this.$options.watch.modelValue.call(this,this.modelValue),this.resizeCheckInterval=setInterval((()=>{null==this.currentWidth||null==this.currentHeight||!this.$refs.svg||this.currentWidth==this.$refs.svg.clientWidth&&this.currentHeight==this.$refs.svg.clientHeight||this.draw()}),2e3)},watch:{modelValue(t){if(t)if(t instanceof Int16Array){const e=new Float32Array(t);this.data=e.map((t=>t/32768))}else t instanceof Float32Array||t instanceof Array&&t.length>0&&"number"==typeof t[0]&&t[0]>=-1&&t[0]<=1?this.data=t:this.data=void 0;else this.data=void 0;this.draw()},time(t){}},methods:{click(t){const e=t.offsetX/this.$refs.svg.clientWidth*this.duration;this.$emit("update:time",e)},draw(t,e){const n=this.data;t=t||this.$refs.svg.clientWidth,e=e||this.$refs.svg.clientHeight,this.currentWidth=t,this.currentHeight=e;const r="string"==typeof(o=this.$refs.svg)?new ii([[document.querySelector(o)]],[document.documentElement]):new ii([[o]],si);var o;if(!n)return void r.selectAll("*").remove();r.attr("height",e).attr("width",t);const s=function(t,e){var n=Math.round(t.length/e),r=[];const o=Math.min(n,1e3);for(var s=0;s<e;s++){for(var i=0,a=0,l=0;l<o&&!(s*n+l>=t.length);l++){var c=t[s*n+l];c>0?i+=c:a+=c}r.push([a/o,i/o])}return r}(n,1200);let i=0;for(const c of s)i+=-c[0]+c[1];i/=2*s.length;const a=.1*e/i,l=t/s.length;r.selectAll("rect").data(s).attr("x",(function(e,n){return n/s.length*t})).attr("y",(function(t,n){return.5*e-a*t[1]})).attr("width",l).attr("height",(function(t){return a*(t[1]-t[0])})).enter().append("rect").style("stroke","#342a40").style("stroke-width","0").style("fill","rgba(0,0,0,0.3)").attr("x",(function(e,n){return n/s.length*t})).attr("y",(function(t,n){return.5*e-a*t[1]})).attr("width",l).attr("height",(function(t){return a*(t[1]-t[0])})).exit().remove()}}},nl={ref:"svg",style:{"-border":"1px solid red",width:"100%",height:"100%"}};el.render=function(t,e,n,o,s,i){return Pn(),jn("div",{onClick:e[0]||(e[0]=(...t)=>i.click&&i.click(...t))},[(Pn(),jn("svg",nl,null,512)),n.selection?(Pn(),jn("div",{key:0,style:r([{position:"absolute",top:"0px",height:"100%",left:"0px","background-color":"#fffb","pointer-events":"none","border-left":"1px solid blue","border-right":"1px solid blue"},{left:n.selection.start/n.duration*100+"%",width:(n.selection.end-n.selection.start)/n.duration*100+"%"}])},null,4)):Xn("",!0),Hn("div",{style:r([{position:"absolute",top:"0px",height:"100%",width:"0px",border:"1px solid red",left:"0px"},{left:n.time/n.duration*100+"%"}]),ref:"head"},null,4)])},el.__scopeId="data-v-af4cf048";class rl{constructor(t){this.init(t)}init(t){this.close(),this.context=new AudioContext,this.context.onstatechange=t?()=>{t(this)}:()=>{t&&t||this.onstatechange(this)}}close(){this.context&&(this.context.close(),this.context=void 0)}resume(){this.context.resume()}get suspended(){return"suspended"===this.context.state}onstatechange(t){console.log("audio context state changed:",t.context.state)}async decodeAudioFileData(t){const e=await this.decodeAudioFileBuffer(t),n=this.bufferData(e);return{data:this.Float32ArrayToInt16Array(n),sampleRate:e.sampleRate,length:e.length,duration:e.duration,numberOfChannels:e.numberOfChannels}}async fetchAndDecodeAudioFile(t){const e=await this.fetchAudioFileAndDecode(t),n=this.bufferData(e);return{data:this.Float32ArrayToInt16Array(n),sampleRate:e.sampleRate,length:e.length,duration:e.duration,numberOfChannels:e.numberOfChannels}}async fetchAudioFileAndDecode(t){const e=await fetch(t);return await this.decodeAudioFileBuffer(await e.arrayBuffer())}async decodeAudioFileBuffer(t){const e=this.context;return await e.decodeAudioData(t)}Float32ArrayToInt16Array(t){return Int16Array.from(t.map((t=>32768*t)))}bufferData(t,{channel:e=0}={}){return t.getChannelData(e)}}var ol={components:{TranscriptEditor:Vo,Waveform:el},props:{transcript:{type:Object,default:{paragraphs:{}}},duration:{type:Number},url:{type:String},name:{},waveform:[Int16Array,Int32Array,Array,String],previewVideo:{type:Boolean,default:!0},onSave:{type:Function,default:async()=>console.log("onSave not implemented")},editable:{type:Boolean,default:!0}},data:()=>({position:0,selected:void 0,playing:!1,loaded:!1,isVideo:!1,_url:void 0,_duration:void 0,_waveform:void 0,pending_waveform:void 0,pending_duration:void 0,video_duration:void 0,saving:!1,version:0,lastSavedVersion:0,autosave:!1,decoderSuspended:!1,decodingAudio:!1,showConfidence:!1}),async mounted(){this.$options.watch.waveform.call(this,this.waveform),window.setInterval(this.saveAuto,5e3),window.addEventListener("keydown",this.onGlobalKeydown),this.decoder=new rl((t=>{this.decoderSuspended=this.decoder.suspended,this.decoder.suspended&&console.log("audio decoder suspended")})),this.decoderSuspended=this.decoder.suspended},beforeUnmount(){window.clearInterval(this.saveAuto),window.removeEventListener("keydown",this.onGlobalKeydown)},watch:{position(t){},transcript:{handler(t,e){},deep:!0},duration(t){this._duration=t},url(t){this._url=t},async waveform(t){if("string"==typeof t){const{data:e,duration:n}=await this.decodeAudioWaveform(t);this._waveform=e}else if(t instanceof File){const{data:e,duration:n}=await this.decoder.decodeAudioFileData(await t.arrayBuffer());this._waveform=e}else this._waveform=t}},computed:{synced(){return this.lastSavedVersion===this.version}},methods:{msToTime:function(t,{ms:e=!1,hours:n=!0}={}){if(null==t)return e?"--:--:--.---":"--:--:--";function r(t,e){return("00"+t).slice(-(e=e||2))}var o=t%1e3,s=(t=(t-o)/1e3)%60,i=(t=(t-s)/60)%60,a=(t-i)/60;return(a||n?r(a)+":":"")+r(i)+":"+r(s)+(e?"."+r(o,3):"")},toggleAutoSave(){this.autosave=!this.autosave},async save(){if(this.onSave){const t=this.version;this.saving=!0,await this.onSave(this.transcript),console.log("saved",this.transcript),this.lastSavedVersion=t,setTimeout((()=>{this.saving=!1}),100)}},saveAuto(){this.autosave&&this.save()},async decodeAudioWaveform(t){try{return this.decodingAudio=!0,this.decoder.suspended&&await this.decoder.resume(),t instanceof File?await this.decoder.decodeAudioFileData(await t.arrayBuffer()):await this.decoder.fetchAndDecodeAudioFile(t)}catch(e){throw e}finally{this.decodingAudio=!1}},async load({url:t,waveform:e,duration:n}){"string"==typeof e||e instanceof File?this.pending_waveform=(async()=>{const{data:t,duration:n}=await this.decodeAudioWaveform(e);return t})():null===e?this._waveform=[]:this.pending_waveform=(async()=>e)(),n&&(this.pending_duration=n),this._url=t,t&&0!==t.length||(this.video_duration=void 0)},waveformLoading(){this._waveform=void 0,this.loaded=!1},onPlay(){this.playing=!0,this.animationFrameID=requestAnimationFrame(this.updatePosition)},onPause(){this.playing=!1,this.animationFrameID&&(cancelAnimationFrame(this.animationFrameID),this.animationFrameID=void 0)},onEnded(){this.onPause()},updatePosition(t){this.position=1e3*this.$refs.video.currentTime,this.animationFrameID=requestAnimationFrame(this.updatePosition)},durationChanged(){const t=this.$refs.video;this._duration=1e3*t.duration,this.video_duration=1e3*t.duration},async onDataLoaded(){const t=this.$refs.video;t&&(this.isVideo=t.videoWidth>0&&t.videoHeight>0),this.pending_duration&&(this.pending_duration=void 0),this.pending_waveform&&(this._waveform=await this.pending_waveform,this.pending_waveform=void 0),this.loaded=!0},onEmpty(){this.loaded=!1,this.isVideo=!1},onGlobalKeydown(t){"s"!==t.key||!0!==t.ctrlKey&&!0!==t.metaKey||(t.preventDefault(),this.save()),("Space"===t.code&&!0===t.ctrlKey||"Escape"==t.code)&&(t.preventDefault(),this.$refs.video.paused?this.$refs.video.play():this.$refs.video.pause())},transcriptUpdated(t){this.version+=1},setPosition(t){void 0!==t&&(this.$refs.video.currentTime=t/1e3)},timeUpdate(t){this.position=1e3*this.$refs.video.currentTime},toggleShowConfidence(){this.showConfidence=!this.showConfidence}}};const sl=t=>(be="data-v-391121ff",t=t(),be=null,t),il={class:"editor-wrapper"},al={key:0,class:"header"},ll={class:"btn-group me-2",role:"group"},cl={key:0,class:"spinner-border spinner-border-sm",role:"status"},ul={key:1,class:"bi bi-check-lg",title:"Saglabāts"},fl={key:2,class:"bi bi-asterisk",title:"Ir nesaglabātas izmaiņas"},pl=zn(" Saglabāt "),dl=zn(" 5s "),hl={class:"btn-group me-2",role:"group"},gl=[sl((()=>Hn("i",{class:"bi bi-type-bold"},null,-1)))],vl=[sl((()=>Hn("i",{class:"bi bi-type-italic"},null,-1)))],ml=[sl((()=>Hn("i",{class:"bi bi-type-underline"},null,-1)))],yl=[sl((()=>Hn("i",{class:"bi"},[zn("x"),Hn("sup",null,"2")],-1)))],bl=[sl((()=>Hn("i",{class:"bi"},[zn("x"),Hn("sub",null,"2")],-1)))],_l=[sl((()=>Hn("i",{class:"bi bi-list-ul"},null,-1)))],xl={class:"footer"},wl=["src"],Il={class:"waveform-and-buttons"},kl={key:1,class:"waveform-loading"},Dl=[sl((()=>Hn("div",{class:"text-center",style:{position:"relative",top:"calc(50% - 1rem)"}},[Hn("div",{class:"spinner-grow",role:"status"}),Hn("div",{style:{position:"relative",display:"inline-block",top:"-0.5rem",left:"0.5rem"}}," Loading... ")],-1)))],Sl={class:"controls"},Nl={key:0,class:"btn-group pe-2",role:"group"},Cl=[sl((()=>Hn("i",{class:"bi bi-play-fill"},null,-1)))],Al=[sl((()=>Hn("i",{class:"bi bi-pause-fill"},null,-1)))],El={style:{"font-variant-numeric":"tabular-nums"}};async function Ol(t){const e=await async function(t){const e=new AudioContext,n=await e.decodeAudioData(t);return e.close(),n}(t),n=function(t,{channel:e=0}={}){return t.getChannelData(e)}(e);return{data:(r=n,Int16Array.from(r.map((t=>32768*t)))),sampleRate:e.sampleRate,length:e.length,duration:e.duration,numberOfChannels:e.numberOfChannels};var r}ol.render=function(t,e,n,r,o,s){const i=kn("TranscriptEditor"),c=kn("Waveform");return Pn(),jn("div",il,[tr(t.$slots,"default",{},void 0,!0),this.editable?(Pn(),jn("div",al,[Hn("div",ll,[Hn("button",{class:"btn btn-outline-primary",onClick:e[0]||(e[0]=t=>s.save())},[o.saving?(Pn(),jn("div",cl)):s.synced?(Pn(),jn("i",ul)):(Pn(),jn("i",fl)),pl]),Hn("button",{class:a("btn "+(o.autosave?"btn-primary":"btn-outline-primary")),onClick:e[1]||(e[1]=(...t)=>s.toggleAutoSave&&s.toggleAutoSave(...t)),title:"Automātiski sagalabāt katras 5s"},[Hn("i",{class:a("bi bi-toggle-"+(o.autosave?"on":"off"))},null,2),dl],2)]),Hn("div",hl,[Hn("button",{class:"btn btn-outline-primary",onClick:e[2]||(e[2]=e=>t.$refs.transcript.toggleStyle("bold"))},gl),Hn("button",{class:"btn btn-outline-primary",onClick:e[3]||(e[3]=e=>t.$refs.transcript.toggleStyle("italic"))},vl),Hn("button",{class:"btn btn-outline-primary",onClick:e[4]||(e[4]=e=>t.$refs.transcript.toggleStyle("underline"))},ml),Hn("button",{class:"btn btn-outline-primary",onClick:e[5]||(e[5]=e=>t.$refs.transcript.toggleStyle("superscript"))},yl),Hn("button",{class:"btn btn-outline-primary",onClick:e[6]||(e[6]=e=>t.$refs.transcript.toggleStyle("subscript"))},bl),Hn("button",{class:"btn btn-outline-primary",onClick:e[7]||(e[7]=e=>t.$refs.transcript.toggleBullet())},_l)])])):Xn("",!0),Wn(i,{class:"main transcript-editor",ref:"transcript",modelValue:n.transcript,"onUpdate:modelValue":[e[8]||(e[8]=t=>n.transcript=t),s.transcriptUpdated],time:o.position,"onUpdate:time":s.setPosition,onSelected:e[9]||(e[9]=t=>o.selected=t),editable:n.editable,"show-confidence":this.showConfidence},null,8,["modelValue","onUpdate:modelValue","time","onUpdate:time","editable","show-confidence"]),Hn("div",xl,[Hn("div",{class:a(["media-panel",{video:o.isVideo&&n.previewVideo}])},[Hn("video",{playsinline:"",src:o._url,ref:"video",onTimeupdate:e[10]||(e[10]=(...t)=>s.timeUpdate&&s.timeUpdate(...t)),onLoadeddata:e[11]||(e[11]=(...t)=>s.onDataLoaded&&s.onDataLoaded(...t)),onLoadstart:e[12]||(e[12]=(...t)=>s.onDataLoaded&&s.onDataLoaded(...t)),onEmptied:e[13]||(e[13]=(...t)=>s.onEmpty&&s.onEmpty(...t)),onDurationchange:e[14]||(e[14]=(...t)=>s.durationChanged&&s.durationChanged(...t)),onPlay:e[15]||(e[15]=(...t)=>s.onPlay&&s.onPlay(...t)),onPause:e[16]||(e[16]=(...t)=>s.onPause&&s.onPause(...t)),onEnded:e[17]||(e[17]=(...t)=>s.onEnded&&s.onEnded(...t))},null,40,wl),Hn("div",Il,[Hn("div",null,[null!=o._waveform?(Pn(),Vn(c,{key:0,class:"waveform",modelValue:o._waveform,"onUpdate:modelValue":e[18]||(e[18]=t=>o._waveform=t),time:o.position,"onUpdate:time":[e[19]||(e[19]=t=>o.position=t),s.setPosition],duration:o._duration,selection:o.selected},null,8,["modelValue","time","onUpdate:time","duration","selection"])):(Pn(),jn("div",kl,Dl))]),Hn("div",Sl,[o.loaded?(Pn(),jn("div",Nl,[o.playing?(Pn(),jn("button",{key:1,class:"btn btn-primary",onClick:e[21]||(e[21]=e=>t.$refs.video.pause())},Al)):(Pn(),jn("button",{key:0,class:"btn btn-primary",onClick:e[20]||(e[20]=e=>t.$refs.video.play())},Cl))])):Xn("",!0),Hn("span",El,l(s.msToTime(o.position))+" / "+l(s.msToTime(o.video_duration)),1)])])],2)])])},ol.__scopeId="data-v-391121ff";var Tl={components:{Editor:ol},props:{},data:()=>({transcript:{},waveform:[],duration:0,url:void 0}),async mounted(){},unmounted(){this.url&&this.url.length>0&&this.url.startsWith("blob:")&&URL.revokeObjectURL(this.url)},watch:{},methods:{async load({audio:t,transcript:e,file:n}){if("string"==typeof t){this.$refs.editor.waveformLoading(),this.url&&this.url.length>0&&this.url.startsWith("blob:")&&URL.revokeObjectURL(this.url);const e=t;this.$refs.editor.load({url:e,waveform:t})}else if(t instanceof File){this.$refs.editor.waveformLoading(),this.url&&this.url.length>0&&this.url.startsWith("blob:")&&URL.revokeObjectURL(this.url);const e=URL.createObjectURL(t);this.$refs.editor.load({url:e,waveform:t})}else if(t instanceof ArrayBuffer){this.$refs.editor.waveformLoading();const e=URL.createObjectURL(n||new Blob([t])),r=await Ol(t);this.$refs.editor.load({url:e,waveform:r.data,duration:1e3*r.duration})}else null===t&&(this.url&&this.url.length>0&&this.url.startsWith("blob:")&&URL.revokeObjectURL(this.url),this.$refs.editor.load({url:"",waveform:null,duration:0}));if(e)if("string"==typeof e){const t=await fetch(e);this.transcript=await t.json()}else e instanceof File?this.transcript=JSON.parse(await e.text()):this.transcript=e},async onSave(t){console.log("on save transcript:",t)},async save(t){console.log("save transcript not implemented, transcript:",t)}}};Tl.render=function(t,e,n,r,o,s){const i=kn("Editor");return Pn(),Vn(i,{class:"",transcript:o.transcript,waveform:o.waveform,duration:o.duration,url:o.url,onSave:s.onSave,ref:"editor"},null,8,["transcript","waveform","duration","url","onSave"])};function Pl(t="#app"){return uo(Tl).mount(t)}export default Pl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
